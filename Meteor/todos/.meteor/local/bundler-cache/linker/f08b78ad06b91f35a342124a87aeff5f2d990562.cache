[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar Iron = Package['iron:core'].Iron;\n\n/* Package-scope variables */\nvar Utils, hasOld, Route, paramParts, RouteController, IronRouter, Router;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/iron_router/packages/iron_router.js                                                             //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n(function () {                                                                                              // 1\n                                                                                                            // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                   //     // 4\n// packages/iron:router/lib/utils.js                                                                 //     // 5\n//                                                                                                   //     // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                     //     // 8\n/**                                                                                                  // 1   // 9\n * Utility methods available privately to the package.                                               // 2   // 10\n */                                                                                                  // 3   // 11\n                                                                                                     // 4   // 12\nUtils = {};                                                                                          // 5   // 13\n                                                                                                     // 6   // 14\n/**                                                                                                  // 7   // 15\n * global object on node or window object in the browser.                                            // 8   // 16\n */                                                                                                  // 9   // 17\n                                                                                                     // 10  // 18\nUtils.global = (function () { return this; })();                                                     // 11  // 19\n                                                                                                     // 12  // 20\n/**                                                                                                  // 13  // 21\n * Assert that the given condition is truthy.                                                        // 14  // 22\n *                                                                                                   // 15  // 23\n * @param {Boolean} condition The boolean condition to test for truthiness.                          // 16  // 24\n * @param {String} msg The error message to show if the condition is falsy.                          // 17  // 25\n */                                                                                                  // 18  // 26\n                                                                                                     // 19  // 27\nUtils.assert = function (condition, msg) {                                                           // 20  // 28\n  if (!condition)                                                                                    // 21  // 29\n    throw new Error(msg);                                                                            // 22  // 30\n};                                                                                                   // 23  // 31\n                                                                                                     // 24  // 32\nvar warn = function (msg) {                                                                          // 25  // 33\n  if (!Router || Router.options.supressWarnings !== true) {                                          // 26  // 34\n    console && console.warn && console.warn(msg);                                                    // 27  // 35\n  }                                                                                                  // 28  // 36\n};                                                                                                   // 29  // 37\n                                                                                                     // 30  // 38\nUtils.warn = function (condition, msg) {                                                             // 31  // 39\n  if (!condition)                                                                                    // 32  // 40\n    warn(msg);                                                                                       // 33  // 41\n};                                                                                                   // 34  // 42\n                                                                                                     // 35  // 43\n/**                                                                                                  // 36  // 44\n * deprecatation notice to the user which can be a string or object                                  // 37  // 45\n * of the form:                                                                                      // 38  // 46\n *                                                                                                   // 39  // 47\n * {                                                                                                 // 40  // 48\n *  name: 'somePropertyOrMethod',                                                                    // 41  // 49\n *  where: 'RouteController',                                                                        // 42  // 50\n *  instead: 'someOtherPropertyOrMethod',                                                            // 43  // 51\n *  message: ':name is deprecated. Please use :instead instead'                                      // 44  // 52\n * }                                                                                                 // 45  // 53\n */                                                                                                  // 46  // 54\nUtils.notifyDeprecated = function (info) {                                                           // 47  // 55\n  var name;                                                                                          // 48  // 56\n  var instead;                                                                                       // 49  // 57\n  var message;                                                                                       // 50  // 58\n  var where;                                                                                         // 51  // 59\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";             // 52  // 60\n                                                                                                     // 53  // 61\n  if (_.isObject(info)) {                                                                            // 54  // 62\n    name = info.name;                                                                                // 55  // 63\n    instead = info.instead;                                                                          // 56  // 64\n    message = info.message || defaultMessage;                                                        // 57  // 65\n    where = info.where || 'IronRouter';                                                              // 58  // 66\n  } else {                                                                                           // 59  // 67\n    message = info;                                                                                  // 60  // 68\n    name = '';                                                                                       // 61  // 69\n    instead = '';                                                                                    // 62  // 70\n    where = '';                                                                                      // 63  // 71\n  }                                                                                                  // 64  // 72\n                                                                                                     // 65  // 73\n  warn(                                                                                              // 66  // 74\n      '<deprecated> ' +                                                                              // 67  // 75\n      message                                                                                        // 68  // 76\n      .replace(':name', name)                                                                        // 69  // 77\n      .replace(':instead', instead)                                                                  // 70  // 78\n      .replace(':where', where) +                                                                    // 71  // 79\n      ' ' +                                                                                          // 72  // 80\n      (new Error).stack                                                                              // 73  // 81\n  );                                                                                                 // 74  // 82\n};                                                                                                   // 75  // 83\n                                                                                                     // 76  // 84\nUtils.withDeprecatedNotice = function (info, fn, thisArg) {                                          // 77  // 85\n  return function () {                                                                               // 78  // 86\n    Utils.notifyDeprecated(info);                                                                    // 79  // 87\n    return fn && fn.apply(thisArg || this, arguments);                                               // 80  // 88\n  };                                                                                                 // 81  // 89\n};                                                                                                   // 82  // 90\n                                                                                                     // 83  // 91\n/**                                                                                                  // 84  // 92\n * Given the name of a property, resolves to the value. Works with namespacing                       // 85  // 93\n * too. If first parameter is already a value that isn't a string it's returned                      // 86  // 94\n * immediately.                                                                                      // 87  // 95\n *                                                                                                   // 88  // 96\n * Examples:                                                                                         // 89  // 97\n *  'SomeClass' => window.SomeClass || global.someClass                                              // 90  // 98\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass                                      // 91  // 99\n *                                                                                                   // 92  // 100\n * @param {String|Object} nameOrValue                                                                // 93  // 101\n */                                                                                                  // 94  // 102\n                                                                                                     // 95  // 103\nUtils.resolveValue = function (nameOrValue) {                                                        // 96  // 104\n  var global = Utils.global;                                                                         // 97  // 105\n  var parts;                                                                                         // 98  // 106\n  var ptr;                                                                                           // 99  // 107\n                                                                                                     // 100\n  if (_.isString(nameOrValue)) {                                                                     // 101\n    parts = nameOrValue.split('.')                                                                   // 102\n    ptr = global;                                                                                    // 103\n    for (var i = 0; i < parts.length; i++) {                                                         // 104\n      ptr = ptr[parts[i]];                                                                           // 105\n      if (!ptr)                                                                                      // 106\n        return undefined;                                                                            // 107\n    }                                                                                                // 108\n  } else {                                                                                           // 109\n    ptr = nameOrValue;                                                                               // 110\n  }                                                                                                  // 111\n                                                                                                     // 112\n  // final position of ptr should be the resolved value                                              // 113\n  return ptr;                                                                                        // 114\n};                                                                                                   // 115\n                                                                                                     // 116\nUtils.hasOwnProperty = function (obj, key) {                                                         // 117\n  var prop = {}.hasOwnProperty;                                                                      // 118\n  return prop.call(obj, key);                                                                        // 119\n};                                                                                                   // 120\n                                                                                                     // 121\n/**                                                                                                  // 122\n * Don't mess with this function. It's exactly the same as the compiled                              // 123\n * coffeescript mechanism. If you change it we can't guarantee that our code                         // 124\n * will work when used with Coffeescript. One exception is putting in a runtime                      // 125\n * check that both child and parent are of type Function.                                            // 126\n */                                                                                                  // 127\n                                                                                                     // 128\nUtils.inherits = function (child, parent) {                                                          // 129\n  if (Utils.typeOf(child) !== '[object Function]')                                                   // 130\n    throw new Error('First parameter to Utils.inherits must be a function');                         // 131\n                                                                                                     // 132\n  if (Utils.typeOf(parent) !== '[object Function]')                                                  // 133\n    throw new Error('Second parameter to Utils.inherits must be a function');                        // 134\n                                                                                                     // 135\n  for (var key in parent) {                                                                          // 136\n    if (Utils.hasOwnProperty(parent, key))                                                           // 137\n      child[key] = parent[key];                                                                      // 138\n  }                                                                                                  // 139\n                                                                                                     // 140\n  function ctor () {                                                                                 // 141\n    this.constructor = child;                                                                        // 142\n  }                                                                                                  // 143\n                                                                                                     // 144\n  ctor.prototype = parent.prototype;                                                                 // 145\n  child.prototype = new ctor();                                                                      // 146\n  child.__super__ = parent.prototype;                                                                // 147\n  return child;                                                                                      // 148\n};                                                                                                   // 149\n                                                                                                     // 150\nUtils.toArray = function (obj) {                                                                     // 151\n  if (!obj)                                                                                          // 152\n    return [];                                                                                       // 153\n  else if (Utils.typeOf(obj) !== '[object Array]')                                                   // 154\n    return [obj];                                                                                    // 155\n  else                                                                                               // 156\n    return obj;                                                                                      // 157\n};                                                                                                   // 158\n                                                                                                     // 159\nUtils.typeOf = function (obj) {                                                                      // 160\n  if (obj && obj.typeName)                                                                           // 161\n    return obj.typeName;                                                                             // 162\n  else                                                                                               // 163\n    return Object.prototype.toString.call(obj);                                                      // 164\n};                                                                                                   // 165\n                                                                                                     // 166\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {                               // 167\n  if (arguments.length === 1)                                                                        // 168\n    definition = Super;                                                                              // 169\n  else {                                                                                             // 170\n    definition = definition || {};                                                                   // 171\n    definition.extend = Super;                                                                       // 172\n  }                                                                                                  // 173\n                                                                                                     // 174\n  return Utils.create(definition, {                                                                  // 175\n    onBeforeExtendPrototype: onBeforeExtendPrototype                                                 // 176\n  });                                                                                                // 177\n};                                                                                                   // 178\n                                                                                                     // 179\nUtils.create = function (definition, options) {                                                      // 180\n  var Constructor                                                                                    // 181\n    , extendFrom                                                                                     // 182\n    , savedPrototype;                                                                                // 183\n                                                                                                     // 184\n  options = options || {};                                                                           // 185\n  definition = definition || {};                                                                     // 186\n                                                                                                     // 187\n  if (Utils.hasOwnProperty(definition, 'constructor'))                                               // 188\n    Constructor = definition.constructor;                                                            // 189\n  else {                                                                                             // 190\n    Constructor = function () {                                                                      // 191\n      if (Constructor.__super__ && Constructor.__super__.constructor)                                // 192\n        return Constructor.__super__.constructor.apply(this, arguments);                             // 193\n    }                                                                                                // 194\n  }                                                                                                  // 195\n                                                                                                     // 196\n  extendFrom = definition.extend;                                                                    // 197\n                                                                                                     // 198\n  if (definition.extend) delete definition.extend;                                                   // 199\n                                                                                                     // 200\n  var inherit = function (Child, Super, prototype) {                                                 // 201\n    Utils.inherits(Child, Utils.resolveValue(Super));                                                // 202\n    if (prototype) _.extend(Child.prototype, prototype);                                             // 203\n  };                                                                                                 // 204\n                                                                                                     // 205\n  if (extendFrom) {                                                                                  // 206\n    inherit(Constructor, extendFrom);                                                                // 207\n  }                                                                                                  // 208\n                                                                                                     // 209\n  if (options.onBeforeExtendPrototype)                                                               // 210\n    options.onBeforeExtendPrototype.call(Constructor, definition);                                   // 211\n                                                                                                     // 212\n  _.extend(Constructor.prototype, definition);                                                       // 213\n                                                                                                     // 214\n  return Constructor;                                                                                // 215\n};                                                                                                   // 216\n                                                                                                     // 217\nUtils.capitalize = function (str) {                                                                  // 218\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);                                     // 219\n};                                                                                                   // 220\n                                                                                                     // 221\nUtils.upperCamelCase = function (str) {                                                              // 222\n  var re = /_|-|\\./;                                                                                 // 223\n                                                                                                     // 224\n  if (!str)                                                                                          // 225\n    return '';                                                                                       // 226\n                                                                                                     // 227\n  return _.map(str.split(re), function (word) {                                                      // 228\n    return Utils.capitalize(word);                                                                   // 229\n  }).join('');                                                                                       // 230\n};                                                                                                   // 231\n                                                                                                     // 232\nUtils.camelCase = function (str) {                                                                   // 233\n  var output = Utils.upperCamelCase(str);                                                            // 234\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);                          // 235\n  return output;                                                                                     // 236\n};                                                                                                   // 237\n                                                                                                     // 238\nUtils.pick = function (/* args */) {                                                                 // 239\n  var args = _.toArray(arguments)                                                                    // 240\n    , arg;                                                                                           // 241\n  for (var i = 0; i < args.length; i++) {                                                            // 242\n    arg = args[i];                                                                                   // 243\n    if (typeof arg !== 'undefined' && arg !== null)                                                  // 244\n      return arg;                                                                                    // 245\n  }                                                                                                  // 246\n                                                                                                     // 247\n  return null;                                                                                       // 248\n};                                                                                                   // 249\n                                                                                                     // 250\nUtils.StringConverters = {                                                                           // 251\n  'none': function(input) {                                                                          // 252\n    return input;                                                                                    // 253\n  },                                                                                                 // 254\n                                                                                                     // 255\n  'upperCamelCase': function (input) {                                                               // 256\n    return Utils.upperCamelCase(input);                                                              // 257\n  },                                                                                                 // 258\n                                                                                                     // 259\n  'camelCase': function (input) {                                                                    // 260\n    return Utils.camelCase(input);                                                                   // 261\n  }                                                                                                  // 262\n};                                                                                                   // 263\n                                                                                                     // 264\nUtils.rewriteLegacyHooks = function (obj) {                                                          // 265\n  var legacyToNew = IronRouter.LEGACY_HOOK_TYPES;                                                    // 266\n                                                                                                     // 267\n  _.each(legacyToNew, function (newHook, oldHook) {                                                  // 268\n    // only look on the immediate object, not its                                                    // 269\n    // proto chain                                                                                   // 270\n    if (_.has(obj, oldHook)) {                                                                       // 271\n      hasOld = true;                                                                                 // 272\n      obj[newHook] = obj[oldHook];                                                                   // 273\n                                                                                                     // 274\n      Utils.notifyDeprecated({                                                                       // 275\n        where: 'RouteController',                                                                    // 276\n        name: oldHook,                                                                               // 277\n        instead: newHook                                                                             // 278\n      });                                                                                            // 279\n    }                                                                                                // 280\n  });                                                                                                // 281\n};                                                                                                   // 282\n                                                                                                     // 283\n                                                                                                     // 284\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 293\n                                                                                                            // 294\n}).call(this);                                                                                              // 295\n                                                                                                            // 296\n                                                                                                            // 297\n                                                                                                            // 298\n                                                                                                            // 299\n                                                                                                            // 300\n                                                                                                            // 301\n(function () {                                                                                              // 302\n                                                                                                            // 303\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 304\n//                                                                                                   //     // 305\n// packages/iron:router/lib/route.js                                                                 //     // 306\n//                                                                                                   //     // 307\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 308\n                                                                                                     //     // 309\n/*                                                                                                   // 1   // 310\n * Inspiration and some code for the compilation of routes comes from pagejs.                        // 2   // 311\n * The original has been modified to better handle hash fragments, and to store                      // 3   // 312\n * the regular expression on the Route instance. Also, the resolve method has                        // 4   // 313\n * been added to return a resolved path given a parameters object.                                   // 5   // 314\n */                                                                                                  // 6   // 315\n                                                                                                     // 7   // 316\nRoute = function (router, name, options) {                                                           // 8   // 317\n  var path;                                                                                          // 9   // 318\n                                                                                                     // 10  // 319\n  Utils.assert(                                                                                      // 11  // 320\n    router instanceof IronRouter,                                                                    // 12  // 321\n    \"Route constructor first parameter must be a Router\");                                           // 13  // 322\n                                                                                                     // 14  // 323\n  Utils.assert(                                                                                      // 15  // 324\n    _.isString(name),                                                                                // 16  // 325\n    \"Route constructor second parameter must be a String name\");                                     // 17  // 326\n                                                                                                     // 18  // 327\n  if (_.isFunction(options))                                                                         // 19  // 328\n    options = { handler: options };                                                                  // 20  // 329\n                                                                                                     // 21  // 330\n  options = this.options = options || {};                                                            // 22  // 331\n  path = options.path || ('/' + name);                                                               // 23  // 332\n                                                                                                     // 24  // 333\n  this.router = router;                                                                              // 25  // 334\n  this.originalPath = path;                                                                          // 26  // 335\n                                                                                                     // 27  // 336\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')                          // 28  // 337\n    this.originalPath = '/' + this.originalPath;                                                     // 29  // 338\n                                                                                                     // 30  // 339\n  this.name = name;                                                                                  // 31  // 340\n  this.where = options.where || 'client';                                                            // 32  // 341\n  this.controller = options.controller;                                                              // 33  // 342\n  this.action = options.action;                                                                      // 34  // 343\n                                                                                                     // 35  // 344\n  if (typeof options.reactive !== 'undefined')                                                       // 36  // 345\n    this.isReactive = options.reactive;                                                              // 37  // 346\n  else                                                                                               // 38  // 347\n    this.isReactive = true;                                                                          // 39  // 348\n                                                                                                     // 40  // 349\n  Utils.rewriteLegacyHooks(this.options);                                                            // 41  // 350\n                                                                                                     // 42  // 351\n  this.compile();                                                                                    // 43  // 352\n};                                                                                                   // 44  // 353\n                                                                                                     // 45  // 354\nRoute.prototype = {                                                                                  // 46  // 355\n  constructor: Route,                                                                                // 47  // 356\n                                                                                                     // 48  // 357\n  /**                                                                                                // 49  // 358\n   * Compile the path.                                                                               // 50  // 359\n   *                                                                                                 // 51  // 360\n   *  @return {Route}                                                                                // 52  // 361\n   *  @api public                                                                                    // 53  // 362\n   */                                                                                                // 54  // 363\n                                                                                                     // 55  // 364\n  compile: function () {                                                                             // 56  // 365\n    var self = this;                                                                                 // 57  // 366\n    var path;                                                                                        // 58  // 367\n    var options = self.options;                                                                      // 59  // 368\n                                                                                                     // 60  // 369\n    this.keys = [];                                                                                  // 61  // 370\n                                                                                                     // 62  // 371\n    if (self.originalPath instanceof RegExp) {                                                       // 63  // 372\n      self.re = self.originalPath;                                                                   // 64  // 373\n    } else {                                                                                         // 65  // 374\n      path = self.originalPath                                                                       // 66  // 375\n        .replace(/(.)\\/$/, '$1')                                                                     // 67  // 376\n        .concat(options.strict ? '' : '/?')                                                          // 68  // 377\n        .replace(/\\/\\(/g, '(?:/')                                                                    // 69  // 378\n        .replace(/#/, '/?#')                                                                         // 70  // 379\n        .replace(                                                                                    // 71  // 380\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                    // 72  // 381\n          function (match, slash, format, key, capture, optional){                                   // 73  // 382\n            self.keys.push({ name: key, optional: !! optional });                                    // 74  // 383\n            slash = slash || '';                                                                     // 75  // 384\n            return ''                                                                                // 76  // 385\n              + (optional ? '' : slash)                                                              // 77  // 386\n              + '(?:'                                                                                // 78  // 387\n              + (optional ? slash : '')                                                              // 79  // 388\n              + (format || '')                                                                       // 80  // 389\n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'                             // 81  // 390\n              + (optional || '');                                                                    // 82  // 391\n          }                                                                                          // 83  // 392\n        )                                                                                            // 84  // 393\n        .replace(/([\\/.])/g, '\\\\$1')                                                                 // 85  // 394\n        .replace(/\\*/g, '(.*)');                                                                     // 86  // 395\n                                                                                                     // 87  // 396\n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');                          // 88  // 397\n    }                                                                                                // 89  // 398\n                                                                                                     // 90  // 399\n    return this;                                                                                     // 91  // 400\n  },                                                                                                 // 92  // 401\n                                                                                                     // 93  // 402\n  /**                                                                                                // 94  // 403\n   * Returns an array of parameters given a path. The array may have named                           // 95  // 404\n   * properties in addition to indexed values.                                                       // 96  // 405\n   *                                                                                                 // 97  // 406\n   * @param {String} path                                                                            // 98  // 407\n   * @return {Array}                                                                                 // 99  // 408\n   * @api public                                                                                     // 100\n   */                                                                                                // 101\n                                                                                                     // 102\n  params: function (path) {                                                                          // 103\n    if (!path)                                                                                       // 104\n      return null;                                                                                   // 105\n                                                                                                     // 106\n    var params = [];                                                                                 // 107\n    var m = this.exec(path);                                                                         // 108\n    var queryString;                                                                                 // 109\n    var keys = this.keys;                                                                            // 110\n    var key;                                                                                         // 111\n    var value;                                                                                       // 112\n                                                                                                     // 113\n    if (!m)                                                                                          // 114\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"'); // 115\n                                                                                                     // 116\n    for (var i = 1, len = m.length; i < len; ++i) {                                                  // 117\n      key = keys[i - 1];                                                                             // 118\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];                             // 119\n      if (key) {                                                                                     // 120\n        params[key.name] = params[key.name] !== undefined ?                                          // 121\n          params[key.name] : value;                                                                  // 122\n      } else                                                                                         // 123\n        params.push(value);                                                                          // 124\n    }                                                                                                // 125\n                                                                                                     // 126\n    path = decodeURI(path);                                                                          // 127\n                                                                                                     // 128\n    queryString = path.split('?')[1];                                                                // 129\n    if (queryString)                                                                                 // 130\n      queryString = queryString.split('#')[0];                                                       // 131\n                                                                                                     // 132\n    params.hash = path.split('#')[1];                                                                // 133\n                                                                                                     // 134\n    if (queryString) {                                                                               // 135\n      _.each(queryString.split('&'), function (paramString) {                                        // 136\n        paramParts = paramString.split('=');                                                         // 137\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);                                   // 138\n      });                                                                                            // 139\n    }                                                                                                // 140\n                                                                                                     // 141\n    return params;                                                                                   // 142\n  },                                                                                                 // 143\n                                                                                                     // 144\n  normalizePath: function (path) {                                                                   // 145\n    var origin = Meteor.absoluteUrl();                                                               // 146\n                                                                                                     // 147\n    path = path.replace(origin, '');                                                                 // 148\n                                                                                                     // 149\n    var queryStringIndex = path.indexOf('?');                                                        // 150\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;                               // 151\n                                                                                                     // 152\n    var hashIndex = path.indexOf('#');                                                               // 153\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;                                             // 154\n                                                                                                     // 155\n    if (path.charAt(0) !== '/')                                                                      // 156\n      path = '/' + path;                                                                             // 157\n                                                                                                     // 158\n    return path;                                                                                     // 159\n  },                                                                                                 // 160\n                                                                                                     // 161\n  /**                                                                                                // 162\n   * Returns true if the path matches and false otherwise.                                           // 163\n   *                                                                                                 // 164\n   * @param {String} path                                                                            // 165\n   * @return {Boolean}                                                                               // 166\n   * @api public                                                                                     // 167\n   */                                                                                                // 168\n  test: function (path) {                                                                            // 169\n    return this.re.test(this.normalizePath(path));                                                   // 170\n  },                                                                                                 // 171\n                                                                                                     // 172\n  exec: function (path) {                                                                            // 173\n    return this.re.exec(this.normalizePath(path));                                                   // 174\n  },                                                                                                 // 175\n                                                                                                     // 176\n  resolve: function (params, options) {                                                              // 177\n    var value;                                                                                       // 178\n    var isValueDefined;                                                                              // 179\n    var result;                                                                                      // 180\n    var wildCardCount = 0;                                                                           // 181\n    var path = this.originalPath;                                                                    // 182\n    var hash;                                                                                        // 183\n    var query;                                                                                       // 184\n    var isMissingParams = false;                                                                     // 185\n                                                                                                     // 186\n    options = options || {};                                                                         // 187\n    params = params || [];                                                                           // 188\n    query = options.query;                                                                           // 189\n    hash = options.hash && options.hash.toString();                                                  // 190\n                                                                                                     // 191\n    if (path instanceof RegExp) {                                                                    // 192\n      throw new Error('Cannot currently resolve a regular expression path');                         // 193\n    } else {                                                                                         // 194\n      path = this.originalPath                                                                       // 195\n        .replace(                                                                                    // 196\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                    // 197\n          function (match, slash, format, key, capture, optional, offset) {                          // 198\n            slash = slash || '';                                                                     // 199\n            value = params[key];                                                                     // 200\n            isValueDefined = typeof value !== 'undefined';                                           // 201\n                                                                                                     // 202\n            if (optional && !isValueDefined) {                                                       // 203\n              value = '';                                                                            // 204\n            } else if (!isValueDefined) {                                                            // 205\n              isMissingParams = true;                                                                // 206\n              return;                                                                                // 207\n            }                                                                                        // 208\n                                                                                                     // 209\n            value = _.isFunction(value) ? value.call(params) : value;                                // 210\n            var escapedValue = _.map(String(value).split('/'), function (segment) {                  // 211\n              return encodeURIComponent(segment);                                                    // 212\n            }).join('/');                                                                            // 213\n            return slash + escapedValue                                                              // 214\n          }                                                                                          // 215\n        )                                                                                            // 216\n        .replace(                                                                                    // 217\n          /\\*/g,                                                                                     // 218\n          function (match) {                                                                         // 219\n            if (typeof params[wildCardCount] === 'undefined') {                                      // 220\n              throw new Error(                                                                       // 221\n                'You are trying to access a wild card parameter at index ' +                         // 222\n                wildCardCount +                                                                      // 223\n                ' but the value of params at that index is undefined');                              // 224\n            }                                                                                        // 225\n                                                                                                     // 226\n            var paramValue = String(params[wildCardCount++]);                                        // 227\n            return _.map(paramValue.split('/'), function (segment) {                                 // 228\n              return encodeURIComponent(segment);                                                    // 229\n            }).join('/');                                                                            // 230\n          }                                                                                          // 231\n        );                                                                                           // 232\n                                                                                                     // 233\n      if (_.isObject(query)) {                                                                       // 234\n        query = _.map(_.pairs(query), function (queryPart) {                                         // 235\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);                              // 236\n        }).join('&');                                                                                // 237\n      }                                                                                              // 238\n                                                                                                     // 239\n      if (query && query.length)                                                                     // 240\n        path = path + '?' + query;                                                                   // 241\n                                                                                                     // 242\n      if (hash) {                                                                                    // 243\n        hash = encodeURI(hash.replace('#', ''));                                                     // 244\n        path = query ?                                                                               // 245\n          path + '#' + hash : path + '/#' + hash;                                                    // 246\n      }                                                                                              // 247\n    }                                                                                                // 248\n                                                                                                     // 249\n    // Because of optional possibly empty segments we normalize path here                            // 250\n    path = path.replace(/\\/+/g, '/'); // Multiple / -> one /                                         // 251\n    path = path.replace(/^(.+)\\/$/g, '$1'); // Removal of trailing /                                 // 252\n                                                                                                     // 253\n    return isMissingParams ? null : path;                                                            // 254\n  },                                                                                                 // 255\n                                                                                                     // 256\n  path: function (params, options) {                                                                 // 257\n    return this.resolve(params, options);                                                            // 258\n  },                                                                                                 // 259\n                                                                                                     // 260\n  url: function (params, options) {                                                                  // 261\n    var path = this.path(params, options);                                                           // 262\n    if (path) {                                                                                      // 263\n      if (path.charAt(0) === '/')                                                                    // 264\n        path = path.slice(1, path.length);                                                           // 265\n      return Meteor.absoluteUrl() + path;                                                            // 266\n    } else {                                                                                         // 267\n      return null;                                                                                   // 268\n    }                                                                                                // 269\n  },                                                                                                 // 270\n                                                                                                     // 271\n  findController: function (path, options) {                                                         // 272\n    var self = this;                                                                                 // 273\n    var handler;                                                                                     // 274\n    var controllerClass;                                                                             // 275\n    var controller;                                                                                  // 276\n    var action;                                                                                      // 277\n    var routeName;                                                                                   // 278\n                                                                                                     // 279\n    var resolveValue = Utils.resolveValue;                                                           // 280\n    var toArray = Utils.toArray;                                                                     // 281\n                                                                                                     // 282\n    var resolveController = function (name) {                                                        // 283\n      var controller = resolveValue(name);                                                           // 284\n      if (typeof controller === 'undefined') {                                                       // 285\n        throw new Error(                                                                             // 286\n          'controller \"' + name + '\" is not defined');                                               // 287\n      }                                                                                              // 288\n                                                                                                     // 289\n      return controller;                                                                             // 290\n    };                                                                                               // 291\n                                                                                                     // 292\n    // controller option is a string specifying the name                                             // 293\n    // of a controller somewhere                                                                     // 294\n    if (_.isString(this.controller))                                                                 // 295\n      controller = resolveController(this.controller);                                               // 296\n    else if (_.isFunction(this.controller))                                                          // 297\n      controller = this.controller;                                                                  // 298\n    else if (this.name)                                                                              // 299\n      controller = resolveValue(Router.convertRouteControllerName(this.name + 'Controller'));        // 300\n                                                                                                     // 301\n    if (!controller)                                                                                 // 302\n      controller = RouteController;                                                                  // 303\n                                                                                                     // 304\n    return controller;                                                                               // 305\n  },                                                                                                 // 306\n                                                                                                     // 307\n  newController: function (path, options) {                                                          // 308\n    var C = this.findController(path, options);                                                      // 309\n                                                                                                     // 310\n    options = _.extend({}, options, {                                                                // 311\n      path: path,                                                                                    // 312\n      params: this.params(path),                                                                     // 313\n      where: this.where,                                                                             // 314\n      action: this.action                                                                            // 315\n    });                                                                                              // 316\n                                                                                                     // 317\n    return new C(this.router, this, options);                                                        // 318\n  },                                                                                                 // 319\n                                                                                                     // 320\n  getController: function (path, options) {                                                          // 321\n    return this.newController(path, options);                                                        // 322\n  }.deprecate({where: 'Route', name: 'getController', instead: 'newController'})                     // 323\n};                                                                                                   // 324\n                                                                                                     // 325\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 635\n                                                                                                            // 636\n}).call(this);                                                                                              // 637\n                                                                                                            // 638\n                                                                                                            // 639\n                                                                                                            // 640\n                                                                                                            // 641\n                                                                                                            // 642\n                                                                                                            // 643\n(function () {                                                                                              // 644\n                                                                                                            // 645\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 646\n//                                                                                                   //     // 647\n// packages/iron:router/lib/route_controller.js                                                      //     // 648\n//                                                                                                   //     // 649\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 650\n                                                                                                     //     // 651\nRouteController = function (router, route, options) {                                                // 1   // 652\n  var self = this;                                                                                   // 2   // 653\n                                                                                                     // 3   // 654\n  if (!(router instanceof IronRouter))                                                               // 4   // 655\n    throw new Error('RouteController requires a router');                                            // 5   // 656\n                                                                                                     // 6   // 657\n  if (!(route instanceof Route))                                                                     // 7   // 658\n    throw new Error('RouteController requires a route');                                             // 8   // 659\n                                                                                                     // 9   // 660\n  options = this.options = options || {};                                                            // 10  // 661\n                                                                                                     // 11  // 662\n  this.router = router;                                                                              // 12  // 663\n  this.route = route;                                                                                // 13  // 664\n                                                                                                     // 14  // 665\n  this.path = options.path || '';                                                                    // 15  // 666\n  this.params = options.params || [];                                                                // 16  // 667\n  this.where = options.where || 'client';                                                            // 17  // 668\n  this.action = options.action || this.action;                                                       // 18  // 669\n                                                                                                     // 19  // 670\n  Utils.rewriteLegacyHooks(this.options);                                                            // 20  // 671\n  Utils.rewriteLegacyHooks(this);                                                                    // 21  // 672\n};                                                                                                   // 22  // 673\n                                                                                                     // 23  // 674\nRouteController.prototype = {                                                                        // 24  // 675\n  constructor: RouteController,                                                                      // 25  // 676\n                                                                                                     // 26  // 677\n  /**                                                                                                // 27  // 678\n   * Returns the value of a property, searching for the property in this lookup                      // 28  // 679\n   * order:                                                                                          // 29  // 680\n   *                                                                                                 // 30  // 681\n   *   1. RouteController options                                                                    // 31  // 682\n   *   2. RouteController prototype                                                                  // 32  // 683\n   *   3. Route options                                                                              // 33  // 684\n   *   4. Router options                                                                             // 34  // 685\n   */                                                                                                // 35  // 686\n  lookupProperty: function (key) {                                                                   // 36  // 687\n    var value;                                                                                       // 37  // 688\n                                                                                                     // 38  // 689\n    if (!_.isString(key))                                                                            // 39  // 690\n      throw new Error('key must be a string');                                                       // 40  // 691\n                                                                                                     // 41  // 692\n    // 1. RouteController options                                                                    // 42  // 693\n    if (typeof (value = this.options[key]) !== 'undefined')                                          // 43  // 694\n      return value;                                                                                  // 44  // 695\n                                                                                                     // 45  // 696\n    // 2. RouteController instance                                                                   // 46  // 697\n    if (typeof (value = this[key]) !== 'undefined')                                                  // 47  // 698\n      return value;                                                                                  // 48  // 699\n                                                                                                     // 49  // 700\n    var opts;                                                                                        // 50  // 701\n                                                                                                     // 51  // 702\n    // 3. Route options                                                                              // 52  // 703\n    opts = this.route.options;                                                                       // 53  // 704\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                          // 54  // 705\n      return value;                                                                                  // 55  // 706\n                                                                                                     // 56  // 707\n    // 4. Router options                                                                             // 57  // 708\n    opts = this.router.options;                                                                      // 58  // 709\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                          // 59  // 710\n      return value;                                                                                  // 60  // 711\n                                                                                                     // 61  // 712\n    // 5. Oops couldn't find property                                                                // 62  // 713\n    return undefined;                                                                                // 63  // 714\n  },                                                                                                 // 64  // 715\n                                                                                                     // 65  // 716\n  runHooks: function (hookName, more, cb) {                                                          // 66  // 717\n    var self = this;                                                                                 // 67  // 718\n    var ctor = this.constructor;                                                                     // 68  // 719\n                                                                                                     // 69  // 720\n    if (!_.isString(hookName))                                                                       // 70  // 721\n      throw new Error('hookName must be a string');                                                  // 71  // 722\n                                                                                                     // 72  // 723\n    if (more && !_.isArray(more))                                                                    // 73  // 724\n      throw new Error('more must be an array of functions');                                         // 74  // 725\n                                                                                                     // 75  // 726\n    var isPaused = false;                                                                            // 76  // 727\n                                                                                                     // 77  // 728\n    var lookupHook = function (nameOrFn) {                                                           // 78  // 729\n      var fn = nameOrFn;                                                                             // 79  // 730\n                                                                                                     // 80  // 731\n      // if we already have a func just return it                                                    // 81  // 732\n      if (_.isFunction(fn))                                                                          // 82  // 733\n        return fn;                                                                                   // 83  // 734\n                                                                                                     // 84  // 735\n      // look up one of the out-of-box hooks like                                                    // 85  // 736\n      // 'loaded or 'dataNotFound' if the nameOrFn is a                                              // 86  // 737\n      // string                                                                                      // 87  // 738\n      if (_.isString(fn)) {                                                                          // 88  // 739\n        if (_.isFunction(Router.hooks[fn]))                                                          // 89  // 740\n          return Router.hooks[fn];                                                                   // 90  // 741\n      }                                                                                              // 91  // 742\n                                                                                                     // 92  // 743\n      // we couldn't find it so throw an error                                                       // 93  // 744\n      throw new Error(\"No hook found named: \", nameOrFn);                                            // 94  // 745\n    };                                                                                               // 95  // 746\n                                                                                                     // 96  // 747\n    // concatenate together hook arrays from the inheritance                                         // 97  // 748\n    // heirarchy, starting at the top parent down to the child.                                      // 98  // 749\n    var collectInheritedHooks = function (ctor) {                                                    // 99  // 750\n      var hooks = [];                                                                                // 100\n                                                                                                     // 101\n      if (ctor.__super__)                                                                            // 102\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));                     // 103\n                                                                                                     // 104\n      return Utils.hasOwnProperty(ctor.prototype, hookName) ?                                        // 105\n        hooks.concat(ctor.prototype[hookName]) : hooks;                                              // 106\n    };                                                                                               // 107\n                                                                                                     // 108\n                                                                                                     // 109\n    // get a list of hooks to run in the following order:                                            // 110\n    // 1. RouteController option hooks                                                               // 111\n    // 2. RouteController proto hooks (including inherited super to child)                           // 112\n    // 3. RouteController object hooks                                                               // 113\n    // 4. Router global hooks                                                                        // 114\n    // 5. Route option hooks                                                                         // 115\n    // 6. more                                                                                       // 116\n                                                                                                     // 117\n    var toArray = Utils.toArray;                                                                     // 118\n    var routerHooks = this.router.getHooks(hookName, this.route.name);                               // 119\n                                                                                                     // 120\n    var opts;                                                                                        // 121\n    opts = this.route.options;                                                                       // 122\n    var routeOptionHooks = toArray(opts && opts[hookName]);                                          // 123\n                                                                                                     // 124\n    opts = this.options;                                                                             // 125\n    var optionHooks = toArray(opts && opts[hookName]);                                               // 126\n                                                                                                     // 127\n    var protoHooks = collectInheritedHooks(this.constructor);                                        // 128\n                                                                                                     // 129\n    var objectHooks;                                                                                 // 130\n    // don't accidentally grab the prototype hooks!                                                  // 131\n    // this makes sure the hook is on the object itself                                              // 132\n    // not on its constructor's prototype object.                                                    // 133\n    if (_.has(this, hookName))                                                                       // 134\n      objectHooks = toArray(this[hookName])                                                          // 135\n    else                                                                                             // 136\n      objectHooks = [];                                                                              // 137\n                                                                                                     // 138\n    var allHooks = optionHooks                                                                       // 139\n      .concat(protoHooks)                                                                            // 140\n      .concat(objectHooks)                                                                           // 141\n      .concat(routeOptionHooks)                                                                      // 142\n      .concat(routerHooks)                                                                           // 143\n      .concat(more);                                                                                 // 144\n                                                                                                     // 145\n    var isPaused = false;                                                                            // 146\n    var pauseFn = function () {                                                                      // 147\n      isPaused = true;                                                                               // 148\n    };                                                                                               // 149\n                                                                                                     // 150\n    for (var i = 0, hook; hook = allHooks[i]; i++) {                                                 // 151\n      var hookFn = lookupHook(hook);                                                                 // 152\n                                                                                                     // 153\n      if (!isPaused && !this.isStopped)                                                              // 154\n        hookFn.call(self, pauseFn, i);                                                               // 155\n    }                                                                                                // 156\n                                                                                                     // 157\n    cb && cb.call(self, isPaused);                                                                   // 158\n    return isPaused;                                                                                 // 159\n  },                                                                                                 // 160\n                                                                                                     // 161\n  action: function () {                                                                              // 162\n    throw new Error('not implemented');                                                              // 163\n  },                                                                                                 // 164\n                                                                                                     // 165\n  stop: function (cb) {                                                                              // 166\n    return this._stopController(cb);                                                                 // 167\n  },                                                                                                 // 168\n                                                                                                     // 169\n  _stopController: function (cb) {                                                                   // 170\n    var self = this;                                                                                 // 171\n                                                                                                     // 172\n    if (this.isStopped)                                                                              // 173\n      return;                                                                                        // 174\n                                                                                                     // 175\n    self.isRunning = false;                                                                          // 176\n    self.runHooks('onStop');                                                                         // 177\n    self.isStopped = true;                                                                           // 178\n    cb && cb.call(self);                                                                             // 179\n  },                                                                                                 // 180\n                                                                                                     // 181\n  _run: function () {                                                                                // 182\n    throw new Error('not implemented');                                                              // 183\n  }                                                                                                  // 184\n};                                                                                                   // 185\n                                                                                                     // 186\n_.extend(RouteController, {                                                                          // 187\n  /**                                                                                                // 188\n   * Inherit from RouteController                                                                    // 189\n   *                                                                                                 // 190\n   * @param {Object} definition Prototype properties for inherited class.                            // 191\n   */                                                                                                // 192\n                                                                                                     // 193\n  extend: function (definition) {                                                                    // 194\n    Utils.rewriteLegacyHooks(definition);                                                            // 195\n                                                                                                     // 196\n    return Utils.extend(this, definition, function (definition) {                                    // 197\n      var klass = this;                                                                              // 198\n                                                                                                     // 199\n                                                                                                     // 200\n      /*                                                                                             // 201\n        Allow calling a class method from javascript, directly in the subclass                       // 202\n        definition.                                                                                  // 203\n                                                                                                     // 204\n        Instead of this:                                                                             // 205\n          MyController = RouteController.extend({...});                                              // 206\n          MyController.before(function () {});                                                       // 207\n                                                                                                     // 208\n        You can do:                                                                                  // 209\n          MyController = RouteController.extend({                                                    // 210\n            before: function () {}                                                                   // 211\n          });                                                                                        // 212\n                                                                                                     // 213\n        And in Coffeescript you can do:                                                              // 214\n         MyController extends RouteController                                                        // 215\n           @before function () {}                                                                    // 216\n       */                                                                                            // 217\n    });                                                                                              // 218\n  }                                                                                                  // 219\n});                                                                                                  // 220\n                                                                                                     // 221\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 873\n                                                                                                            // 874\n}).call(this);                                                                                              // 875\n                                                                                                            // 876\n                                                                                                            // 877\n                                                                                                            // 878\n                                                                                                            // 879\n                                                                                                            // 880\n                                                                                                            // 881\n(function () {                                                                                              // 882\n                                                                                                            // 883\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 884\n//                                                                                                   //     // 885\n// packages/iron:router/lib/router.js                                                                //     // 886\n//                                                                                                   //     // 887\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 888\n                                                                                                     //     // 889\nIronRouter = function (options) {                                                                    // 1   // 890\n  var self = this;                                                                                   // 2   // 891\n                                                                                                     // 3   // 892\n  this.configure(options);                                                                           // 4   // 893\n                                                                                                     // 5   // 894\n  /**                                                                                                // 6   // 895\n   * The routes array which doubles as a named route index by adding                                 // 7   // 896\n   * properties to the array.                                                                        // 8   // 897\n   *                                                                                                 // 9   // 898\n   * @api public                                                                                     // 10  // 899\n   */                                                                                                // 11  // 900\n  this.routes = [];                                                                                  // 12  // 901\n                                                                                                     // 13  // 902\n  /**                                                                                                // 14  // 903\n   * Default name conversions for controller                                                         // 15  // 904\n   * and template lookup.                                                                            // 16  // 905\n   */                                                                                                // 17  // 906\n  this._nameConverters = {};                                                                         // 18  // 907\n  this.setNameConverter('Template', 'none');                                                         // 19  // 908\n  this.setNameConverter('RouteController', 'upperCamelCase');                                        // 20  // 909\n                                                                                                     // 21  // 910\n  this._globalHooks = {};                                                                            // 22  // 911\n  _.each(IronRouter.HOOK_TYPES, function (type) {                                                    // 23  // 912\n    self._globalHooks[type] = [];                                                                    // 24  // 913\n                                                                                                     // 25  // 914\n    // example:                                                                                      // 26  // 915\n    //  self.onRun = function (hook, options) {                                                      // 27  // 916\n    //    return self.addHook('onRun', hook, options);                                               // 28  // 917\n    //  };                                                                                           // 29  // 918\n    self[type] = function (hook, options) {                                                          // 30  // 919\n      return self.addHook(type, hook, options);                                                      // 31  // 920\n    };                                                                                               // 32  // 921\n  });                                                                                                // 33  // 922\n                                                                                                     // 34  // 923\n  _.each(IronRouter.LEGACY_HOOK_TYPES, function (type, legacyType) {                                 // 35  // 924\n    self[legacyType] = function () {                                                                 // 36  // 925\n      Utils.notifyDeprecated({                                                                       // 37  // 926\n        where: 'Router',                                                                             // 38  // 927\n        name: legacyType,                                                                            // 39  // 928\n        instead: type                                                                                // 40  // 929\n      });                                                                                            // 41  // 930\n                                                                                                     // 42  // 931\n      return self[type].apply(this, arguments);                                                      // 43  // 932\n    }                                                                                                // 44  // 933\n  });                                                                                                // 45  // 934\n};                                                                                                   // 46  // 935\n                                                                                                     // 47  // 936\nIronRouter.HOOK_TYPES = [                                                                            // 48  // 937\n  'onRun',                                                                                           // 49  // 938\n  'onData',                                                                                          // 50  // 939\n  'onBeforeAction',                                                                                  // 51  // 940\n  'onAfterAction',                                                                                   // 52  // 941\n  'onStop',                                                                                          // 53  // 942\n                                                                                                     // 54  // 943\n  // not technically a hook but we'll use it                                                         // 55  // 944\n  // in a similar way. This will cause waitOn                                                        // 56  // 945\n  // to be added as a method to the Router and then                                                  // 57  // 946\n  // it can be selectively applied to specific routes                                                // 58  // 947\n  'waitOn'                                                                                           // 59  // 948\n];                                                                                                   // 60  // 949\n                                                                                                     // 61  // 950\nIronRouter.LEGACY_HOOK_TYPES = {                                                                     // 62  // 951\n  'load': 'onRun',                                                                                   // 63  // 952\n  'before': 'onBeforeAction',                                                                        // 64  // 953\n  'after': 'onAfterAction',                                                                          // 65  // 954\n  'unload': 'onStop'                                                                                 // 66  // 955\n};                                                                                                   // 67  // 956\n                                                                                                     // 68  // 957\nIronRouter.prototype = {                                                                             // 69  // 958\n  constructor: IronRouter,                                                                           // 70  // 959\n                                                                                                     // 71  // 960\n  /**                                                                                                // 72  // 961\n   * Configure instance with options. This can be called at any time. If the                         // 73  // 962\n   * instance options object hasn't been created yet it is created here.                             // 74  // 963\n   *                                                                                                 // 75  // 964\n   * @param {Object} options                                                                         // 76  // 965\n   * @return {IronRouter}                                                                            // 77  // 966\n   * @api public                                                                                     // 78  // 967\n   */                                                                                                // 79  // 968\n                                                                                                     // 80  // 969\n  configure: function (options) {                                                                    // 81  // 970\n    var self = this;                                                                                 // 82  // 971\n                                                                                                     // 83  // 972\n    options = options || {};                                                                         // 84  // 973\n    this.options = this.options || {};                                                               // 85  // 974\n    _.extend(this.options, options);                                                                 // 86  // 975\n                                                                                                     // 87  // 976\n    // e.g. before: fn OR before: [fn1, fn2]                                                         // 88  // 977\n    _.each(IronRouter.HOOK_TYPES, function(type) {                                                   // 89  // 978\n      if (self.options[type]) {                                                                      // 90  // 979\n        _.each(Utils.toArray(self.options[type]), function(hook) {                                   // 91  // 980\n          self.addHook(type, hook);                                                                  // 92  // 981\n        });                                                                                          // 93  // 982\n                                                                                                     // 94  // 983\n        delete self.options[type];                                                                   // 95  // 984\n      }                                                                                              // 96  // 985\n    });                                                                                              // 97  // 986\n                                                                                                     // 98  // 987\n    _.each(IronRouter.LEGACY_HOOK_TYPES, function(type, legacyType) {                                // 99  // 988\n      if (self.options[legacyType]) {                                                                // 100\n        // XXX: warning?                                                                             // 101\n        _.each(Utils.toArray(self.options[legacyType]), function(hook) {                             // 102\n          self.addHook(type, hook);                                                                  // 103\n        });                                                                                          // 104\n                                                                                                     // 105\n        delete self.options[legacyType];                                                             // 106\n      }                                                                                              // 107\n    });                                                                                              // 108\n                                                                                                     // 109\n    if (options.templateNameConverter)                                                               // 110\n      this.setNameConverter('Template', options.templateNameConverter);                              // 111\n                                                                                                     // 112\n    if (options.routeControllerNameConverter)                                                        // 113\n      this.setNameConverter('RouteController', options.routeControllerNameConverter);                // 114\n                                                                                                     // 115\n    return this;                                                                                     // 116\n  },                                                                                                 // 117\n                                                                                                     // 118\n  convertTemplateName: function (input) {                                                            // 119\n    var converter = this._nameConverters['Template'];                                                // 120\n    if (!converter)                                                                                  // 121\n      throw new Error('No name converter found for Template');                                       // 122\n    return converter(input);                                                                         // 123\n  },                                                                                                 // 124\n                                                                                                     // 125\n  convertRouteControllerName: function (input) {                                                     // 126\n    var converter = this._nameConverters['RouteController'];                                         // 127\n    if (!converter)                                                                                  // 128\n      throw new Error('No name converter found for RouteController');                                // 129\n    return converter(input);                                                                         // 130\n  },                                                                                                 // 131\n                                                                                                     // 132\n  setNameConverter: function (key, stringOrFunc) {                                                   // 133\n    var converter;                                                                                   // 134\n                                                                                                     // 135\n    if (_.isFunction(stringOrFunc))                                                                  // 136\n      converter = stringOrFunc;                                                                      // 137\n                                                                                                     // 138\n    if (_.isString(stringOrFunc))                                                                    // 139\n      converter = Utils.StringConverters[stringOrFunc];                                              // 140\n                                                                                                     // 141\n    if (!converter) {                                                                                // 142\n      throw new Error('No converter found named: ' + stringOrFunc);                                  // 143\n    }                                                                                                // 144\n                                                                                                     // 145\n    this._nameConverters[key] = converter;                                                           // 146\n    return this;                                                                                     // 147\n  },                                                                                                 // 148\n                                                                                                     // 149\n  /**                                                                                                // 150\n   *                                                                                                 // 151\n   * Add a hook to all routes. The hooks will apply to all routes,                                   // 152\n   * unless you name routes to include or exclude via `only` and `except` options                    // 153\n   *                                                                                                 // 154\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                             // 155\n   * @param {Object} [options] Options to controll the hooks [optional]                              // 156\n   * @param {Function} [hook] Callback to run                                                        // 157\n   * @return {IronRouter}                                                                            // 158\n   * @api public                                                                                     // 159\n   *                                                                                                 // 160\n   */                                                                                                // 161\n                                                                                                     // 162\n  addHook: function(type, hook, options) {                                                           // 163\n    options = options || {}                                                                          // 164\n                                                                                                     // 165\n    if (options.only)                                                                                // 166\n      options.only = Utils.toArray(options.only);                                                    // 167\n    if (options.except)                                                                              // 168\n      options.except = Utils.toArray(options.except);                                                // 169\n                                                                                                     // 170\n    this._globalHooks[type].push({options: options, hook: hook});                                    // 171\n                                                                                                     // 172\n    return this;                                                                                     // 173\n  },                                                                                                 // 174\n                                                                                                     // 175\n  /**                                                                                                // 176\n   *                                                                                                 // 177\n   * Fetch the list of global hooks that apply to the given route name.                              // 178\n   * Hooks are defined by the .addHook() function above.                                             // 179\n   *                                                                                                 // 180\n   * @param {String} [type] one of IronRouter.HOOK_TYPES                                             // 181\n   * @param {String} [name] the name of the route we are interested in                               // 182\n   * @return {[Function]} [hooks] an array of hooks to run                                           // 183\n   * @api public                                                                                     // 184\n   *                                                                                                 // 185\n   */                                                                                                // 186\n                                                                                                     // 187\n  getHooks: function(type, name) {                                                                   // 188\n    var hooks = [];                                                                                  // 189\n                                                                                                     // 190\n    _.each(this._globalHooks[type], function(hook) {                                                 // 191\n      var options = hook.options;                                                                    // 192\n                                                                                                     // 193\n      if (options.except && _.include(options.except, name))                                         // 194\n        return;                                                                                      // 195\n                                                                                                     // 196\n      if (options.only && ! _.include(options.only, name))                                           // 197\n        return;                                                                                      // 198\n                                                                                                     // 199\n      hooks.push(hook.hook);                                                                         // 200\n    });                                                                                              // 201\n                                                                                                     // 202\n    return hooks;                                                                                    // 203\n  },                                                                                                 // 204\n                                                                                                     // 205\n                                                                                                     // 206\n  /**                                                                                                // 207\n   * Convenience function to define a bunch of routes at once. In the future we                      // 208\n   * might call the callback with a custom dsl.                                                      // 209\n   *                                                                                                 // 210\n   * Example:                                                                                        // 211\n   *  Router.map(function () {                                                                       // 212\n   *    this.route('posts');                                                                         // 213\n   *  });                                                                                            // 214\n   *                                                                                                 // 215\n   *  @param {Function} cb                                                                           // 216\n   *  @return {IronRouter}                                                                           // 217\n   *  @api public                                                                                    // 218\n   */                                                                                                // 219\n                                                                                                     // 220\n  map: function (cb) {                                                                               // 221\n    Utils.assert(_.isFunction(cb),                                                                   // 222\n           'map requires a function as the first parameter');                                        // 223\n    cb.call(this);                                                                                   // 224\n    return this;                                                                                     // 225\n  },                                                                                                 // 226\n                                                                                                     // 227\n  /**                                                                                                // 228\n   * Define a new route. You must name the route, but as a second parameter you                      // 229\n   * can either provide an object of options or a Route instance.                                    // 230\n   *                                                                                                 // 231\n   * @param {String} name The name of the route                                                      // 232\n   * @param {Object} [options] Options to pass along to the route                                    // 233\n   * @return {Route}                                                                                 // 234\n   * @api public                                                                                     // 235\n   */                                                                                                // 236\n                                                                                                     // 237\n  route: function (name, options) {                                                                  // 238\n    var route;                                                                                       // 239\n                                                                                                     // 240\n    Utils.assert(_.isString(name), 'name is a required parameter');                                  // 241\n                                                                                                     // 242\n    if (options instanceof Route)                                                                    // 243\n      route = options;                                                                               // 244\n    else                                                                                             // 245\n      route = new Route(this, name, options);                                                        // 246\n                                                                                                     // 247\n    this.routes[name] = route;                                                                       // 248\n    this.routes.push(route);                                                                         // 249\n    return route;                                                                                    // 250\n  },                                                                                                 // 251\n                                                                                                     // 252\n  path: function (routeName, params, options) {                                                      // 253\n    var route = this.routes[routeName];                                                              // 254\n    Utils.warn(route,                                                                                // 255\n     'You called Router.path for a route named ' + routeName + ' but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.path(params, options);                                                     // 257\n  },                                                                                                 // 258\n                                                                                                     // 259\n  url: function (routeName, params, options) {                                                       // 260\n    var route = this.routes[routeName];                                                              // 261\n    Utils.warn(route,                                                                                // 262\n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.url(params, options);                                                      // 264\n  },                                                                                                 // 265\n                                                                                                     // 266\n  match: function (path) {                                                                           // 267\n    return _.find(this.routes, function(r) { return r.test(path); });                                // 268\n  },                                                                                                 // 269\n                                                                                                     // 270\n  dispatch: function (path, options, cb) {                                                           // 271\n    var route = this.match(path);                                                                    // 272\n                                                                                                     // 273\n    if (! route)                                                                                     // 274\n      return this.onRouteNotFound(path, options);                                                    // 275\n                                                                                                     // 276\n    if (route.where !== (Meteor.isClient ? 'client' : 'server'))                                     // 277\n      return this.onUnhandled(path, options);                                                        // 278\n                                                                                                     // 279\n    var controller = route.newController(path, options);                                             // 280\n    this.run(controller, cb);                                                                        // 281\n  },                                                                                                 // 282\n                                                                                                     // 283\n  run: function (controller, cb) {                                                                   // 284\n    var self = this;                                                                                 // 285\n    var where = Meteor.isClient ? 'client' : 'server';                                               // 286\n                                                                                                     // 287\n    Utils.assert(controller, 'run requires a controller');                                           // 288\n                                                                                                     // 289\n    // one last check to see if we should handle the route here                                      // 290\n    if (controller.where != where) {                                                                 // 291\n      self.onUnhandled(controller.path, controller.options);                                         // 292\n      return;                                                                                        // 293\n    }                                                                                                // 294\n                                                                                                     // 295\n    var run = function () {                                                                          // 296\n      self._currentController = controller;                                                          // 297\n      // set the location                                                                            // 298\n      cb && cb(controller);                                                                          // 299\n      self._currentController._run();                                                                // 300\n    };                                                                                               // 301\n                                                                                                     // 302\n    // if we already have a current controller let's stop it and then                                // 303\n    // run the new one once the old controller is stopped. this will add                             // 304\n    // the run function as an onInvalidate callback to the controller's                              // 305\n    // computation. Otherwse, just run the new controller.                                           // 306\n    if (this._currentController)                                                                     // 307\n      this._currentController._stopController(run);                                                  // 308\n    else                                                                                             // 309\n      run();                                                                                         // 310\n  },                                                                                                 // 311\n                                                                                                     // 312\n  onUnhandled: function (path, options) {                                                            // 313\n    throw new Error('onUnhandled not implemented');                                                  // 314\n  },                                                                                                 // 315\n                                                                                                     // 316\n  onRouteNotFound: function (path, options) {                                                        // 317\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');                               // 318\n  }                                                                                                  // 319\n};                                                                                                   // 320\n                                                                                                     // 321\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1211\n                                                                                                            // 1212\n}).call(this);                                                                                              // 1213\n                                                                                                            // 1214\n                                                                                                            // 1215\n                                                                                                            // 1216\n                                                                                                            // 1217\n                                                                                                            // 1218\n                                                                                                            // 1219\n(function () {                                                                                              // 1220\n                                                                                                            // 1221\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1222\n//                                                                                                   //     // 1223\n// packages/iron:router/lib/server/route_controller.js                                               //     // 1224\n//                                                                                                   //     // 1225\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1226\n                                                                                                     //     // 1227\nRouteController = Utils.extend(RouteController, {                                                    // 1   // 1228\n  constructor: function () {                                                                         // 2   // 1229\n    RouteController.__super__.constructor.apply(this, arguments);                                    // 3   // 1230\n    this.request = this.options.request;                                                             // 4   // 1231\n    this.response = this.options.response;                                                           // 5   // 1232\n    this.next = this.options.next;                                                                   // 6   // 1233\n                                                                                                     // 7   // 1234\n    this._dataValue = this.data || {};                                                               // 8   // 1235\n                                                                                                     // 9   // 1236\n    this.data = function (value) {                                                                   // 10  // 1237\n      if (value)                                                                                     // 11  // 1238\n        this._dataValue = value;                                                                     // 12  // 1239\n      else                                                                                           // 13  // 1240\n        return _.isFunction(this._dataValue) ? this._dataValue.call(this) : this._dataValue;         // 14  // 1241\n    };                                                                                               // 15  // 1242\n  },                                                                                                 // 16  // 1243\n                                                                                                     // 17  // 1244\n  _run: function () {                                                                                // 18  // 1245\n    var self = this                                                                                  // 19  // 1246\n      , args = _.toArray(arguments);                                                                 // 20  // 1247\n                                                                                                     // 21  // 1248\n    try {                                                                                            // 22  // 1249\n      // if we're already running, you can't call run again without                                  // 23  // 1250\n      // calling stop first.                                                                         // 24  // 1251\n      if (self.isRunning)                                                                            // 25  // 1252\n        throw new Error(\"You called _run without first calling stop\");                               // 26  // 1253\n                                                                                                     // 27  // 1254\n      self.isRunning = true;                                                                         // 28  // 1255\n      self.isStopped = false;                                                                        // 29  // 1256\n                                                                                                     // 30  // 1257\n      var action = _.isFunction(self.action) ? self.action : self[self.action];                      // 31  // 1258\n      Utils.assert(action,                                                                           // 32  // 1259\n        \"You don't have an action named \\\"\" + self.action + \"\\\" defined on your RouteController\");   // 33  // 1260\n                                                                                                     // 34  // 1261\n      this.runHooks('onRun');                                                                        // 35  // 1262\n      var isPaused = this.runHooks('onBeforeAction');                                                // 36  // 1263\n                                                                                                     // 37  // 1264\n      if (! isPaused) {                                                                              // 38  // 1265\n        action.call(this);                                                                           // 39  // 1266\n        this.runHooks('onAfterAction');                                                              // 40  // 1267\n      }                                                                                              // 41  // 1268\n    } catch (e) {                                                                                    // 42  // 1269\n      console.error(e.toString());                                                                   // 43  // 1270\n      this.response.end();                                                                           // 44  // 1271\n    }                                                                                                // 45  // 1272\n  },                                                                                                 // 46  // 1273\n                                                                                                     // 47  // 1274\n  action: function () {                                                                              // 48  // 1275\n    this.response.end();                                                                             // 49  // 1276\n  }                                                                                                  // 50  // 1277\n});                                                                                                  // 51  // 1278\n                                                                                                     // 52  // 1279\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1280\n                                                                                                            // 1281\n}).call(this);                                                                                              // 1282\n                                                                                                            // 1283\n                                                                                                            // 1284\n                                                                                                            // 1285\n                                                                                                            // 1286\n                                                                                                            // 1287\n                                                                                                            // 1288\n(function () {                                                                                              // 1289\n                                                                                                            // 1290\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1291\n//                                                                                                   //     // 1292\n// packages/iron:router/lib/server/router.js                                                         //     // 1293\n//                                                                                                   //     // 1294\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1295\n                                                                                                     //     // 1296\nvar connect = Npm.require('connect');                                                                // 1   // 1297\nvar Fiber = Npm.require('fibers');                                                                   // 2   // 1298\n                                                                                                     // 3   // 1299\nvar root = global;                                                                                   // 4   // 1300\n                                                                                                     // 5   // 1301\nvar connectHandlers;                                                                                 // 6   // 1302\nvar connect;                                                                                         // 7   // 1303\n                                                                                                     // 8   // 1304\nif (typeof __meteor_bootstrap__.app !== 'undefined') {                                               // 9   // 1305\n  connectHandlers = __meteor_bootstrap__.app;                                                        // 10  // 1306\n} else {                                                                                             // 11  // 1307\n  connectHandlers = WebApp.connectHandlers;                                                          // 12  // 1308\n}                                                                                                    // 13  // 1309\n                                                                                                     // 14  // 1310\nIronRouter = Utils.extend(IronRouter, {                                                              // 15  // 1311\n  constructor: function (options) {                                                                  // 16  // 1312\n    var self = this;                                                                                 // 17  // 1313\n    IronRouter.__super__.constructor.apply(this, arguments);                                         // 18  // 1314\n    Meteor.startup(function () {                                                                     // 19  // 1315\n      setTimeout(function () {                                                                       // 20  // 1316\n        if (self.options.autoStart !== false)                                                        // 21  // 1317\n          self.start();                                                                              // 22  // 1318\n      });                                                                                            // 23  // 1319\n    });                                                                                              // 24  // 1320\n  },                                                                                                 // 25  // 1321\n                                                                                                     // 26  // 1322\n  start: function () {                                                                               // 27  // 1323\n    connectHandlers                                                                                  // 28  // 1324\n      .use(connect.query())                                                                          // 29  // 1325\n      .use(connect.bodyParser())                                                                     // 30  // 1326\n      .use(_.bind(this.onRequest, this));                                                            // 31  // 1327\n  },                                                                                                 // 32  // 1328\n                                                                                                     // 33  // 1329\n  onRequest: function (req, res, next) {                                                             // 34  // 1330\n    var self = this;                                                                                 // 35  // 1331\n    Fiber(function () {                                                                              // 36  // 1332\n      self.dispatch(req.url, {                                                                       // 37  // 1333\n        request: req,                                                                                // 38  // 1334\n        response: res,                                                                               // 39  // 1335\n        next: next                                                                                   // 40  // 1336\n      });                                                                                            // 41  // 1337\n    }).run();                                                                                        // 42  // 1338\n  },                                                                                                 // 43  // 1339\n                                                                                                     // 44  // 1340\n  run: function (controller, cb) {                                                                   // 45  // 1341\n    IronRouter.__super__.run.apply(this, arguments);                                                 // 46  // 1342\n    if (controller === this._currentController)                                                      // 47  // 1343\n      cb && cb(controller);                                                                          // 48  // 1344\n  },                                                                                                 // 49  // 1345\n                                                                                                     // 50  // 1346\n  stop: function () {                                                                                // 51  // 1347\n  },                                                                                                 // 52  // 1348\n                                                                                                     // 53  // 1349\n  onUnhandled: function (path, options) {                                                            // 54  // 1350\n    options.next();                                                                                  // 55  // 1351\n  },                                                                                                 // 56  // 1352\n                                                                                                     // 57  // 1353\n  onRouteNotFound: function (path, options) {                                                        // 58  // 1354\n    options.next();                                                                                  // 59  // 1355\n  }                                                                                                  // 60  // 1356\n});                                                                                                  // 61  // 1357\n                                                                                                     // 62  // 1358\nRouter = new IronRouter;                                                                             // 63  // 1359\n                                                                                                     // 64  // 1360\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1361\n                                                                                                            // 1362\n}).call(this);                                                                                              // 1363\n                                                                                                            // 1364\n                                                                                                            // 1365\n                                                                                                            // 1366\n                                                                                                            // 1367\n                                                                                                            // 1368\n                                                                                                            // 1369\n(function () {                                                                                              // 1370\n                                                                                                            // 1371\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1372\n//                                                                                                   //     // 1373\n// packages/iron:router/lib/version_conflict_error.js                                                //     // 1374\n//                                                                                                   //     // 1375\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1376\n                                                                                                     //     // 1377\nif (Package['cmather:iron-router']) {                                                                // 1   // 1378\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                // 17  // 1394\n}                                                                                                    // 18  // 1395\n                                                                                                     // 19  // 1396\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 1397\n                                                                                                            // 1398\n}).call(this);                                                                                              // 1399\n                                                                                                            // 1400\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:router'] = {\n  RouteController: RouteController,\n  Route: Route,\n  Router: Router,\n  Utils: Utils,\n  IronRouter: IronRouter\n};\n\n})();\n","servePath":"/packages/iron_router.js","sourceMap":{"version":3,"sources":["/packages/iron_router/packages/iron_router.js"],"names":[],"mappingsmH","file":"/packages/iron_router.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/utils.js                                                                 //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n/**                                                                                                  // 1\n * Utility methods available privately to the package.                                               // 2\n */                                                                                                  // 3\n                                                                                                     // 4\nUtils = {};                                                                                          // 5\n                                                                                                     // 6\n/**                                                                                                  // 7\n * global object on node or window object in the browser.                                            // 8\n */                                                                                                  // 9\n                                                                                                     // 10\nUtils.global = (function () { return this; })();                                                     // 11\n                                                                                                     // 12\n/**                                                                                                  // 13\n * Assert that the given condition is truthy.                                                        // 14\n *                                                                                                   // 15\n * @param {Boolean} condition The boolean condition to test for truthiness.                          // 16\n * @param {String} msg The error message to show if the condition is falsy.                          // 17\n */                                                                                                  // 18\n                                                                                                     // 19\nUtils.assert = function (condition, msg) {                                                           // 20\n  if (!condition)                                                                                    // 21\n    throw new Error(msg);                                                                            // 22\n};                                                                                                   // 23\n                                                                                                     // 24\nvar warn = function (msg) {                                                                          // 25\n  if (!Router || Router.options.supressWarnings !== true) {                                          // 26\n    console && console.warn && console.warn(msg);                                                    // 27\n  }                                                                                                  // 28\n};                                                                                                   // 29\n                                                                                                     // 30\nUtils.warn = function (condition, msg) {                                                             // 31\n  if (!condition)                                                                                    // 32\n    warn(msg);                                                                                       // 33\n};                                                                                                   // 34\n                                                                                                     // 35\n/**                                                                                                  // 36\n * deprecatation notice to the user which can be a string or object                                  // 37\n * of the form:                                                                                      // 38\n *                                                                                                   // 39\n * {                                                                                                 // 40\n *  name: 'somePropertyOrMethod',                                                                    // 41\n *  where: 'RouteController',                                                                        // 42\n *  instead: 'someOtherPropertyOrMethod',                                                            // 43\n *  message: ':name is deprecated. Please use :instead instead'                                      // 44\n * }                                                                                                 // 45\n */                                                                                                  // 46\nUtils.notifyDeprecated = function (info) {                                                           // 47\n  var name;                                                                                          // 48\n  var instead;                                                                                       // 49\n  var message;                                                                                       // 50\n  var where;                                                                                         // 51\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";             // 52\n                                                                                                     // 53\n  if (_.isObject(info)) {                                                                            // 54\n    name = info.name;                                                                                // 55\n    instead = info.instead;                                                                          // 56\n    message = info.message || defaultMessage;                                                        // 57\n    where = info.where || 'IronRouter';                                                              // 58\n  } else {                                                                                           // 59\n    message = info;                                                                                  // 60\n    name = '';                                                                                       // 61\n    instead = '';                                                                                    // 62\n    where = '';                                                                                      // 63\n  }                                                                                                  // 64\n                                                                                                     // 65\n  warn(                                                                                              // 66\n      '<deprecated> ' +                                                                              // 67\n      message                                                                                        // 68\n      .replace(':name', name)                                                                        // 69\n      .replace(':instead', instead)                                                                  // 70\n      .replace(':where', where) +                                                                    // 71\n      ' ' +                                                                                          // 72\n      (new Error).stack                                                                              // 73\n  );                                                                                                 // 74\n};                                                                                                   // 75\n                                                                                                     // 76\nUtils.withDeprecatedNotice = function (info, fn, thisArg) {                                          // 77\n  return function () {                                                                               // 78\n    Utils.notifyDeprecated(info);                                                                    // 79\n    return fn && fn.apply(thisArg || this, arguments);                                               // 80\n  };                                                                                                 // 81\n};                                                                                                   // 82\n                                                                                                     // 83\n/**                                                                                                  // 84\n * Given the name of a property, resolves to the value. Works with namespacing                       // 85\n * too. If first parameter is already a value that isn't a string it's returned                      // 86\n * immediately.                                                                                      // 87\n *                                                                                                   // 88\n * Examples:                                                                                         // 89\n *  'SomeClass' => window.SomeClass || global.someClass                                              // 90\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass                                      // 91\n *                                                                                                   // 92\n * @param {String|Object} nameOrValue                                                                // 93\n */                                                                                                  // 94\n                                                                                                     // 95\nUtils.resolveValue = function (nameOrValue) {                                                        // 96\n  var global = Utils.global;                                                                         // 97\n  var parts;                                                                                         // 98\n  var ptr;                                                                                           // 99\n                                                                                                     // 100\n  if (_.isString(nameOrValue)) {                                                                     // 101\n    parts = nameOrValue.split('.')                                                                   // 102\n    ptr = global;                                                                                    // 103\n    for (var i = 0; i < parts.length; i++) {                                                         // 104\n      ptr = ptr[parts[i]];                                                                           // 105\n      if (!ptr)                                                                                      // 106\n        return undefined;                                                                            // 107\n    }                                                                                                // 108\n  } else {                                                                                           // 109\n    ptr = nameOrValue;                                                                               // 110\n  }                                                                                                  // 111\n                                                                                                     // 112\n  // final position of ptr should be the resolved value                                              // 113\n  return ptr;                                                                                        // 114\n};                                                                                                   // 115\n                                                                                                     // 116\nUtils.hasOwnProperty = function (obj, key) {                                                         // 117\n  var prop = {}.hasOwnProperty;                                                                      // 118\n  return prop.call(obj, key);                                                                        // 119\n};                                                                                                   // 120\n                                                                                                     // 121\n/**                                                                                                  // 122\n * Don't mess with this function. It's exactly the same as the compiled                              // 123\n * coffeescript mechanism. If you change it we can't guarantee that our code                         // 124\n * will work when used with Coffeescript. One exception is putting in a runtime                      // 125\n * check that both child and parent are of type Function.                                            // 126\n */                                                                                                  // 127\n                                                                                                     // 128\nUtils.inherits = function (child, parent) {                                                          // 129\n  if (Utils.typeOf(child) !== '[object Function]')                                                   // 130\n    throw new Error('First parameter to Utils.inherits must be a function');                         // 131\n                                                                                                     // 132\n  if (Utils.typeOf(parent) !== '[object Function]')                                                  // 133\n    throw new Error('Second parameter to Utils.inherits must be a function');                        // 134\n                                                                                                     // 135\n  for (var key in parent) {                                                                          // 136\n    if (Utils.hasOwnProperty(parent, key))                                                           // 137\n      child[key] = parent[key];                                                                      // 138\n  }                                                                                                  // 139\n                                                                                                     // 140\n  function ctor () {                                                                                 // 141\n    this.constructor = child;                                                                        // 142\n  }                                                                                                  // 143\n                                                                                                     // 144\n  ctor.prototype = parent.prototype;                                                                 // 145\n  child.prototype = new ctor();                                                                      // 146\n  child.__super__ = parent.prototype;                                                                // 147\n  return child;                                                                                      // 148\n};                                                                                                   // 149\n                                                                                                     // 150\nUtils.toArray = function (obj) {                                                                     // 151\n  if (!obj)                                                                                          // 152\n    return [];                                                                                       // 153\n  else if (Utils.typeOf(obj) !== '[object Array]')                                                   // 154\n    return [obj];                                                                                    // 155\n  else                                                                                               // 156\n    return obj;                                                                                      // 157\n};                                                                                                   // 158\n                                                                                                     // 159\nUtils.typeOf = function (obj) {                                                                      // 160\n  if (obj && obj.typeName)                                                                           // 161\n    return obj.typeName;                                                                             // 162\n  else                                                                                               // 163\n    return Object.prototype.toString.call(obj);                                                      // 164\n};                                                                                                   // 165\n                                                                                                     // 166\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {                               // 167\n  if (arguments.length === 1)                                                                        // 168\n    definition = Super;                                                                              // 169\n  else {                                                                                             // 170\n    definition = definition || {};                                                                   // 171\n    definition.extend = Super;                                                                       // 172\n  }                                                                                                  // 173\n                                                                                                     // 174\n  return Utils.create(definition, {                                                                  // 175\n    onBeforeExtendPrototype: onBeforeExtendPrototype                                                 // 176\n  });                                                                                                // 177\n};                                                                                                   // 178\n                                                                                                     // 179\nUtils.create = function (definition, options) {                                                      // 180\n  var Constructor                                                                                    // 181\n    , extendFrom                                                                                     // 182\n    , savedPrototype;                                                                                // 183\n                                                                                                     // 184\n  options = options || {};                                                                           // 185\n  definition = definition || {};                                                                     // 186\n                                                                                                     // 187\n  if (Utils.hasOwnProperty(definition, 'constructor'))                                               // 188\n    Constructor = definition.constructor;                                                            // 189\n  else {                                                                                             // 190\n    Constructor = function () {                                                                      // 191\n      if (Constructor.__super__ && Constructor.__super__.constructor)                                // 192\n        return Constructor.__super__.constructor.apply(this, arguments);                             // 193\n    }                                                                                                // 194\n  }                                                                                                  // 195\n                                                                                                     // 196\n  extendFrom = definition.extend;                                                                    // 197\n                                                                                                     // 198\n  if (definition.extend) delete definition.extend;                                                   // 199\n                                                                                                     // 200\n  var inherit = function (Child, Super, prototype) {                                                 // 201\n    Utils.inherits(Child, Utils.resolveValue(Super));                                                // 202\n    if (prototype) _.extend(Child.prototype, prototype);                                             // 203\n  };                                                                                                 // 204\n                                                                                                     // 205\n  if (extendFrom) {                                                                                  // 206\n    inherit(Constructor, extendFrom);                                                                // 207\n  }                                                                                                  // 208\n                                                                                                     // 209\n  if (options.onBeforeExtendPrototype)                                                               // 210\n    options.onBeforeExtendPrototype.call(Constructor, definition);                                   // 211\n                                                                                                     // 212\n  _.extend(Constructor.prototype, definition);                                                       // 213\n                                                                                                     // 214\n  return Constructor;                                                                                // 215\n};                                                                                                   // 216\n                                                                                                     // 217\nUtils.capitalize = function (str) {                                                                  // 218\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);                                     // 219\n};                                                                                                   // 220\n                                                                                                     // 221\nUtils.upperCamelCase = function (str) {                                                              // 222\n  var re = /_|-|\\./;                                                                                 // 223\n                                                                                                     // 224\n  if (!str)                                                                                          // 225\n    return '';                                                                                       // 226\n                                                                                                     // 227\n  return _.map(str.split(re), function (word) {                                                      // 228\n    return Utils.capitalize(word);                                                                   // 229\n  }).join('');                                                                                       // 230\n};                                                                                                   // 231\n                                                                                                     // 232\nUtils.camelCase = function (str) {                                                                   // 233\n  var output = Utils.upperCamelCase(str);                                                            // 234\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);                          // 235\n  return output;                                                                                     // 236\n};                                                                                                   // 237\n                                                                                                     // 238\nUtils.pick = function (/* args */) {                                                                 // 239\n  var args = _.toArray(arguments)                                                                    // 240\n    , arg;                                                                                           // 241\n  for (var i = 0; i < args.length; i++) {                                                            // 242\n    arg = args[i];                                                                                   // 243\n    if (typeof arg !== 'undefined' && arg !== null)                                                  // 244\n      return arg;                                                                                    // 245\n  }                                                                                                  // 246\n                                                                                                     // 247\n  return null;                                                                                       // 248\n};                                                                                                   // 249\n                                                                                                     // 250\nUtils.StringConverters = {                                                                           // 251\n  'none': function(input) {                                                                          // 252\n    return input;                                                                                    // 253\n  },                                                                                                 // 254\n                                                                                                     // 255\n  'upperCamelCase': function (input) {                                                               // 256\n    return Utils.upperCamelCase(input);                                                              // 257\n  },                                                                                                 // 258\n                                                                                                     // 259\n  'camelCase': function (input) {                                                                    // 260\n    return Utils.camelCase(input);                                                                   // 261\n  }                                                                                                  // 262\n};                                                                                                   // 263\n                                                                                                     // 264\nUtils.rewriteLegacyHooks = function (obj) {                                                          // 265\n  var legacyToNew = IronRouter.LEGACY_HOOK_TYPES;                                                    // 266\n                                                                                                     // 267\n  _.each(legacyToNew, function (newHook, oldHook) {                                                  // 268\n    // only look on the immediate object, not its                                                    // 269\n    // proto chain                                                                                   // 270\n    if (_.has(obj, oldHook)) {                                                                       // 271\n      hasOld = true;                                                                                 // 272\n      obj[newHook] = obj[oldHook];                                                                   // 273\n                                                                                                     // 274\n      Utils.notifyDeprecated({                                                                       // 275\n        where: 'RouteController',                                                                    // 276\n        name: oldHook,                                                                               // 277\n        instead: newHook                                                                             // 278\n      });                                                                                            // 279\n    }                                                                                                // 280\n  });                                                                                                // 281\n};                                                                                                   // 282\n                                                                                                     // 283\n                                                                                                     // 284\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/route.js                                                                 //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n/*                                                                                                   // 1\n * Inspiration and some code for the compilation of routes comes from pagejs.                        // 2\n * The original has been modified to better handle hash fragments, and to store                      // 3\n * the regular expression on the Route instance. Also, the resolve method has                        // 4\n * been added to return a resolved path given a parameters object.                                   // 5\n */                                                                                                  // 6\n                                                                                                     // 7\nRoute = function (router, name, options) {                                                           // 8\n  var path;                                                                                          // 9\n                                                                                                     // 10\n  Utils.assert(                                                                                      // 11\n    router instanceof IronRouter,                                                                    // 12\n    \"Route constructor first parameter must be a Router\");                                           // 13\n                                                                                                     // 14\n  Utils.assert(                                                                                      // 15\n    _.isString(name),                                                                                // 16\n    \"Route constructor second parameter must be a String name\");                                     // 17\n                                                                                                     // 18\n  if (_.isFunction(options))                                                                         // 19\n    options = { handler: options };                                                                  // 20\n                                                                                                     // 21\n  options = this.options = options || {};                                                            // 22\n  path = options.path || ('/' + name);                                                               // 23\n                                                                                                     // 24\n  this.router = router;                                                                              // 25\n  this.originalPath = path;                                                                          // 26\n                                                                                                     // 27\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')                          // 28\n    this.originalPath = '/' + this.originalPath;                                                     // 29\n                                                                                                     // 30\n  this.name = name;                                                                                  // 31\n  this.where = options.where || 'client';                                                            // 32\n  this.controller = options.controller;                                                              // 33\n  this.action = options.action;                                                                      // 34\n                                                                                                     // 35\n  if (typeof options.reactive !== 'undefined')                                                       // 36\n    this.isReactive = options.reactive;                                                              // 37\n  else                                                                                               // 38\n    this.isReactive = true;                                                                          // 39\n                                                                                                     // 40\n  Utils.rewriteLegacyHooks(this.options);                                                            // 41\n                                                                                                     // 42\n  this.compile();                                                                                    // 43\n};                                                                                                   // 44\n                                                                                                     // 45\nRoute.prototype = {                                                                                  // 46\n  constructor: Route,                                                                                // 47\n                                                                                                     // 48\n  /**                                                                                                // 49\n   * Compile the path.                                                                               // 50\n   *                                                                                                 // 51\n   *  @return {Route}                                                                                // 52\n   *  @api public                                                                                    // 53\n   */                                                                                                // 54\n                                                                                                     // 55\n  compile: function () {                                                                             // 56\n    var self = this;                                                                                 // 57\n    var path;                                                                                        // 58\n    var options = self.options;                                                                      // 59\n                                                                                                     // 60\n    this.keys = [];                                                                                  // 61\n                                                                                                     // 62\n    if (self.originalPath instanceof RegExp) {                                                       // 63\n      self.re = self.originalPath;                                                                   // 64\n    } else {                                                                                         // 65\n      path = self.originalPath                                                                       // 66\n        .replace(/(.)\\/$/, '$1')                                                                     // 67\n        .concat(options.strict ? '' : '/?')                                                          // 68\n        .replace(/\\/\\(/g, '(?:/')                                                                    // 69\n        .replace(/#/, '/?#')                                                                         // 70\n        .replace(                                                                                    // 71\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                    // 72\n          function (match, slash, format, key, capture, optional){                                   // 73\n            self.keys.push({ name: key, optional: !! optional });                                    // 74\n            slash = slash || '';                                                                     // 75\n            return ''                                                                                // 76\n              + (optional ? '' : slash)                                                              // 77\n              + '(?:'                                                                                // 78\n              + (optional ? slash : '')                                                              // 79\n              + (format || '')                                                                       // 80\n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'                             // 81\n              + (optional || '');                                                                    // 82\n          }                                                                                          // 83\n        )                                                                                            // 84\n        .replace(/([\\/.])/g, '\\\\$1')                                                                 // 85\n        .replace(/\\*/g, '(.*)');                                                                     // 86\n                                                                                                     // 87\n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');                          // 88\n    }                                                                                                // 89\n                                                                                                     // 90\n    return this;                                                                                     // 91\n  },                                                                                                 // 92\n                                                                                                     // 93\n  /**                                                                                                // 94\n   * Returns an array of parameters given a path. The array may have named                           // 95\n   * properties in addition to indexed values.                                                       // 96\n   *                                                                                                 // 97\n   * @param {String} path                                                                            // 98\n   * @return {Array}                                                                                 // 99\n   * @api public                                                                                     // 100\n   */                                                                                                // 101\n                                                                                                     // 102\n  params: function (path) {                                                                          // 103\n    if (!path)                                                                                       // 104\n      return null;                                                                                   // 105\n                                                                                                     // 106\n    var params = [];                                                                                 // 107\n    var m = this.exec(path);                                                                         // 108\n    var queryString;                                                                                 // 109\n    var keys = this.keys;                                                                            // 110\n    var key;                                                                                         // 111\n    var value;                                                                                       // 112\n                                                                                                     // 113\n    if (!m)                                                                                          // 114\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"'); // 115\n                                                                                                     // 116\n    for (var i = 1, len = m.length; i < len; ++i) {                                                  // 117\n      key = keys[i - 1];                                                                             // 118\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];                             // 119\n      if (key) {                                                                                     // 120\n        params[key.name] = params[key.name] !== undefined ?                                          // 121\n          params[key.name] : value;                                                                  // 122\n      } else                                                                                         // 123\n        params.push(value);                                                                          // 124\n    }                                                                                                // 125\n                                                                                                     // 126\n    path = decodeURI(path);                                                                          // 127\n                                                                                                     // 128\n    queryString = path.split('?')[1];                                                                // 129\n    if (queryString)                                                                                 // 130\n      queryString = queryString.split('#')[0];                                                       // 131\n                                                                                                     // 132\n    params.hash = path.split('#')[1];                                                                // 133\n                                                                                                     // 134\n    if (queryString) {                                                                               // 135\n      _.each(queryString.split('&'), function (paramString) {                                        // 136\n        paramParts = paramString.split('=');                                                         // 137\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);                                   // 138\n      });                                                                                            // 139\n    }                                                                                                // 140\n                                                                                                     // 141\n    return params;                                                                                   // 142\n  },                                                                                                 // 143\n                                                                                                     // 144\n  normalizePath: function (path) {                                                                   // 145\n    var origin = Meteor.absoluteUrl();                                                               // 146\n                                                                                                     // 147\n    path = path.replace(origin, '');                                                                 // 148\n                                                                                                     // 149\n    var queryStringIndex = path.indexOf('?');                                                        // 150\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;                               // 151\n                                                                                                     // 152\n    var hashIndex = path.indexOf('#');                                                               // 153\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;                                             // 154\n                                                                                                     // 155\n    if (path.charAt(0) !== '/')                                                                      // 156\n      path = '/' + path;                                                                             // 157\n                                                                                                     // 158\n    return path;                                                                                     // 159\n  },                                                                                                 // 160\n                                                                                                     // 161\n  /**                                                                                                // 162\n   * Returns true if the path matches and false otherwise.                                           // 163\n   *                                                                                                 // 164\n   * @param {String} path                                                                            // 165\n   * @return {Boolean}                                                                               // 166\n   * @api public                                                                                     // 167\n   */                                                                                                // 168\n  test: function (path) {                                                                            // 169\n    return this.re.test(this.normalizePath(path));                                                   // 170\n  },                                                                                                 // 171\n                                                                                                     // 172\n  exec: function (path) {                                                                            // 173\n    return this.re.exec(this.normalizePath(path));                                                   // 174\n  },                                                                                                 // 175\n                                                                                                     // 176\n  resolve: function (params, options) {                                                              // 177\n    var value;                                                                                       // 178\n    var isValueDefined;                                                                              // 179\n    var result;                                                                                      // 180\n    var wildCardCount = 0;                                                                           // 181\n    var path = this.originalPath;                                                                    // 182\n    var hash;                                                                                        // 183\n    var query;                                                                                       // 184\n    var isMissingParams = false;                                                                     // 185\n                                                                                                     // 186\n    options = options || {};                                                                         // 187\n    params = params || [];                                                                           // 188\n    query = options.query;                                                                           // 189\n    hash = options.hash && options.hash.toString();                                                  // 190\n                                                                                                     // 191\n    if (path instanceof RegExp) {                                                                    // 192\n      throw new Error('Cannot currently resolve a regular expression path');                         // 193\n    } else {                                                                                         // 194\n      path = this.originalPath                                                                       // 195\n        .replace(                                                                                    // 196\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                    // 197\n          function (match, slash, format, key, capture, optional, offset) {                          // 198\n            slash = slash || '';                                                                     // 199\n            value = params[key];                                                                     // 200\n            isValueDefined = typeof value !== 'undefined';                                           // 201\n                                                                                                     // 202\n            if (optional && !isValueDefined) {                                                       // 203\n              value = '';                                                                            // 204\n            } else if (!isValueDefined) {                                                            // 205\n              isMissingParams = true;                                                                // 206\n              return;                                                                                // 207\n            }                                                                                        // 208\n                                                                                                     // 209\n            value = _.isFunction(value) ? value.call(params) : value;                                // 210\n            var escapedValue = _.map(String(value).split('/'), function (segment) {                  // 211\n              return encodeURIComponent(segment);                                                    // 212\n            }).join('/');                                                                            // 213\n            return slash + escapedValue                                                              // 214\n          }                                                                                          // 215\n        )                                                                                            // 216\n        .replace(                                                                                    // 217\n          /\\*/g,                                                                                     // 218\n          function (match) {                                                                         // 219\n            if (typeof params[wildCardCount] === 'undefined') {                                      // 220\n              throw new Error(                                                                       // 221\n                'You are trying to access a wild card parameter at index ' +                         // 222\n                wildCardCount +                                                                      // 223\n                ' but the value of params at that index is undefined');                              // 224\n            }                                                                                        // 225\n                                                                                                     // 226\n            var paramValue = String(params[wildCardCount++]);                                        // 227\n            return _.map(paramValue.split('/'), function (segment) {                                 // 228\n              return encodeURIComponent(segment);                                                    // 229\n            }).join('/');                                                                            // 230\n          }                                                                                          // 231\n        );                                                                                           // 232\n                                                                                                     // 233\n      if (_.isObject(query)) {                                                                       // 234\n        query = _.map(_.pairs(query), function (queryPart) {                                         // 235\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);                              // 236\n        }).join('&');                                                                                // 237\n      }                                                                                              // 238\n                                                                                                     // 239\n      if (query && query.length)                                                                     // 240\n        path = path + '?' + query;                                                                   // 241\n                                                                                                     // 242\n      if (hash) {                                                                                    // 243\n        hash = encodeURI(hash.replace('#', ''));                                                     // 244\n        path = query ?                                                                               // 245\n          path + '#' + hash : path + '/#' + hash;                                                    // 246\n      }                                                                                              // 247\n    }                                                                                                // 248\n                                                                                                     // 249\n    // Because of optional possibly empty segments we normalize path here                            // 250\n    path = path.replace(/\\/+/g, '/'); // Multiple / -> one /                                         // 251\n    path = path.replace(/^(.+)\\/$/g, '$1'); // Removal of trailing /                                 // 252\n                                                                                                     // 253\n    return isMissingParams ? null : path;                                                            // 254\n  },                                                                                                 // 255\n                                                                                                     // 256\n  path: function (params, options) {                                                                 // 257\n    return this.resolve(params, options);                                                            // 258\n  },                                                                                                 // 259\n                                                                                                     // 260\n  url: function (params, options) {                                                                  // 261\n    var path = this.path(params, options);                                                           // 262\n    if (path) {                                                                                      // 263\n      if (path.charAt(0) === '/')                                                                    // 264\n        path = path.slice(1, path.length);                                                           // 265\n      return Meteor.absoluteUrl() + path;                                                            // 266\n    } else {                                                                                         // 267\n      return null;                                                                                   // 268\n    }                                                                                                // 269\n  },                                                                                                 // 270\n                                                                                                     // 271\n  findController: function (path, options) {                                                         // 272\n    var self = this;                                                                                 // 273\n    var handler;                                                                                     // 274\n    var controllerClass;                                                                             // 275\n    var controller;                                                                                  // 276\n    var action;                                                                                      // 277\n    var routeName;                                                                                   // 278\n                                                                                                     // 279\n    var resolveValue = Utils.resolveValue;                                                           // 280\n    var toArray = Utils.toArray;                                                                     // 281\n                                                                                                     // 282\n    var resolveController = function (name) {                                                        // 283\n      var controller = resolveValue(name);                                                           // 284\n      if (typeof controller === 'undefined') {                                                       // 285\n        throw new Error(                                                                             // 286\n          'controller \"' + name + '\" is not defined');                                               // 287\n      }                                                                                              // 288\n                                                                                                     // 289\n      return controller;                                                                             // 290\n    };                                                                                               // 291\n                                                                                                     // 292\n    // controller option is a string specifying the name                                             // 293\n    // of a controller somewhere                                                                     // 294\n    if (_.isString(this.controller))                                                                 // 295\n      controller = resolveController(this.controller);                                               // 296\n    else if (_.isFunction(this.controller))                                                          // 297\n      controller = this.controller;                                                                  // 298\n    else if (this.name)                                                                              // 299\n      controller = resolveValue(Router.convertRouteControllerName(this.name + 'Controller'));        // 300\n                                                                                                     // 301\n    if (!controller)                                                                                 // 302\n      controller = RouteController;                                                                  // 303\n                                                                                                     // 304\n    return controller;                                                                               // 305\n  },                                                                                                 // 306\n                                                                                                     // 307\n  newController: function (path, options) {                                                          // 308\n    var C = this.findController(path, options);                                                      // 309\n                                                                                                     // 310\n    options = _.extend({}, options, {                                                                // 311\n      path: path,                                                                                    // 312\n      params: this.params(path),                                                                     // 313\n      where: this.where,                                                                             // 314\n      action: this.action                                                                            // 315\n    });                                                                                              // 316\n                                                                                                     // 317\n    return new C(this.router, this, options);                                                        // 318\n  },                                                                                                 // 319\n                                                                                                     // 320\n  getController: function (path, options) {                                                          // 321\n    return this.newController(path, options);                                                        // 322\n  }.deprecate({where: 'Route', name: 'getController', instead: 'newController'})                     // 323\n};                                                                                                   // 324\n                                                                                                     // 325\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/route_controller.js                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nRouteController = function (router, route, options) {                                                // 1\n  var self = this;                                                                                   // 2\n                                                                                                     // 3\n  if (!(router instanceof IronRouter))                                                               // 4\n    throw new Error('RouteController requires a router');                                            // 5\n                                                                                                     // 6\n  if (!(route instanceof Route))                                                                     // 7\n    throw new Error('RouteController requires a route');                                             // 8\n                                                                                                     // 9\n  options = this.options = options || {};                                                            // 10\n                                                                                                     // 11\n  this.router = router;                                                                              // 12\n  this.route = route;                                                                                // 13\n                                                                                                     // 14\n  this.path = options.path || '';                                                                    // 15\n  this.params = options.params || [];                                                                // 16\n  this.where = options.where || 'client';                                                            // 17\n  this.action = options.action || this.action;                                                       // 18\n                                                                                                     // 19\n  Utils.rewriteLegacyHooks(this.options);                                                            // 20\n  Utils.rewriteLegacyHooks(this);                                                                    // 21\n};                                                                                                   // 22\n                                                                                                     // 23\nRouteController.prototype = {                                                                        // 24\n  constructor: RouteController,                                                                      // 25\n                                                                                                     // 26\n  /**                                                                                                // 27\n   * Returns the value of a property, searching for the property in this lookup                      // 28\n   * order:                                                                                          // 29\n   *                                                                                                 // 30\n   *   1. RouteController options                                                                    // 31\n   *   2. RouteController prototype                                                                  // 32\n   *   3. Route options                                                                              // 33\n   *   4. Router options                                                                             // 34\n   */                                                                                                // 35\n  lookupProperty: function (key) {                                                                   // 36\n    var value;                                                                                       // 37\n                                                                                                     // 38\n    if (!_.isString(key))                                                                            // 39\n      throw new Error('key must be a string');                                                       // 40\n                                                                                                     // 41\n    // 1. RouteController options                                                                    // 42\n    if (typeof (value = this.options[key]) !== 'undefined')                                          // 43\n      return value;                                                                                  // 44\n                                                                                                     // 45\n    // 2. RouteController instance                                                                   // 46\n    if (typeof (value = this[key]) !== 'undefined')                                                  // 47\n      return value;                                                                                  // 48\n                                                                                                     // 49\n    var opts;                                                                                        // 50\n                                                                                                     // 51\n    // 3. Route options                                                                              // 52\n    opts = this.route.options;                                                                       // 53\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                          // 54\n      return value;                                                                                  // 55\n                                                                                                     // 56\n    // 4. Router options                                                                             // 57\n    opts = this.router.options;                                                                      // 58\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                          // 59\n      return value;                                                                                  // 60\n                                                                                                     // 61\n    // 5. Oops couldn't find property                                                                // 62\n    return undefined;                                                                                // 63\n  },                                                                                                 // 64\n                                                                                                     // 65\n  runHooks: function (hookName, more, cb) {                                                          // 66\n    var self = this;                                                                                 // 67\n    var ctor = this.constructor;                                                                     // 68\n                                                                                                     // 69\n    if (!_.isString(hookName))                                                                       // 70\n      throw new Error('hookName must be a string');                                                  // 71\n                                                                                                     // 72\n    if (more && !_.isArray(more))                                                                    // 73\n      throw new Error('more must be an array of functions');                                         // 74\n                                                                                                     // 75\n    var isPaused = false;                                                                            // 76\n                                                                                                     // 77\n    var lookupHook = function (nameOrFn) {                                                           // 78\n      var fn = nameOrFn;                                                                             // 79\n                                                                                                     // 80\n      // if we already have a func just return it                                                    // 81\n      if (_.isFunction(fn))                                                                          // 82\n        return fn;                                                                                   // 83\n                                                                                                     // 84\n      // look up one of the out-of-box hooks like                                                    // 85\n      // 'loaded or 'dataNotFound' if the nameOrFn is a                                              // 86\n      // string                                                                                      // 87\n      if (_.isString(fn)) {                                                                          // 88\n        if (_.isFunction(Router.hooks[fn]))                                                          // 89\n          return Router.hooks[fn];                                                                   // 90\n      }                                                                                              // 91\n                                                                                                     // 92\n      // we couldn't find it so throw an error                                                       // 93\n      throw new Error(\"No hook found named: \", nameOrFn);                                            // 94\n    };                                                                                               // 95\n                                                                                                     // 96\n    // concatenate together hook arrays from the inheritance                                         // 97\n    // heirarchy, starting at the top parent down to the child.                                      // 98\n    var collectInheritedHooks = function (ctor) {                                                    // 99\n      var hooks = [];                                                                                // 100\n                                                                                                     // 101\n      if (ctor.__super__)                                                                            // 102\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));                     // 103\n                                                                                                     // 104\n      return Utils.hasOwnProperty(ctor.prototype, hookName) ?                                        // 105\n        hooks.concat(ctor.prototype[hookName]) : hooks;                                              // 106\n    };                                                                                               // 107\n                                                                                                     // 108\n                                                                                                     // 109\n    // get a list of hooks to run in the following order:                                            // 110\n    // 1. RouteController option hooks                                                               // 111\n    // 2. RouteController proto hooks (including inherited super to child)                           // 112\n    // 3. RouteController object hooks                                                               // 113\n    // 4. Router global hooks                                                                        // 114\n    // 5. Route option hooks                                                                         // 115\n    // 6. more                                                                                       // 116\n                                                                                                     // 117\n    var toArray = Utils.toArray;                                                                     // 118\n    var routerHooks = this.router.getHooks(hookName, this.route.name);                               // 119\n                                                                                                     // 120\n    var opts;                                                                                        // 121\n    opts = this.route.options;                                                                       // 122\n    var routeOptionHooks = toArray(opts && opts[hookName]);                                          // 123\n                                                                                                     // 124\n    opts = this.options;                                                                             // 125\n    var optionHooks = toArray(opts && opts[hookName]);                                               // 126\n                                                                                                     // 127\n    var protoHooks = collectInheritedHooks(this.constructor);                                        // 128\n                                                                                                     // 129\n    var objectHooks;                                                                                 // 130\n    // don't accidentally grab the prototype hooks!                                                  // 131\n    // this makes sure the hook is on the object itself                                              // 132\n    // not on its constructor's prototype object.                                                    // 133\n    if (_.has(this, hookName))                                                                       // 134\n      objectHooks = toArray(this[hookName])                                                          // 135\n    else                                                                                             // 136\n      objectHooks = [];                                                                              // 137\n                                                                                                     // 138\n    var allHooks = optionHooks                                                                       // 139\n      .concat(protoHooks)                                                                            // 140\n      .concat(objectHooks)                                                                           // 141\n      .concat(routeOptionHooks)                                                                      // 142\n      .concat(routerHooks)                                                                           // 143\n      .concat(more);                                                                                 // 144\n                                                                                                     // 145\n    var isPaused = false;                                                                            // 146\n    var pauseFn = function () {                                                                      // 147\n      isPaused = true;                                                                               // 148\n    };                                                                                               // 149\n                                                                                                     // 150\n    for (var i = 0, hook; hook = allHooks[i]; i++) {                                                 // 151\n      var hookFn = lookupHook(hook);                                                                 // 152\n                                                                                                     // 153\n      if (!isPaused && !this.isStopped)                                                              // 154\n        hookFn.call(self, pauseFn, i);                                                               // 155\n    }                                                                                                // 156\n                                                                                                     // 157\n    cb && cb.call(self, isPaused);                                                                   // 158\n    return isPaused;                                                                                 // 159\n  },                                                                                                 // 160\n                                                                                                     // 161\n  action: function () {                                                                              // 162\n    throw new Error('not implemented');                                                              // 163\n  },                                                                                                 // 164\n                                                                                                     // 165\n  stop: function (cb) {                                                                              // 166\n    return this._stopController(cb);                                                                 // 167\n  },                                                                                                 // 168\n                                                                                                     // 169\n  _stopController: function (cb) {                                                                   // 170\n    var self = this;                                                                                 // 171\n                                                                                                     // 172\n    if (this.isStopped)                                                                              // 173\n      return;                                                                                        // 174\n                                                                                                     // 175\n    self.isRunning = false;                                                                          // 176\n    self.runHooks('onStop');                                                                         // 177\n    self.isStopped = true;                                                                           // 178\n    cb && cb.call(self);                                                                             // 179\n  },                                                                                                 // 180\n                                                                                                     // 181\n  _run: function () {                                                                                // 182\n    throw new Error('not implemented');                                                              // 183\n  }                                                                                                  // 184\n};                                                                                                   // 185\n                                                                                                     // 186\n_.extend(RouteController, {                                                                          // 187\n  /**                                                                                                // 188\n   * Inherit from RouteController                                                                    // 189\n   *                                                                                                 // 190\n   * @param {Object} definition Prototype properties for inherited class.                            // 191\n   */                                                                                                // 192\n                                                                                                     // 193\n  extend: function (definition) {                                                                    // 194\n    Utils.rewriteLegacyHooks(definition);                                                            // 195\n                                                                                                     // 196\n    return Utils.extend(this, definition, function (definition) {                                    // 197\n      var klass = this;                                                                              // 198\n                                                                                                     // 199\n                                                                                                     // 200\n      /*                                                                                             // 201\n        Allow calling a class method from javascript, directly in the subclass                       // 202\n        definition.                                                                                  // 203\n                                                                                                     // 204\n        Instead of this:                                                                             // 205\n          MyController = RouteController.extend({...});                                              // 206\n          MyController.before(function () {});                                                       // 207\n                                                                                                     // 208\n        You can do:                                                                                  // 209\n          MyController = RouteController.extend({                                                    // 210\n            before: function () {}                                                                   // 211\n          });                                                                                        // 212\n                                                                                                     // 213\n        And in Coffeescript you can do:                                                              // 214\n         MyController extends RouteController                                                        // 215\n           @before function () {}                                                                    // 216\n       */                                                                                            // 217\n    });                                                                                              // 218\n  }                                                                                                  // 219\n});                                                                                                  // 220\n                                                                                                     // 221\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/router.js                                                                //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nIronRouter = function (options) {                                                                    // 1\n  var self = this;                                                                                   // 2\n                                                                                                     // 3\n  this.configure(options);                                                                           // 4\n                                                                                                     // 5\n  /**                                                                                                // 6\n   * The routes array which doubles as a named route index by adding                                 // 7\n   * properties to the array.                                                                        // 8\n   *                                                                                                 // 9\n   * @api public                                                                                     // 10\n   */                                                                                                // 11\n  this.routes = [];                                                                                  // 12\n                                                                                                     // 13\n  /**                                                                                                // 14\n   * Default name conversions for controller                                                         // 15\n   * and template lookup.                                                                            // 16\n   */                                                                                                // 17\n  this._nameConverters = {};                                                                         // 18\n  this.setNameConverter('Template', 'none');                                                         // 19\n  this.setNameConverter('RouteController', 'upperCamelCase');                                        // 20\n                                                                                                     // 21\n  this._globalHooks = {};                                                                            // 22\n  _.each(IronRouter.HOOK_TYPES, function (type) {                                                    // 23\n    self._globalHooks[type] = [];                                                                    // 24\n                                                                                                     // 25\n    // example:                                                                                      // 26\n    //  self.onRun = function (hook, options) {                                                      // 27\n    //    return self.addHook('onRun', hook, options);                                               // 28\n    //  };                                                                                           // 29\n    self[type] = function (hook, options) {                                                          // 30\n      return self.addHook(type, hook, options);                                                      // 31\n    };                                                                                               // 32\n  });                                                                                                // 33\n                                                                                                     // 34\n  _.each(IronRouter.LEGACY_HOOK_TYPES, function (type, legacyType) {                                 // 35\n    self[legacyType] = function () {                                                                 // 36\n      Utils.notifyDeprecated({                                                                       // 37\n        where: 'Router',                                                                             // 38\n        name: legacyType,                                                                            // 39\n        instead: type                                                                                // 40\n      });                                                                                            // 41\n                                                                                                     // 42\n      return self[type].apply(this, arguments);                                                      // 43\n    }                                                                                                // 44\n  });                                                                                                // 45\n};                                                                                                   // 46\n                                                                                                     // 47\nIronRouter.HOOK_TYPES = [                                                                            // 48\n  'onRun',                                                                                           // 49\n  'onData',                                                                                          // 50\n  'onBeforeAction',                                                                                  // 51\n  'onAfterAction',                                                                                   // 52\n  'onStop',                                                                                          // 53\n                                                                                                     // 54\n  // not technically a hook but we'll use it                                                         // 55\n  // in a similar way. This will cause waitOn                                                        // 56\n  // to be added as a method to the Router and then                                                  // 57\n  // it can be selectively applied to specific routes                                                // 58\n  'waitOn'                                                                                           // 59\n];                                                                                                   // 60\n                                                                                                     // 61\nIronRouter.LEGACY_HOOK_TYPES = {                                                                     // 62\n  'load': 'onRun',                                                                                   // 63\n  'before': 'onBeforeAction',                                                                        // 64\n  'after': 'onAfterAction',                                                                          // 65\n  'unload': 'onStop'                                                                                 // 66\n};                                                                                                   // 67\n                                                                                                     // 68\nIronRouter.prototype = {                                                                             // 69\n  constructor: IronRouter,                                                                           // 70\n                                                                                                     // 71\n  /**                                                                                                // 72\n   * Configure instance with options. This can be called at any time. If the                         // 73\n   * instance options object hasn't been created yet it is created here.                             // 74\n   *                                                                                                 // 75\n   * @param {Object} options                                                                         // 76\n   * @return {IronRouter}                                                                            // 77\n   * @api public                                                                                     // 78\n   */                                                                                                // 79\n                                                                                                     // 80\n  configure: function (options) {                                                                    // 81\n    var self = this;                                                                                 // 82\n                                                                                                     // 83\n    options = options || {};                                                                         // 84\n    this.options = this.options || {};                                                               // 85\n    _.extend(this.options, options);                                                                 // 86\n                                                                                                     // 87\n    // e.g. before: fn OR before: [fn1, fn2]                                                         // 88\n    _.each(IronRouter.HOOK_TYPES, function(type) {                                                   // 89\n      if (self.options[type]) {                                                                      // 90\n        _.each(Utils.toArray(self.options[type]), function(hook) {                                   // 91\n          self.addHook(type, hook);                                                                  // 92\n        });                                                                                          // 93\n                                                                                                     // 94\n        delete self.options[type];                                                                   // 95\n      }                                                                                              // 96\n    });                                                                                              // 97\n                                                                                                     // 98\n    _.each(IronRouter.LEGACY_HOOK_TYPES, function(type, legacyType) {                                // 99\n      if (self.options[legacyType]) {                                                                // 100\n        // XXX: warning?                                                                             // 101\n        _.each(Utils.toArray(self.options[legacyType]), function(hook) {                             // 102\n          self.addHook(type, hook);                                                                  // 103\n        });                                                                                          // 104\n                                                                                                     // 105\n        delete self.options[legacyType];                                                             // 106\n      }                                                                                              // 107\n    });                                                                                              // 108\n                                                                                                     // 109\n    if (options.templateNameConverter)                                                               // 110\n      this.setNameConverter('Template', options.templateNameConverter);                              // 111\n                                                                                                     // 112\n    if (options.routeControllerNameConverter)                                                        // 113\n      this.setNameConverter('RouteController', options.routeControllerNameConverter);                // 114\n                                                                                                     // 115\n    return this;                                                                                     // 116\n  },                                                                                                 // 117\n                                                                                                     // 118\n  convertTemplateName: function (input) {                                                            // 119\n    var converter = this._nameConverters['Template'];                                                // 120\n    if (!converter)                                                                                  // 121\n      throw new Error('No name converter found for Template');                                       // 122\n    return converter(input);                                                                         // 123\n  },                                                                                                 // 124\n                                                                                                     // 125\n  convertRouteControllerName: function (input) {                                                     // 126\n    var converter = this._nameConverters['RouteController'];                                         // 127\n    if (!converter)                                                                                  // 128\n      throw new Error('No name converter found for RouteController');                                // 129\n    return converter(input);                                                                         // 130\n  },                                                                                                 // 131\n                                                                                                     // 132\n  setNameConverter: function (key, stringOrFunc) {                                                   // 133\n    var converter;                                                                                   // 134\n                                                                                                     // 135\n    if (_.isFunction(stringOrFunc))                                                                  // 136\n      converter = stringOrFunc;                                                                      // 137\n                                                                                                     // 138\n    if (_.isString(stringOrFunc))                                                                    // 139\n      converter = Utils.StringConverters[stringOrFunc];                                              // 140\n                                                                                                     // 141\n    if (!converter) {                                                                                // 142\n      throw new Error('No converter found named: ' + stringOrFunc);                                  // 143\n    }                                                                                                // 144\n                                                                                                     // 145\n    this._nameConverters[key] = converter;                                                           // 146\n    return this;                                                                                     // 147\n  },                                                                                                 // 148\n                                                                                                     // 149\n  /**                                                                                                // 150\n   *                                                                                                 // 151\n   * Add a hook to all routes. The hooks will apply to all routes,                                   // 152\n   * unless you name routes to include or exclude via `only` and `except` options                    // 153\n   *                                                                                                 // 154\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                             // 155\n   * @param {Object} [options] Options to controll the hooks [optional]                              // 156\n   * @param {Function} [hook] Callback to run                                                        // 157\n   * @return {IronRouter}                                                                            // 158\n   * @api public                                                                                     // 159\n   *                                                                                                 // 160\n   */                                                                                                // 161\n                                                                                                     // 162\n  addHook: function(type, hook, options) {                                                           // 163\n    options = options || {}                                                                          // 164\n                                                                                                     // 165\n    if (options.only)                                                                                // 166\n      options.only = Utils.toArray(options.only);                                                    // 167\n    if (options.except)                                                                              // 168\n      options.except = Utils.toArray(options.except);                                                // 169\n                                                                                                     // 170\n    this._globalHooks[type].push({options: options, hook: hook});                                    // 171\n                                                                                                     // 172\n    return this;                                                                                     // 173\n  },                                                                                                 // 174\n                                                                                                     // 175\n  /**                                                                                                // 176\n   *                                                                                                 // 177\n   * Fetch the list of global hooks that apply to the given route name.                              // 178\n   * Hooks are defined by the .addHook() function above.                                             // 179\n   *                                                                                                 // 180\n   * @param {String} [type] one of IronRouter.HOOK_TYPES                                             // 181\n   * @param {String} [name] the name of the route we are interested in                               // 182\n   * @return {[Function]} [hooks] an array of hooks to run                                           // 183\n   * @api public                                                                                     // 184\n   *                                                                                                 // 185\n   */                                                                                                // 186\n                                                                                                     // 187\n  getHooks: function(type, name) {                                                                   // 188\n    var hooks = [];                                                                                  // 189\n                                                                                                     // 190\n    _.each(this._globalHooks[type], function(hook) {                                                 // 191\n      var options = hook.options;                                                                    // 192\n                                                                                                     // 193\n      if (options.except && _.include(options.except, name))                                         // 194\n        return;                                                                                      // 195\n                                                                                                     // 196\n      if (options.only && ! _.include(options.only, name))                                           // 197\n        return;                                                                                      // 198\n                                                                                                     // 199\n      hooks.push(hook.hook);                                                                         // 200\n    });                                                                                              // 201\n                                                                                                     // 202\n    return hooks;                                                                                    // 203\n  },                                                                                                 // 204\n                                                                                                     // 205\n                                                                                                     // 206\n  /**                                                                                                // 207\n   * Convenience function to define a bunch of routes at once. In the future we                      // 208\n   * might call the callback with a custom dsl.                                                      // 209\n   *                                                                                                 // 210\n   * Example:                                                                                        // 211\n   *  Router.map(function () {                                                                       // 212\n   *    this.route('posts');                                                                         // 213\n   *  });                                                                                            // 214\n   *                                                                                                 // 215\n   *  @param {Function} cb                                                                           // 216\n   *  @return {IronRouter}                                                                           // 217\n   *  @api public                                                                                    // 218\n   */                                                                                                // 219\n                                                                                                     // 220\n  map: function (cb) {                                                                               // 221\n    Utils.assert(_.isFunction(cb),                                                                   // 222\n           'map requires a function as the first parameter');                                        // 223\n    cb.call(this);                                                                                   // 224\n    return this;                                                                                     // 225\n  },                                                                                                 // 226\n                                                                                                     // 227\n  /**                                                                                                // 228\n   * Define a new route. You must name the route, but as a second parameter you                      // 229\n   * can either provide an object of options or a Route instance.                                    // 230\n   *                                                                                                 // 231\n   * @param {String} name The name of the route                                                      // 232\n   * @param {Object} [options] Options to pass along to the route                                    // 233\n   * @return {Route}                                                                                 // 234\n   * @api public                                                                                     // 235\n   */                                                                                                // 236\n                                                                                                     // 237\n  route: function (name, options) {                                                                  // 238\n    var route;                                                                                       // 239\n                                                                                                     // 240\n    Utils.assert(_.isString(name), 'name is a required parameter');                                  // 241\n                                                                                                     // 242\n    if (options instanceof Route)                                                                    // 243\n      route = options;                                                                               // 244\n    else                                                                                             // 245\n      route = new Route(this, name, options);                                                        // 246\n                                                                                                     // 247\n    this.routes[name] = route;                                                                       // 248\n    this.routes.push(route);                                                                         // 249\n    return route;                                                                                    // 250\n  },                                                                                                 // 251\n                                                                                                     // 252\n  path: function (routeName, params, options) {                                                      // 253\n    var route = this.routes[routeName];                                                              // 254\n    Utils.warn(route,                                                                                // 255\n     'You called Router.path for a route named ' + routeName + ' but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.path(params, options);                                                     // 257\n  },                                                                                                 // 258\n                                                                                                     // 259\n  url: function (routeName, params, options) {                                                       // 260\n    var route = this.routes[routeName];                                                              // 261\n    Utils.warn(route,                                                                                // 262\n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.url(params, options);                                                      // 264\n  },                                                                                                 // 265\n                                                                                                     // 266\n  match: function (path) {                                                                           // 267\n    return _.find(this.routes, function(r) { return r.test(path); });                                // 268\n  },                                                                                                 // 269\n                                                                                                     // 270\n  dispatch: function (path, options, cb) {                                                           // 271\n    var route = this.match(path);                                                                    // 272\n                                                                                                     // 273\n    if (! route)                                                                                     // 274\n      return this.onRouteNotFound(path, options);                                                    // 275\n                                                                                                     // 276\n    if (route.where !== (Meteor.isClient ? 'client' : 'server'))                                     // 277\n      return this.onUnhandled(path, options);                                                        // 278\n                                                                                                     // 279\n    var controller = route.newController(path, options);                                             // 280\n    this.run(controller, cb);                                                                        // 281\n  },                                                                                                 // 282\n                                                                                                     // 283\n  run: function (controller, cb) {                                                                   // 284\n    var self = this;                                                                                 // 285\n    var where = Meteor.isClient ? 'client' : 'server';                                               // 286\n                                                                                                     // 287\n    Utils.assert(controller, 'run requires a controller');                                           // 288\n                                                                                                     // 289\n    // one last check to see if we should handle the route here                                      // 290\n    if (controller.where != where) {                                                                 // 291\n      self.onUnhandled(controller.path, controller.options);                                         // 292\n      return;                                                                                        // 293\n    }                                                                                                // 294\n                                                                                                     // 295\n    var run = function () {                                                                          // 296\n      self._currentController = controller;                                                          // 297\n      // set the location                                                                            // 298\n      cb && cb(controller);                                                                          // 299\n      self._currentController._run();                                                                // 300\n    };                                                                                               // 301\n                                                                                                     // 302\n    // if we already have a current controller let's stop it and then                                // 303\n    // run the new one once the old controller is stopped. this will add                             // 304\n    // the run function as an onInvalidate callback to the controller's                              // 305\n    // computation. Otherwse, just run the new controller.                                           // 306\n    if (this._currentController)                                                                     // 307\n      this._currentController._stopController(run);                                                  // 308\n    else                                                                                             // 309\n      run();                                                                                         // 310\n  },                                                                                                 // 311\n                                                                                                     // 312\n  onUnhandled: function (path, options) {                                                            // 313\n    throw new Error('onUnhandled not implemented');                                                  // 314\n  },                                                                                                 // 315\n                                                                                                     // 316\n  onRouteNotFound: function (path, options) {                                                        // 317\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');                               // 318\n  }                                                                                                  // 319\n};                                                                                                   // 320\n                                                                                                     // 321\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/server/route_controller.js                                               //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nRouteController = Utils.extend(RouteController, {                                                    // 1\n  constructor: function () {                                                                         // 2\n    RouteController.__super__.constructor.apply(this, arguments);                                    // 3\n    this.request = this.options.request;                                                             // 4\n    this.response = this.options.response;                                                           // 5\n    this.next = this.options.next;                                                                   // 6\n                                                                                                     // 7\n    this._dataValue = this.data || {};                                                               // 8\n                                                                                                     // 9\n    this.data = function (value) {                                                                   // 10\n      if (value)                                                                                     // 11\n        this._dataValue = value;                                                                     // 12\n      else                                                                                           // 13\n        return _.isFunction(this._dataValue) ? this._dataValue.call(this) : this._dataValue;         // 14\n    };                                                                                               // 15\n  },                                                                                                 // 16\n                                                                                                     // 17\n  _run: function () {                                                                                // 18\n    var self = this                                                                                  // 19\n      , args = _.toArray(arguments);                                                                 // 20\n                                                                                                     // 21\n    try {                                                                                            // 22\n      // if we're already running, you can't call run again without                                  // 23\n      // calling stop first.                                                                         // 24\n      if (self.isRunning)                                                                            // 25\n        throw new Error(\"You called _run without first calling stop\");                               // 26\n                                                                                                     // 27\n      self.isRunning = true;                                                                         // 28\n      self.isStopped = false;                                                                        // 29\n                                                                                                     // 30\n      var action = _.isFunction(self.action) ? self.action : self[self.action];                      // 31\n      Utils.assert(action,                                                                           // 32\n        \"You don't have an action named \\\"\" + self.action + \"\\\" defined on your RouteController\");   // 33\n                                                                                                     // 34\n      this.runHooks('onRun');                                                                        // 35\n      var isPaused = this.runHooks('onBeforeAction');                                                // 36\n                                                                                                     // 37\n      if (! isPaused) {                                                                              // 38\n        action.call(this);                                                                           // 39\n        this.runHooks('onAfterAction');                                                              // 40\n      }                                                                                              // 41\n    } catch (e) {                                                                                    // 42\n      console.error(e.toString());                                                                   // 43\n      this.response.end();                                                                           // 44\n    }                                                                                                // 45\n  },                                                                                                 // 46\n                                                                                                     // 47\n  action: function () {                                                                              // 48\n    this.response.end();                                                                             // 49\n  }                                                                                                  // 50\n});                                                                                                  // 51\n                                                                                                     // 52\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/server/router.js                                                         //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nvar connect = Npm.require('connect');                                                                // 1\nvar Fiber = Npm.require('fibers');                                                                   // 2\n                                                                                                     // 3\nvar root = global;                                                                                   // 4\n                                                                                                     // 5\nvar connectHandlers;                                                                                 // 6\nvar connect;                                                                                         // 7\n                                                                                                     // 8\nif (typeof __meteor_bootstrap__.app !== 'undefined') {                                               // 9\n  connectHandlers = __meteor_bootstrap__.app;                                                        // 10\n} else {                                                                                             // 11\n  connectHandlers = WebApp.connectHandlers;                                                          // 12\n}                                                                                                    // 13\n                                                                                                     // 14\nIronRouter = Utils.extend(IronRouter, {                                                              // 15\n  constructor: function (options) {                                                                  // 16\n    var self = this;                                                                                 // 17\n    IronRouter.__super__.constructor.apply(this, arguments);                                         // 18\n    Meteor.startup(function () {                                                                     // 19\n      setTimeout(function () {                                                                       // 20\n        if (self.options.autoStart !== false)                                                        // 21\n          self.start();                                                                              // 22\n      });                                                                                            // 23\n    });                                                                                              // 24\n  },                                                                                                 // 25\n                                                                                                     // 26\n  start: function () {                                                                               // 27\n    connectHandlers                                                                                  // 28\n      .use(connect.query())                                                                          // 29\n      .use(connect.bodyParser())                                                                     // 30\n      .use(_.bind(this.onRequest, this));                                                            // 31\n  },                                                                                                 // 32\n                                                                                                     // 33\n  onRequest: function (req, res, next) {                                                             // 34\n    var self = this;                                                                                 // 35\n    Fiber(function () {                                                                              // 36\n      self.dispatch(req.url, {                                                                       // 37\n        request: req,                                                                                // 38\n        response: res,                                                                               // 39\n        next: next                                                                                   // 40\n      });                                                                                            // 41\n    }).run();                                                                                        // 42\n  },                                                                                                 // 43\n                                                                                                     // 44\n  run: function (controller, cb) {                                                                   // 45\n    IronRouter.__super__.run.apply(this, arguments);                                                 // 46\n    if (controller === this._currentController)                                                      // 47\n      cb && cb(controller);                                                                          // 48\n  },                                                                                                 // 49\n                                                                                                     // 50\n  stop: function () {                                                                                // 51\n  },                                                                                                 // 52\n                                                                                                     // 53\n  onUnhandled: function (path, options) {                                                            // 54\n    options.next();                                                                                  // 55\n  },                                                                                                 // 56\n                                                                                                     // 57\n  onRouteNotFound: function (path, options) {                                                        // 58\n    options.next();                                                                                  // 59\n  }                                                                                                  // 60\n});                                                                                                  // 61\n                                                                                                     // 62\nRouter = new IronRouter;                                                                             // 63\n                                                                                                     // 64\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron:router/lib/version_conflict_error.js                                                //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nif (Package['cmather:iron-router']) {                                                                // 1\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                // 17\n}                                                                                                    // 18\n                                                                                                     // 19\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]