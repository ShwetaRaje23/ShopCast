[{"type":"js","data":"/* Imports for global scope */\n\nSession = Package.session.Session;\nMongo = Package.mongo.Mongo;\nRouteController = Package['iron:router'].RouteController;\nRoute = Package['iron:router'].Route;\nRouter = Package['iron:router'].Router;\nIronLocation = Package['iron:router'].IronLocation;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nAccounts = Package['accounts-base'].Accounts;\nAccountsClient = Package['accounts-base'].AccountsClient;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.__checkName(\"appBody\");\nTemplate[\"appBody\"] = new Template(\"Template.appBody\", (function() {\n  var view = this;\n  return HTML.DIV({\n    id: \"container\",\n    \"class\": function() {\n      return [ Spacebars.mustache(view.lookup(\"menuOpen\")), \" \", Spacebars.mustache(view.lookup(\"cordova\")) ];\n    }\n  }, \"\\n\\n    \", HTML.SECTION({\n    id: \"menu\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"btns-group-vertical\"\n    }, \"\\n          \", HTML.A({\n      href: \"#\",\n      \"class\": \"js-user-menu btn-secondary\"\n    }, \"\\n            \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userMenuOpen\"));\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"icon-arrow-up\"\n      }), \"\\n              \" ];\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"icon-arrow-down\"\n      }), \"\\n            \" ];\n    }), \"\\n            \", Blaze.View(\"lookup:emailLocalPart\", function() {\n      return Spacebars.mustache(view.lookup(\"emailLocalPart\"));\n    }), \"\\n          \"), \"\\n          \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userMenuOpen\"));\n    }, function() {\n      return [ \"\\n            \", HTML.A({\n        \"class\": \"js-logout btn-secondary\"\n      }, \"Logout\"), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"btns-group\"\n    }, \"\\n          \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), \"signin\");\n      },\n      \"class\": \"btn-secondary\"\n    }, \"Sign In\"), \"\\n          \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), \"join\");\n      },\n      \"class\": \"btn-secondary\"\n    }, \"Join\"), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n\\n      \", HTML.DIV({\n    \"class\": \"list-todos\"\n  }, \"\\n        \", HTML.Raw('<a class=\"js-new-list link-list-new\"><span class=\"icon-plus\"></span>New List</a>'), \"\\n\\n        \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"lists\"));\n  }, function() {\n    return [ \"\\n          \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), \"listsShow\");\n      },\n      \"class\": function() {\n        return [ \"list-todo \", Spacebars.mustache(view.lookup(\"activeListClass\")) ];\n      },\n      title: function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }\n    }, \"\\n            \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userId\"));\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"icon-lock\"\n      }), \"\\n            \" ];\n    }), \"\\n            \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"incompleteCount\"));\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"count-list\"\n      }, Blaze.View(\"lookup:incompleteCount\", function() {\n        return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n      })), \"\\n            \" ];\n    }), \"\\n            \", Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    }), \"\\n          \"), \"\\n        \" ];\n  }), \"\\n\\n      \"), \"\\n    \"), \"\\n\\n    \", Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"connected\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      \"class\": \"notifications\"\n    }, \"\\n        \", HTML.DIV({\n      \"class\": \"notification\"\n    }, \"\\n          \", HTML.SPAN({\n      \"class\": \"icon-sync\"\n    }), \"\\n          \", HTML.DIV({\n      \"class\": \"meta\"\n    }, \"\\n            \", HTML.DIV({\n      \"class\": \"title-notification\"\n    }, \"Trying to connect\"), \"\\n            \", HTML.DIV({\n      \"class\": \"description\"\n    }, \"There seems to be a connection issue\"), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n    \" ];\n  }), HTML.Raw('\\n\\n    <div class=\"content-overlay\"></div>\\n\\n    '), HTML.DIV({\n    id: \"content-container\"\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"thisArray\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"yield\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.app-body.js","sourceMap":{"version":3,"sources":["/client/templates/template.app-body.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/template.app-body.js","sourcesContent":["\nTemplate.__checkName(\"appBody\");\nTemplate[\"appBody\"] = new Template(\"Template.appBody\", (function() {\n  var view = this;\n  return HTML.DIV({\n    id: \"container\",\n    \"class\": function() {\n      return [ Spacebars.mustache(view.lookup(\"menuOpen\")), \" \", Spacebars.mustache(view.lookup(\"cordova\")) ];\n    }\n  }, \"\\n\\n    \", HTML.SECTION({\n    id: \"menu\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"btns-group-vertical\"\n    }, \"\\n          \", HTML.A({\n      href: \"#\",\n      \"class\": \"js-user-menu btn-secondary\"\n    }, \"\\n            \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userMenuOpen\"));\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"icon-arrow-up\"\n      }), \"\\n              \" ];\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"icon-arrow-down\"\n      }), \"\\n            \" ];\n    }), \"\\n            \", Blaze.View(\"lookup:emailLocalPart\", function() {\n      return Spacebars.mustache(view.lookup(\"emailLocalPart\"));\n    }), \"\\n          \"), \"\\n          \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userMenuOpen\"));\n    }, function() {\n      return [ \"\\n            \", HTML.A({\n        \"class\": \"js-logout btn-secondary\"\n      }, \"Logout\"), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"btns-group\"\n    }, \"\\n          \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), \"signin\");\n      },\n      \"class\": \"btn-secondary\"\n    }, \"Sign In\"), \"\\n          \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), \"join\");\n      },\n      \"class\": \"btn-secondary\"\n    }, \"Join\"), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n\\n      \", HTML.DIV({\n    \"class\": \"list-todos\"\n  }, \"\\n        \", HTML.Raw('<a class=\"js-new-list link-list-new\"><span class=\"icon-plus\"></span>New List</a>'), \"\\n\\n        \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"lists\"));\n  }, function() {\n    return [ \"\\n          \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"pathFor\"), \"listsShow\");\n      },\n      \"class\": function() {\n        return [ \"list-todo \", Spacebars.mustache(view.lookup(\"activeListClass\")) ];\n      },\n      title: function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }\n    }, \"\\n            \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userId\"));\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"icon-lock\"\n      }), \"\\n            \" ];\n    }), \"\\n            \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"incompleteCount\"));\n    }, function() {\n      return [ \"\\n              \", HTML.SPAN({\n        \"class\": \"count-list\"\n      }, Blaze.View(\"lookup:incompleteCount\", function() {\n        return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n      })), \"\\n            \" ];\n    }), \"\\n            \", Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    }), \"\\n          \"), \"\\n        \" ];\n  }), \"\\n\\n      \"), \"\\n    \"), \"\\n\\n    \", Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"connected\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      \"class\": \"notifications\"\n    }, \"\\n        \", HTML.DIV({\n      \"class\": \"notification\"\n    }, \"\\n          \", HTML.SPAN({\n      \"class\": \"icon-sync\"\n    }), \"\\n          \", HTML.DIV({\n      \"class\": \"meta\"\n    }, \"\\n            \", HTML.DIV({\n      \"class\": \"title-notification\"\n    }, \"Trying to connect\"), \"\\n            \", HTML.DIV({\n      \"class\": \"description\"\n    }, \"There seems to be a connection issue\"), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n    \" ];\n  }), HTML.Raw('\\n\\n    <div class=\"content-overlay\"></div>\\n\\n    '), HTML.DIV({\n    id: \"content-container\"\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"thisArray\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"yield\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n"]}},{"type":"js","data":"(function(){\nTemplate.__checkName(\"appNotFound\");\nTemplate[\"appNotFound\"] = new Template(\"Template.appNotFound\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"page not-found\">\\n    <nav>\\n      <div class=\"nav-group\">\\n        <a href=\"#\" class=\"js-menu nav-item\"><span class=\"icon-list-unordered\"></span></a>\\n      </div>\\n    </nav>\\n\\n    <div class=\"content-scrollable\">\\n      <div class=\"wrapper-message\">\\n        <div class=\"title-message\">Page not found</div>\\n      </div>\\n    </div>\\n  </div>');\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.app-not-found.js","sourceMap":{"version":3,"sources":["/client/templates/template.app-not-found.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/template.app-not-found.js","sourcesContent":["\nTemplate.__checkName(\"appNotFound\");\nTemplate[\"appNotFound\"] = new Template(\"Template.appNotFound\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"page not-found\">\\n    <nav>\\n      <div class=\"nav-group\">\\n        <a href=\"#\" class=\"js-menu nav-item\"><span class=\"icon-list-unordered\"></span></a>\\n      </div>\\n    </nav>\\n\\n    <div class=\"content-scrollable\">\\n      <div class=\"wrapper-message\">\\n        <div class=\"title-message\">Page not found</div>\\n      </div>\\n    </div>\\n  </div>');\n}));\n"]}},{"type":"js","data":"(function(){\nTemplate.__checkName(\"join\");\nTemplate[\"join\"] = new Template(\"Template.join\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"page auth\"\n  }, HTML.Raw('\\n    <nav>\\n      <div class=\"nav-group\">\\n        <a href=\"#\" class=\"js-menu nav-item\"><span class=\"icon-list-unordered\"></span></a>\\n      </div>\\n    </nav>\\n\\n    '), HTML.DIV({\n    \"class\": \"content-scrollable\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"wrapper-auth\"\n  }, \"\\n        \", HTML.Raw('<h1 class=\"title-auth\">Join.</h1>'), \"\\n        \", HTML.Raw('<p class=\"subtitle-auth\">Joining allows you to make private lists</p>'), \"\\n\\n        \", HTML.FORM(\"\\n          \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"errorMessages\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"list-errors\"\n    }, \"\\n              \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"errorMessages\"));\n    }, function() {\n      return [ \"\\n                \", HTML.DIV({\n        \"class\": \"list-item\"\n      }, Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      })), \"\\n              \" ];\n    }), \"\\n            \"), \"\\n          \" ];\n  }), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol  \", Spacebars.mustache(view.lookup(\"errorClass\"), \"email\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"email\" name=\"email\" placeholder=\"Your Email\">'), \"\\n            \", HTML.Raw('<span class=\"icon-email\" title=\"Your Email\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol  \", Spacebars.mustache(view.lookup(\"errorClass\"), \"password\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"password\" name=\"password\" placeholder=\"Password\">'), \"\\n            \", HTML.Raw('<span class=\"icon-lock\" title=\"Password\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol \", Spacebars.mustache(view.lookup(\"errorClass\"), \"confirm\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"password\" name=\"confirm\" placeholder=\"Confirm Password\">'), \"\\n            \", HTML.Raw('<span class=\"icon-lock\" title=\"Confirm Password\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.Raw('<button type=\"submit\" class=\"btn-primary\">Join Now</button>'), \"\\n        \"), \"\\n      \"), \"\\n\\n      \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"signin\");\n    },\n    \"class\": \"link-auth-alt\"\n  }, \"Have an account? Sign in\"), \"\\n    \"), \"\\n  \");\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.auth-join.js","sourceMap":{"version":3,"sources":["/client/templates/template.auth-join.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/template.auth-join.js","sourcesContent":["\nTemplate.__checkName(\"join\");\nTemplate[\"join\"] = new Template(\"Template.join\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"page auth\"\n  }, HTML.Raw('\\n    <nav>\\n      <div class=\"nav-group\">\\n        <a href=\"#\" class=\"js-menu nav-item\"><span class=\"icon-list-unordered\"></span></a>\\n      </div>\\n    </nav>\\n\\n    '), HTML.DIV({\n    \"class\": \"content-scrollable\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"wrapper-auth\"\n  }, \"\\n        \", HTML.Raw('<h1 class=\"title-auth\">Join.</h1>'), \"\\n        \", HTML.Raw('<p class=\"subtitle-auth\">Joining allows you to make private lists</p>'), \"\\n\\n        \", HTML.FORM(\"\\n          \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"errorMessages\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"list-errors\"\n    }, \"\\n              \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"errorMessages\"));\n    }, function() {\n      return [ \"\\n                \", HTML.DIV({\n        \"class\": \"list-item\"\n      }, Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      })), \"\\n              \" ];\n    }), \"\\n            \"), \"\\n          \" ];\n  }), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol  \", Spacebars.mustache(view.lookup(\"errorClass\"), \"email\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"email\" name=\"email\" placeholder=\"Your Email\">'), \"\\n            \", HTML.Raw('<span class=\"icon-email\" title=\"Your Email\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol  \", Spacebars.mustache(view.lookup(\"errorClass\"), \"password\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"password\" name=\"password\" placeholder=\"Password\">'), \"\\n            \", HTML.Raw('<span class=\"icon-lock\" title=\"Password\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol \", Spacebars.mustache(view.lookup(\"errorClass\"), \"confirm\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"password\" name=\"confirm\" placeholder=\"Confirm Password\">'), \"\\n            \", HTML.Raw('<span class=\"icon-lock\" title=\"Confirm Password\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.Raw('<button type=\"submit\" class=\"btn-primary\">Join Now</button>'), \"\\n        \"), \"\\n      \"), \"\\n\\n      \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"signin\");\n    },\n    \"class\": \"link-auth-alt\"\n  }, \"Have an account? Sign in\"), \"\\n    \"), \"\\n  \");\n}));\n"]}},{"type":"js","data":"(function(){\nTemplate.__checkName(\"signin\");\nTemplate[\"signin\"] = new Template(\"Template.signin\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"page auth\"\n  }, HTML.Raw('\\n    <nav>\\n      <div class=\"nav-group\">\\n        <a href=\"#\" class=\"js-menu nav-item\"><span class=\"icon-list-unordered\"></span></a>\\n      </div>\\n    </nav>\\n\\n    '), HTML.DIV({\n    \"class\": \"content-scrollable\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"wrapper-auth\"\n  }, \"\\n        \", HTML.Raw('<h1 class=\"title-auth\">Sign In.</h1>'), \"\\n        \", HTML.Raw('<p class=\"subtitle-auth\">Signing in allows you to view private lists</p>'), \"\\n\\n        \", HTML.FORM(\"\\n          \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"errorMessages\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"list-errors\"\n    }, \"\\n              \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"errorMessages\"));\n    }, function() {\n      return [ \"\\n                \", HTML.DIV({\n        \"class\": \"list-item\"\n      }, Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      })), \"\\n              \" ];\n    }), \"\\n            \"), \"\\n          \" ];\n  }), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol \", Spacebars.mustache(view.lookup(\"errorClass\"), \"email\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"email\" name=\"email\" placeholder=\"Your Email\">'), \"\\n            \", HTML.Raw('<span class=\"icon-email\" title=\"Your Email\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol \", Spacebars.mustache(view.lookup(\"errorClass\"), \"password\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"password\" name=\"password\" placeholder=\"Password\">'), \"\\n            \", HTML.Raw('<span class=\"icon-lock\" title=\"Password\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.Raw('<button type=\"submit\" class=\"btn-primary\">Sign in</button>'), \"\\n        \"), \"\\n      \"), \"\\n\\n      \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"join\");\n    },\n    \"class\": \"link-auth-alt\"\n  }, \"Need an account? Join Now.\"), \"\\n    \"), \"\\n  \");\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.auth-signin.js","sourceMap":{"version":3,"sources":["/client/templates/template.auth-signin.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/template.auth-signin.js","sourcesContent":["\nTemplate.__checkName(\"signin\");\nTemplate[\"signin\"] = new Template(\"Template.signin\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"page auth\"\n  }, HTML.Raw('\\n    <nav>\\n      <div class=\"nav-group\">\\n        <a href=\"#\" class=\"js-menu nav-item\"><span class=\"icon-list-unordered\"></span></a>\\n      </div>\\n    </nav>\\n\\n    '), HTML.DIV({\n    \"class\": \"content-scrollable\"\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"wrapper-auth\"\n  }, \"\\n        \", HTML.Raw('<h1 class=\"title-auth\">Sign In.</h1>'), \"\\n        \", HTML.Raw('<p class=\"subtitle-auth\">Signing in allows you to view private lists</p>'), \"\\n\\n        \", HTML.FORM(\"\\n          \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"errorMessages\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"list-errors\"\n    }, \"\\n              \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"errorMessages\"));\n    }, function() {\n      return [ \"\\n                \", HTML.DIV({\n        \"class\": \"list-item\"\n      }, Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      })), \"\\n              \" ];\n    }), \"\\n            \"), \"\\n          \" ];\n  }), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol \", Spacebars.mustache(view.lookup(\"errorClass\"), \"email\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"email\" name=\"email\" placeholder=\"Your Email\">'), \"\\n            \", HTML.Raw('<span class=\"icon-email\" title=\"Your Email\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.DIV({\n    \"class\": function() {\n      return [ \"input-symbol \", Spacebars.mustache(view.lookup(\"errorClass\"), \"password\") ];\n    }\n  }, \"\\n            \", HTML.Raw('<input type=\"password\" name=\"password\" placeholder=\"Password\">'), \"\\n            \", HTML.Raw('<span class=\"icon-lock\" title=\"Password\"></span>'), \"\\n          \"), \"\\n\\n          \", HTML.Raw('<button type=\"submit\" class=\"btn-primary\">Sign in</button>'), \"\\n        \"), \"\\n      \"), \"\\n\\n      \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"join\");\n    },\n    \"class\": \"link-auth-alt\"\n  }, \"Need an account? Join Now.\"), \"\\n    \"), \"\\n  \");\n}));\n"]}},{"type":"js","data":"(function(){\nTemplate.__checkName(\"listsShow\");\nTemplate[\"listsShow\"] = new Template(\"Template.listsShow\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"page lists-show\"\n  }, \"\\n    \", HTML.NAV({\n    \"class\": \"js-title-nav\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"editing\"));\n  }, function() {\n    return [ \"\\n        \", HTML.FORM({\n      \"class\": \"js-edit-form list-edit-form\"\n    }, \"\\n          \", HTML.INPUT({\n      type: \"text\",\n      name: \"name\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }\n    }), \"\\n          \", HTML.DIV({\n      \"class\": \"nav-group right\"\n    }, \"\\n            \", HTML.A({\n      href: \"#\",\n      \"class\": \"js-cancel nav-item\"\n    }, HTML.SPAN({\n      \"class\": \"icon-close js-cancel\",\n      title: \"Cancel\"\n    })), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"nav-group\"\n    }, \"\\n          \", HTML.A({\n      href: \"#\",\n      \"class\": \"js-menu nav-item\"\n    }, HTML.SPAN({\n      \"class\": \"icon-list-unordered\",\n      title: \"Show menu\"\n    })), \"\\n        \"), \"\\n\\n        \", HTML.H1({\n      \"class\": \"js-edit-list title-page\"\n    }, HTML.SPAN({\n      \"class\": \"title-wrapper\"\n    }, Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    })), \" \", HTML.SPAN({\n      \"class\": \"count-list\"\n    }, Blaze.View(\"lookup:incompleteCount\", function() {\n      return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n    }))), \"\\n\\n        \", HTML.DIV({\n      \"class\": \"nav-group right\"\n    }, \"\\n          \", HTML.DIV({\n      \"class\": \"nav-item options-mobile\"\n    }, \"\\n            \", HTML.SELECT({\n      \"class\": \"list-edit\"\n    }, \"\\n              \", HTML.OPTION({\n      disabled: \"\",\n      selected: \"\"\n    }, \"Select an action\"), \"\\n              \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userId\"));\n    }, function() {\n      return [ \"\\n                \", HTML.OPTION({\n        value: \"public\"\n      }, \"Make Public\"), \"\\n              \" ];\n    }, function() {\n      return [ \"\\n                \", HTML.OPTION({\n        value: \"private\"\n      }, \"Make Private\"), \"\\n              \" ];\n    }), \"\\n              \", HTML.OPTION({\n      value: \"delete\"\n    }, \"Delete\"), \"\\n            \"), \"\\n            \", HTML.SPAN({\n      \"class\": \"icon-cog\"\n    }), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"options-web\"\n    }, \"\\n            \", HTML.A({\n      \"class\": \"js-toggle-list-privacy nav-item\"\n    }, \"\\n              \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userId\"));\n    }, function() {\n      return [ \"\\n                \", HTML.SPAN({\n        \"class\": \"icon-lock\",\n        title: \"Make list public\"\n      }), \"\\n              \" ];\n    }, function() {\n      return [ \"\\n                \", HTML.SPAN({\n        \"class\": \"icon-unlock\",\n        title: \"Make list private\"\n      }), \"\\n              \" ];\n    }), \"\\n            \"), \"\\n\\n            \", HTML.A({\n      \"class\": \"js-delete-list nav-item\"\n    }, \"\\n              \", HTML.SPAN({\n      \"class\": \"icon-trash\",\n      title: \"Delete list\"\n    }), \"\\n            \"), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n\\n      \", HTML.Raw('<form class=\"js-todo-new todo-new input-symbol\">\\n        <input type=\"text\" placeholder=\"Type to add new tasks\">\\n        <span class=\"icon-add js-todo-add\"></span>\\n      </form>'), \"\\n    \"), \"\\n\\n\\n    \", HTML.DIV({\n    \"class\": \"content-scrollable list-items\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"todosReady\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"_id\"));\n    }, function() {\n      return [ \" \\n          \", Blaze.Each(function() {\n        return Spacebars.dataMustache(view.lookup(\"todos\"), view.lookup(\".\"));\n      }, function() {\n        return [ \"\\n            \", Spacebars.include(view.lookupTemplate(\"todosItem\")), \"\\n          \" ];\n      }, function() {\n        return [ \"\\n            \", HTML.DIV({\n          \"class\": \"wrapper-message\"\n        }, \"\\n              \", HTML.DIV({\n          \"class\": \"title-message\"\n        }, \"No tasks here\"), \"\\n              \", HTML.DIV({\n          \"class\": \"subtitle-message\"\n        }, \"Add new tasks using the field above\"), \"\\n            \"), \"\\n          \" ];\n      }), \"\\n        \" ];\n    }), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n          \", HTML.DIV({\n      \"class\": \"wrapper-message\"\n    }, \"\\n            \", HTML.DIV({\n      \"class\": \"title-message\"\n    }, \"Loading tasks...\"), \"\\n          \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.lists-show.js","sourceMap":{"version":3,"sources":["/client/templates/template.lists-show.js"],"names":[],"mappingsfile":"/client/templates/template.lists-show.js","sourcesContent":["\nTemplate.__checkName(\"listsShow\");\nTemplate[\"listsShow\"] = new Template(\"Template.listsShow\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"page lists-show\"\n  }, \"\\n    \", HTML.NAV({\n    \"class\": \"js-title-nav\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"editing\"));\n  }, function() {\n    return [ \"\\n        \", HTML.FORM({\n      \"class\": \"js-edit-form list-edit-form\"\n    }, \"\\n          \", HTML.INPUT({\n      type: \"text\",\n      name: \"name\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }\n    }), \"\\n          \", HTML.DIV({\n      \"class\": \"nav-group right\"\n    }, \"\\n            \", HTML.A({\n      href: \"#\",\n      \"class\": \"js-cancel nav-item\"\n    }, HTML.SPAN({\n      \"class\": \"icon-close js-cancel\",\n      title: \"Cancel\"\n    })), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"nav-group\"\n    }, \"\\n          \", HTML.A({\n      href: \"#\",\n      \"class\": \"js-menu nav-item\"\n    }, HTML.SPAN({\n      \"class\": \"icon-list-unordered\",\n      title: \"Show menu\"\n    })), \"\\n        \"), \"\\n\\n        \", HTML.H1({\n      \"class\": \"js-edit-list title-page\"\n    }, HTML.SPAN({\n      \"class\": \"title-wrapper\"\n    }, Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    })), \" \", HTML.SPAN({\n      \"class\": \"count-list\"\n    }, Blaze.View(\"lookup:incompleteCount\", function() {\n      return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n    }))), \"\\n\\n        \", HTML.DIV({\n      \"class\": \"nav-group right\"\n    }, \"\\n          \", HTML.DIV({\n      \"class\": \"nav-item options-mobile\"\n    }, \"\\n            \", HTML.SELECT({\n      \"class\": \"list-edit\"\n    }, \"\\n              \", HTML.OPTION({\n      disabled: \"\",\n      selected: \"\"\n    }, \"Select an action\"), \"\\n              \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userId\"));\n    }, function() {\n      return [ \"\\n                \", HTML.OPTION({\n        value: \"public\"\n      }, \"Make Public\"), \"\\n              \" ];\n    }, function() {\n      return [ \"\\n                \", HTML.OPTION({\n        value: \"private\"\n      }, \"Make Private\"), \"\\n              \" ];\n    }), \"\\n              \", HTML.OPTION({\n      value: \"delete\"\n    }, \"Delete\"), \"\\n            \"), \"\\n            \", HTML.SPAN({\n      \"class\": \"icon-cog\"\n    }), \"\\n          \"), \"\\n          \", HTML.DIV({\n      \"class\": \"options-web\"\n    }, \"\\n            \", HTML.A({\n      \"class\": \"js-toggle-list-privacy nav-item\"\n    }, \"\\n              \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"userId\"));\n    }, function() {\n      return [ \"\\n                \", HTML.SPAN({\n        \"class\": \"icon-lock\",\n        title: \"Make list public\"\n      }), \"\\n              \" ];\n    }, function() {\n      return [ \"\\n                \", HTML.SPAN({\n        \"class\": \"icon-unlock\",\n        title: \"Make list private\"\n      }), \"\\n              \" ];\n    }), \"\\n            \"), \"\\n\\n            \", HTML.A({\n      \"class\": \"js-delete-list nav-item\"\n    }, \"\\n              \", HTML.SPAN({\n      \"class\": \"icon-trash\",\n      title: \"Delete list\"\n    }), \"\\n            \"), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n\\n      \", HTML.Raw('<form class=\"js-todo-new todo-new input-symbol\">\\n        <input type=\"text\" placeholder=\"Type to add new tasks\">\\n        <span class=\"icon-add js-todo-add\"></span>\\n      </form>'), \"\\n    \"), \"\\n\\n\\n    \", HTML.DIV({\n    \"class\": \"content-scrollable list-items\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"todosReady\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"_id\"));\n    }, function() {\n      return [ \" \\n          \", Blaze.Each(function() {\n        return Spacebars.dataMustache(view.lookup(\"todos\"), view.lookup(\".\"));\n      }, function() {\n        return [ \"\\n            \", Spacebars.include(view.lookupTemplate(\"todosItem\")), \"\\n          \" ];\n      }, function() {\n        return [ \"\\n            \", HTML.DIV({\n          \"class\": \"wrapper-message\"\n        }, \"\\n              \", HTML.DIV({\n          \"class\": \"title-message\"\n        }, \"No tasks here\"), \"\\n              \", HTML.DIV({\n          \"class\": \"subtitle-message\"\n        }, \"Add new tasks using the field above\"), \"\\n            \"), \"\\n          \" ];\n      }), \"\\n        \" ];\n    }), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n          \", HTML.DIV({\n      \"class\": \"wrapper-message\"\n    }, \"\\n            \", HTML.DIV({\n      \"class\": \"title-message\"\n    }, \"Loading tasks...\"), \"\\n          \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n"]}},{"type":"js","data":"(function(){\nTemplate.__checkName(\"appLoading\");\nTemplate[\"appLoading\"] = new Template(\"Template.appLoading\", (function() {\n  var view = this;\n  return HTML.Raw('<img src=\"/img/logo-todos.svg\" class=\"loading-app\">');\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.loading.js","sourceMap":{"version":3,"sources":["/client/templates/template.loading.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/template.loading.js","sourcesContent":["\nTemplate.__checkName(\"appLoading\");\nTemplate[\"appLoading\"] = new Template(\"Template.appLoading\", (function() {\n  var view = this;\n  return HTML.Raw('<img src=\"/img/logo-todos.svg\" class=\"loading-app\">');\n}));\n"]}},{"type":"js","data":"(function(){\nTemplate.__checkName(\"todosItem\");\nTemplate[\"todosItem\"] = new Template(\"Template.todosItem\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"list-item \", Spacebars.mustache(view.lookup(\"checkedClass\")), \" \", Spacebars.mustache(view.lookup(\"editingClass\")) ];\n    }\n  }, \"\\n    \", HTML.LABEL({\n    \"class\": \"checkbox\"\n  }, \"\\n      \", HTML.INPUT({\n    type: \"checkbox\",\n    checked: function() {\n      return Spacebars.mustache(view.lookup(\"checked\"));\n    },\n    name: \"checked\"\n  }), \"\\n      \", HTML.Raw('<span class=\"checkbox-custom\"></span>'), \"\\n    \"), \"\\n\\n    \", HTML.INPUT({\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"text\"));\n    },\n    placeholder: \"Task name\"\n  }), HTML.Raw('\\n    <a class=\"js-delete-item delete-item\" href=\"#\"><span class=\"icon-trash\"></span></a>\\n  '));\n}));\n\n}).call(this);\n","servePath":"/client/templates/template.todos-item.js","sourceMap":{"version":3,"sources":["/client/templates/template.todos-item.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/template.todos-item.js","sourcesContent":["\nTemplate.__checkName(\"todosItem\");\nTemplate[\"todosItem\"] = new Template(\"Template.todosItem\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"list-item \", Spacebars.mustache(view.lookup(\"checkedClass\")), \" \", Spacebars.mustache(view.lookup(\"editingClass\")) ];\n    }\n  }, \"\\n    \", HTML.LABEL({\n    \"class\": \"checkbox\"\n  }, \"\\n      \", HTML.INPUT({\n    type: \"checkbox\",\n    checked: function() {\n      return Spacebars.mustache(view.lookup(\"checked\"));\n    },\n    name: \"checked\"\n  }), \"\\n      \", HTML.Raw('<span class=\"checkbox-custom\"></span>'), \"\\n    \"), \"\\n\\n    \", HTML.INPUT({\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"text\"));\n    },\n    placeholder: \"Task name\"\n  }), HTML.Raw('\\n    <a class=\"js-delete-item delete-item\" href=\"#\"><span class=\"icon-trash\"></span></a>\\n  '));\n}));\n"]}},{"type":"js","data":"(function(){/**\n * jQuery Plugin to obtain touch gestures from iPhone, iPod Touch and iPad, should also work with Android mobile phones (not tested yet!)\n * Common usage: wipe images (left and right to show the previous or next image)\n * \n * @author Andreas Waltl, netCU Internetagentur (http://www.netcu.de)\n * @version 1.1.1 (9th December 2010) - fix bug (older IE's had problems)\n * @version 1.1 (1st September 2010) - support wipe up and wipe down\n * @version 1.0 (15th July 2010)\n */\n(function($) { \n   $.fn.touchwipe = function(settings) {\n     var config = {\n    \t\tmin_move_x: 20,\n    \t\tmin_move_y: 20,\n \t\t\twipeLeft: function() { },\n \t\t\twipeRight: function() { },\n \t\t\twipeUp: function() { },\n \t\t\twipeDown: function() { },\n\t\t\tpreventDefaultEvents: true\n\t };\n     \n     if (settings) $.extend(config, settings);\n \n     this.each(function() {\n    \t var startX;\n    \t var startY;\n\t\t var isMoving = false;\n\n    \t function cancelTouch() {\n    \t\t this.removeEventListener('touchmove', onTouchMove);\n    \t\t startX = null;\n    \t\t isMoving = false;\n    \t }\t\n    \t \n    \t function onTouchMove(e) {\n    \t\t if(config.preventDefaultEvents) {\n    \t\t\t e.preventDefault();\n    \t\t }\n    \t\t if(isMoving) {\n\t    \t\t var x = e.touches[0].pageX;\n\t    \t\t var y = e.touches[0].pageY;\n\t    \t\t var dx = startX - x;\n\t    \t\t var dy = startY - y;\n\t    \t\t if(Math.abs(dx) >= config.min_move_x) {\n\t    \t\t\tcancelTouch();\n\t    \t\t\tif(dx > 0) {\n\t    \t\t\t\tconfig.wipeLeft();\n\t    \t\t\t}\n\t    \t\t\telse {\n\t    \t\t\t\tconfig.wipeRight();\n\t    \t\t\t}\n\t    \t\t }\n\t    \t\t else if(Math.abs(dy) >= config.min_move_y) {\n\t\t    \t\t\tcancelTouch();\n\t\t    \t\t\tif(dy > 0) {\n\t\t    \t\t\t\tconfig.wipeDown();\n\t\t    \t\t\t}\n\t\t    \t\t\telse {\n\t\t    \t\t\t\tconfig.wipeUp();\n\t\t    \t\t\t}\n\t\t    \t\t }\n    \t\t }\n    \t }\n    \t \n    \t function onTouchStart(e)\n    \t {\n    \t\t if (e.touches.length == 1) {\n    \t\t\t startX = e.touches[0].pageX;\n    \t\t\t startY = e.touches[0].pageY;\n    \t\t\t isMoving = true;\n    \t\t\t this.addEventListener('touchmove', onTouchMove, false);\n    \t\t }\n    \t }    \t \n    \t if ('ontouchstart' in document.documentElement) {\n    \t\t this.addEventListener('touchstart', onTouchStart, false);\n    \t }\n     });\n \n     return this;\n   };\n \n })(jQuery);\n\n}).call(this);\n","servePath":"/client/lib/jquery.touchwipe.js","sourceMap":{"version":3,"sources":["/client/lib/jquery.touchwipe.js"],"names":[],"mappings":"eAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/lib/jquery.touchwipe.js","sourcesContent":["/**\n * jQuery Plugin to obtain touch gestures from iPhone, iPod Touch and iPad, should also work with Android mobile phones (not tested yet!)\n * Common usage: wipe images (left and right to show the previous or next image)\n * \n * @author Andreas Waltl, netCU Internetagentur (http://www.netcu.de)\n * @version 1.1.1 (9th December 2010) - fix bug (older IE's had problems)\n * @version 1.1 (1st September 2010) - support wipe up and wipe down\n * @version 1.0 (15th July 2010)\n */\n(function($) { \n   $.fn.touchwipe = function(settings) {\n     var config = {\n    \t\tmin_move_x: 20,\n    \t\tmin_move_y: 20,\n \t\t\twipeLeft: function() { },\n \t\t\twipeRight: function() { },\n \t\t\twipeUp: function() { },\n \t\t\twipeDown: function() { },\n\t\t\tpreventDefaultEvents: true\n\t };\n     \n     if (settings) $.extend(config, settings);\n \n     this.each(function() {\n    \t var startX;\n    \t var startY;\n\t\t var isMoving = false;\n\n    \t function cancelTouch() {\n    \t\t this.removeEventListener('touchmove', onTouchMove);\n    \t\t startX = null;\n    \t\t isMoving = false;\n    \t }\t\n    \t \n    \t function onTouchMove(e) {\n    \t\t if(config.preventDefaultEvents) {\n    \t\t\t e.preventDefault();\n    \t\t }\n    \t\t if(isMoving) {\n\t    \t\t var x = e.touches[0].pageX;\n\t    \t\t var y = e.touches[0].pageY;\n\t    \t\t var dx = startX - x;\n\t    \t\t var dy = startY - y;\n\t    \t\t if(Math.abs(dx) >= config.min_move_x) {\n\t    \t\t\tcancelTouch();\n\t    \t\t\tif(dx > 0) {\n\t    \t\t\t\tconfig.wipeLeft();\n\t    \t\t\t}\n\t    \t\t\telse {\n\t    \t\t\t\tconfig.wipeRight();\n\t    \t\t\t}\n\t    \t\t }\n\t    \t\t else if(Math.abs(dy) >= config.min_move_y) {\n\t\t    \t\t\tcancelTouch();\n\t\t    \t\t\tif(dy > 0) {\n\t\t    \t\t\t\tconfig.wipeDown();\n\t\t    \t\t\t}\n\t\t    \t\t\telse {\n\t\t    \t\t\t\tconfig.wipeUp();\n\t\t    \t\t\t}\n\t\t    \t\t }\n    \t\t }\n    \t }\n    \t \n    \t function onTouchStart(e)\n    \t {\n    \t\t if (e.touches.length == 1) {\n    \t\t\t startX = e.touches[0].pageX;\n    \t\t\t startY = e.touches[0].pageY;\n    \t\t\t isMoving = true;\n    \t\t\t this.addEventListener('touchmove', onTouchMove, false);\n    \t\t }\n    \t }    \t \n    \t if ('ontouchstart' in document.documentElement) {\n    \t\t this.addEventListener('touchstart', onTouchStart, false);\n    \t }\n     });\n \n     return this;\n   };\n \n })(jQuery);\n"]}},{"type":"js","data":"(function(){Lists = new Mongo.Collection('lists');\n\n// Calculate a default name for a list in the form of 'List A'\nLists.defaultName = function() {\n  var nextLetter = 'A', nextName = 'List ' + nextLetter;\n  while (Lists.findOne({name: nextName})) {\n    // not going to be too smart here, can go past Z\n    nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n    nextName = 'List ' + nextLetter;\n  }\n\n  return nextName;\n};\n\nTodos = new Mongo.Collection('todos');\n\n}).call(this);\n","servePath":"/lib/collections.js","sourceMap":{"version":3,"sources":["/lib/collections.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/lib/collections.js","sourcesContent":["Lists = new Mongo.Collection('lists');\n\n// Calculate a default name for a list in the form of 'List A'\nLists.defaultName = function() {\n  var nextLetter = 'A', nextName = 'List ' + nextLetter;\n  while (Lists.findOne({name: nextName})) {\n    // not going to be too smart here, can go past Z\n    nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n    nextName = 'List ' + nextLetter;\n  }\n\n  return nextName;\n};\n\nTodos = new Mongo.Collection('todos');\n"]}},{"type":"js","data":"(function(){Router.configure({\n  // we use the  appBody template to define the layout for the entire app\n  layoutTemplate: 'appBody',\n\n  // the appNotFound template is used for unknown routes and missing lists\n  notFoundTemplate: 'appNotFound',\n\n  // show the appLoading template whilst the subscriptions below load their data\n  loadingTemplate: 'appLoading',\n\n  // wait on the following subscriptions before rendering the page to ensure\n  // the data it's expecting is present\n  waitOn: function() {\n    return [\n      Meteor.subscribe('publicLists'),\n      Meteor.subscribe('privateLists')\n    ];\n  }\n});\n\ndataReadyHold = null;\n\nif (Meteor.isClient) {\n  // Keep showing the launch screen on mobile devices until we have loaded\n  // the app's data\n  dataReadyHold = LaunchScreen.hold();\n\n  // Show the loading screen on desktop\n  Router.onBeforeAction('loading', {except: ['join', 'signin']});\n  Router.onBeforeAction('dataNotFound', {except: ['join', 'signin']});\n}\n\nRouter.route('join');\nRouter.route('signin');\n\nRouter.route('listsShow', {\n  path: '/lists/:_id',\n  // subscribe to todos before the page is rendered but don't wait on the\n  // subscription, we'll just render the items as they arrive\n  onBeforeAction: function () {\n    this.todosHandle = Meteor.subscribe('todos', this.params._id);\n\n    if (this.ready()) {\n      // Handle for launch screen defined in app-body.js\n      dataReadyHold.release();\n    }\n  },\n  data: function () {\n    return Lists.findOne(this.params._id);\n  },\n  action: function () {\n    this.render();\n  }\n});\n\nRouter.route('home', {\n  path: '/',\n  action: function() {\n    Router.go('listsShow', Lists.findOne());\n  }\n});\n\n}).call(this);\n","servePath":"/lib/router.js","sourceMap":{"version":3,"sources":["/lib/router.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/lib/router.js","sourcesContent":["Router.configure({\n  // we use the  appBody template to define the layout for the entire app\n  layoutTemplate: 'appBody',\n\n  // the appNotFound template is used for unknown routes and missing lists\n  notFoundTemplate: 'appNotFound',\n\n  // show the appLoading template whilst the subscriptions below load their data\n  loadingTemplate: 'appLoading',\n\n  // wait on the following subscriptions before rendering the page to ensure\n  // the data it's expecting is present\n  waitOn: function() {\n    return [\n      Meteor.subscribe('publicLists'),\n      Meteor.subscribe('privateLists')\n    ];\n  }\n});\n\ndataReadyHold = null;\n\nif (Meteor.isClient) {\n  // Keep showing the launch screen on mobile devices until we have loaded\n  // the app's data\n  dataReadyHold = LaunchScreen.hold();\n\n  // Show the loading screen on desktop\n  Router.onBeforeAction('loading', {except: ['join', 'signin']});\n  Router.onBeforeAction('dataNotFound', {except: ['join', 'signin']});\n}\n\nRouter.route('join');\nRouter.route('signin');\n\nRouter.route('listsShow', {\n  path: '/lists/:_id',\n  // subscribe to todos before the page is rendered but don't wait on the\n  // subscription, we'll just render the items as they arrive\n  onBeforeAction: function () {\n    this.todosHandle = Meteor.subscribe('todos', this.params._id);\n\n    if (this.ready()) {\n      // Handle for launch screen defined in app-body.js\n      dataReadyHold.release();\n    }\n  },\n  data: function () {\n    return Lists.findOne(this.params._id);\n  },\n  action: function () {\n    this.render();\n  }\n});\n\nRouter.route('home', {\n  path: '/',\n  action: function() {\n    Router.go('listsShow', Lists.findOne());\n  }\n});\n"]}},{"type":"js","data":"(function(){var MENU_KEY = 'menuOpen';\nSession.setDefault(MENU_KEY, false);\n\nvar USER_MENU_KEY = 'userMenuOpen';\nSession.setDefault(USER_MENU_KEY, false);\n\nvar SHOW_CONNECTION_ISSUE_KEY = 'showConnectionIssue';\nSession.setDefault(SHOW_CONNECTION_ISSUE_KEY, false);\n\nvar CONNECTION_ISSUE_TIMEOUT = 5000;\n\nMeteor.startup(function () {\n  // set up a swipe left / right handler\n  $(document.body).touchwipe({\n    wipeLeft: function () {\n      Session.set(MENU_KEY, false);\n    },\n    wipeRight: function () {\n      Session.set(MENU_KEY, true);\n    },\n    preventDefaultEvents: false\n  });\n\n  // Only show the connection error box if it has been 5 seconds since\n  // the app started\n  setTimeout(function () {\n    // Launch screen handle created in lib/router.js\n    dataReadyHold.release();\n\n    // Show the connection error box\n    Session.set(SHOW_CONNECTION_ISSUE_KEY, true);\n  }, CONNECTION_ISSUE_TIMEOUT);\n});\n\nTemplate.appBody.onRendered(function() {\n  this.find('#content-container')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn(function () {\n          if (listFadeInHold) {\n            listFadeInHold.release();\n          }\n        });\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        $(this).remove();\n      });\n    }\n  };\n});\n\nTemplate.appBody.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes. #each looks at the _id property of it's\n  // items to know when to insert a new item and when to update an old one.\n  thisArray: function() {\n    return [this];\n  },\n  menuOpen: function() {\n    return Session.get(MENU_KEY) && 'menu-open';\n  },\n  cordova: function() {\n    return Meteor.isCordova && 'cordova';\n  },\n  emailLocalPart: function() {\n    var email = Meteor.user().emails[0].address;\n    return email.substring(0, email.indexOf('@'));\n  },\n  userMenuOpen: function() {\n    return Session.get(USER_MENU_KEY);\n  },\n  lists: function() {\n    return Lists.find();\n  },\n  activeListClass: function() {\n    var current = Router.current();\n    if (current.route.name === 'listsShow' && current.params._id === this._id) {\n      return 'active';\n    }\n  },\n  connected: function() {\n    if (Session.get(SHOW_CONNECTION_ISSUE_KEY)) {\n      return Meteor.status().connected;\n    } else {\n      return true;\n    }\n  }\n});\n\nTemplate.appBody.events({\n  'click .js-menu': function() {\n    Session.set(MENU_KEY, ! Session.get(MENU_KEY));\n  },\n\n  'click .content-overlay': function(event) {\n    Session.set(MENU_KEY, false);\n    event.preventDefault();\n  },\n\n  'click .js-user-menu': function(event) {\n    Session.set(USER_MENU_KEY, ! Session.get(USER_MENU_KEY));\n    // stop the menu from closing\n    event.stopImmediatePropagation();\n  },\n\n  'click #menu a': function() {\n    Session.set(MENU_KEY, false);\n  },\n\n  'click .js-logout': function() {\n    Meteor.logout();\n\n    // if we are on a private list, we'll need to go to a public one\n    var current = Router.current();\n    if (current.route.name === 'listsShow' && current.data().userId) {\n      Router.go('listsShow', Lists.findOne({userId: {$exists: false}}));\n    }\n  },\n\n  'click .js-new-list': function() {\n    var list = {name: Lists.defaultName(), incompleteCount: 0};\n    list._id = Lists.insert(list);\n\n    Router.go('listsShow', list);\n  }\n});\n\n}).call(this);\n","servePath":"/client/templates/app-body.js","sourceMap":{"version":3,"sources":["/client/templates/app-body.js"],"names":[],"mappings":"yfile":"/client/templates/app-body.js","sourcesContent":["var MENU_KEY = 'menuOpen';\nSession.setDefault(MENU_KEY, false);\n\nvar USER_MENU_KEY = 'userMenuOpen';\nSession.setDefault(USER_MENU_KEY, false);\n\nvar SHOW_CONNECTION_ISSUE_KEY = 'showConnectionIssue';\nSession.setDefault(SHOW_CONNECTION_ISSUE_KEY, false);\n\nvar CONNECTION_ISSUE_TIMEOUT = 5000;\n\nMeteor.startup(function () {\n  // set up a swipe left / right handler\n  $(document.body).touchwipe({\n    wipeLeft: function () {\n      Session.set(MENU_KEY, false);\n    },\n    wipeRight: function () {\n      Session.set(MENU_KEY, true);\n    },\n    preventDefaultEvents: false\n  });\n\n  // Only show the connection error box if it has been 5 seconds since\n  // the app started\n  setTimeout(function () {\n    // Launch screen handle created in lib/router.js\n    dataReadyHold.release();\n\n    // Show the connection error box\n    Session.set(SHOW_CONNECTION_ISSUE_KEY, true);\n  }, CONNECTION_ISSUE_TIMEOUT);\n});\n\nTemplate.appBody.onRendered(function() {\n  this.find('#content-container')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn(function () {\n          if (listFadeInHold) {\n            listFadeInHold.release();\n          }\n        });\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        $(this).remove();\n      });\n    }\n  };\n});\n\nTemplate.appBody.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes. #each looks at the _id property of it's\n  // items to know when to insert a new item and when to update an old one.\n  thisArray: function() {\n    return [this];\n  },\n  menuOpen: function() {\n    return Session.get(MENU_KEY) && 'menu-open';\n  },\n  cordova: function() {\n    return Meteor.isCordova && 'cordova';\n  },\n  emailLocalPart: function() {\n    var email = Meteor.user().emails[0].address;\n    return email.substring(0, email.indexOf('@'));\n  },\n  userMenuOpen: function() {\n    return Session.get(USER_MENU_KEY);\n  },\n  lists: function() {\n    return Lists.find();\n  },\n  activeListClass: function() {\n    var current = Router.current();\n    if (current.route.name === 'listsShow' && current.params._id === this._id) {\n      return 'active';\n    }\n  },\n  connected: function() {\n    if (Session.get(SHOW_CONNECTION_ISSUE_KEY)) {\n      return Meteor.status().connected;\n    } else {\n      return true;\n    }\n  }\n});\n\nTemplate.appBody.events({\n  'click .js-menu': function() {\n    Session.set(MENU_KEY, ! Session.get(MENU_KEY));\n  },\n\n  'click .content-overlay': function(event) {\n    Session.set(MENU_KEY, false);\n    event.preventDefault();\n  },\n\n  'click .js-user-menu': function(event) {\n    Session.set(USER_MENU_KEY, ! Session.get(USER_MENU_KEY));\n    // stop the menu from closing\n    event.stopImmediatePropagation();\n  },\n\n  'click #menu a': function() {\n    Session.set(MENU_KEY, false);\n  },\n\n  'click .js-logout': function() {\n    Meteor.logout();\n\n    // if we are on a private list, we'll need to go to a public one\n    var current = Router.current();\n    if (current.route.name === 'listsShow' && current.data().userId) {\n      Router.go('listsShow', Lists.findOne({userId: {$exists: false}}));\n    }\n  },\n\n  'click .js-new-list': function() {\n    var list = {name: Lists.defaultName(), incompleteCount: 0};\n    list._id = Lists.insert(list);\n\n    Router.go('listsShow', list);\n  }\n});\n"]}},{"type":"js","data":"(function(){var ERRORS_KEY = 'joinErrors';\n\nTemplate.join.onCreated(function() {\n  Session.set(ERRORS_KEY, {});\n});\n\nTemplate.join.helpers({\n  errorMessages: function() {\n    return _.values(Session.get(ERRORS_KEY));\n  },\n  errorClass: function(key) {\n    return Session.get(ERRORS_KEY)[key] && 'error';\n  }\n});\n\nTemplate.join.events({\n  'submit': function(event, template) {\n    event.preventDefault();\n    var email = template.$('[name=email]').val();\n    var password = template.$('[name=password]').val();\n    var confirm = template.$('[name=confirm]').val();\n\n    var errors = {};\n\n    if (! email) {\n      errors.email = 'Email required';\n    }\n\n    if (! password) {\n      errors.password = 'Password required';\n    }\n\n    if (confirm !== password) {\n      errors.confirm = 'Please confirm your password';\n    }\n\n    Session.set(ERRORS_KEY, errors);\n    if (_.keys(errors).length) {\n      return;\n    }\n\n    Accounts.createUser({\n      email: email,\n      password: password\n    }, function(error) {\n      if (error) {\n        return Session.set(ERRORS_KEY, {'none': error.reason});\n      }\n\n      Router.go('home');\n    });\n  }\n});\n\n}).call(this);\n","servePath":"/client/templates/auth-join.js","sourceMap":{"version":3,"sources":["/client/templates/auth-join.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/auth-join.js","sourcesContent":["var ERRORS_KEY = 'joinErrors';\n\nTemplate.join.onCreated(function() {\n  Session.set(ERRORS_KEY, {});\n});\n\nTemplate.join.helpers({\n  errorMessages: function() {\n    return _.values(Session.get(ERRORS_KEY));\n  },\n  errorClass: function(key) {\n    return Session.get(ERRORS_KEY)[key] && 'error';\n  }\n});\n\nTemplate.join.events({\n  'submit': function(event, template) {\n    event.preventDefault();\n    var email = template.$('[name=email]').val();\n    var password = template.$('[name=password]').val();\n    var confirm = template.$('[name=confirm]').val();\n\n    var errors = {};\n\n    if (! email) {\n      errors.email = 'Email required';\n    }\n\n    if (! password) {\n      errors.password = 'Password required';\n    }\n\n    if (confirm !== password) {\n      errors.confirm = 'Please confirm your password';\n    }\n\n    Session.set(ERRORS_KEY, errors);\n    if (_.keys(errors).length) {\n      return;\n    }\n\n    Accounts.createUser({\n      email: email,\n      password: password\n    }, function(error) {\n      if (error) {\n        return Session.set(ERRORS_KEY, {'none': error.reason});\n      }\n\n      Router.go('home');\n    });\n  }\n});\n"]}},{"type":"js","data":"(function(){var ERRORS_KEY = 'signinErrors';\n\nTemplate.signin.onCreated(function() {\n  Session.set(ERRORS_KEY, {});\n});\n\nTemplate.signin.helpers({\n  errorMessages: function() {\n    return _.values(Session.get(ERRORS_KEY));\n  },\n  errorClass: function(key) {\n    return Session.get(ERRORS_KEY)[key] && 'error';\n  }\n});\n\nTemplate.signin.events({\n  'submit': function(event, template) {\n    event.preventDefault();\n    \n    var email = template.$('[name=email]').val();\n    var password = template.$('[name=password]').val();\n    \n    var errors = {};\n\n    if (! email) {\n      errors.email = 'Email is required';\n    }\n\n    if (! password) {\n      errors.password = 'Password is required';\n    }\n    \n    Session.set(ERRORS_KEY, errors);\n    if (_.keys(errors).length) {\n      return;\n    }\n    \n    Meteor.loginWithPassword(email, password, function(error) {\n      if (error) {\n        return Session.set(ERRORS_KEY, {'none': error.reason});\n      }\n      \n      Router.go('home');\n    });\n  }\n});\n\n}).call(this);\n","servePath":"/client/templates/auth-signin.js","sourceMap":{"version":3,"sources":["/client/templates/auth-signin.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/client/templates/auth-signin.js","sourcesContent":["var ERRORS_KEY = 'signinErrors';\n\nTemplate.signin.onCreated(function() {\n  Session.set(ERRORS_KEY, {});\n});\n\nTemplate.signin.helpers({\n  errorMessages: function() {\n    return _.values(Session.get(ERRORS_KEY));\n  },\n  errorClass: function(key) {\n    return Session.get(ERRORS_KEY)[key] && 'error';\n  }\n});\n\nTemplate.signin.events({\n  'submit': function(event, template) {\n    event.preventDefault();\n    \n    var email = template.$('[name=email]').val();\n    var password = template.$('[name=password]').val();\n    \n    var errors = {};\n\n    if (! email) {\n      errors.email = 'Email is required';\n    }\n\n    if (! password) {\n      errors.password = 'Password is required';\n    }\n    \n    Session.set(ERRORS_KEY, errors);\n    if (_.keys(errors).length) {\n      return;\n    }\n    \n    Meteor.loginWithPassword(email, password, function(error) {\n      if (error) {\n        return Session.set(ERRORS_KEY, {'none': error.reason});\n      }\n      \n      Router.go('home');\n    });\n  }\n});\n"]}},{"type":"js","data":"(function(){var EDITING_KEY = 'editingList';\nSession.setDefault(EDITING_KEY, false);\n\n// Track if this is the first time the list template is rendered\nvar firstRender = true;\nvar listRenderHold = LaunchScreen.hold();\nlistFadeInHold = null;\n\nTemplate.listsShow.onRendered(function() {\n  if (firstRender) {\n    // Released in app-body.js\n    listFadeInHold = LaunchScreen.hold();\n\n    // Handle for launch screen defined in app-body.js\n    listRenderHold.release();\n\n    firstRender = false;\n  }\n\n  this.find('.js-title-nav')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn();\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        this.remove();\n      });\n    }\n  };\n});\n\nTemplate.listsShow.helpers({\n  editing: function() {\n    return Session.get(EDITING_KEY);\n  },\n\n  todosReady: function() {\n    return Router.current().todosHandle.ready();\n  },\n\n  todos: function(listId) {\n    return Todos.find({listId: listId}, {sort: {createdAt : -1}});\n  }\n});\n\nvar editList = function(list, template) {\n  Session.set(EDITING_KEY, true);\n\n  // force the template to redraw based on the reactive change\n  Tracker.flush();\n  template.$('.js-edit-form input[type=text]').focus();\n};\n\nvar saveList = function(list, template) {\n  Session.set(EDITING_KEY, false);\n  Lists.update(list._id, {$set: {name: template.$('[name=name]').val()}});\n}\n\nvar deleteList = function(list) {\n  // ensure the last public list cannot be deleted.\n  if (! list.userId && Lists.find({userId: {$exists: false}}).count() === 1) {\n    return alert(\"Sorry, you cannot delete the final public list!\");\n  }\n\n  var message = \"Are you sure you want to delete the list \" + list.name + \"?\";\n  if (confirm(message)) {\n    // we must remove each item individually from the client\n    Todos.find({listId: list._id}).forEach(function(todo) {\n      Todos.remove(todo._id);\n    });\n    Lists.remove(list._id);\n\n    Router.go('home');\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar toggleListPrivacy = function(list) {\n  if (! Meteor.user()) {\n    return alert(\"Please sign in or create an account to make private lists.\");\n  }\n\n  if (list.userId) {\n    Lists.update(list._id, {$unset: {userId: true}});\n  } else {\n    // ensure the last public list cannot be made private\n    if (Lists.find({userId: {$exists: false}}).count() === 1) {\n      return alert(\"Sorry, you cannot make the final public list private!\");\n    }\n\n    Lists.update(list._id, {$set: {userId: Meteor.userId()}});\n  }\n};\n\nTemplate.listsShow.events({\n  'click .js-cancel': function() {\n    Session.set(EDITING_KEY, false);\n  },\n\n  'keydown input[type=text]': function(event) {\n    // ESC\n    if (27 === event.which) {\n      event.preventDefault();\n      $(event.target).blur();\n    }\n  },\n\n  'blur input[type=text]': function(event, template) {\n    // if we are still editing (we haven't just clicked the cancel button)\n    if (Session.get(EDITING_KEY))\n      saveList(this, template);\n  },\n\n  'submit .js-edit-form': function(event, template) {\n    event.preventDefault();\n    saveList(this, template);\n  },\n\n  // handle mousedown otherwise the blur handler above will swallow the click\n  // on iOS, we still require the click event so handle both\n  'mousedown .js-cancel, click .js-cancel': function(event) {\n    event.preventDefault();\n    Session.set(EDITING_KEY, false);\n  },\n\n  'change .list-edit': function(event, template) {\n    if ($(event.target).val() === 'edit') {\n      editList(this, template);\n    } else if ($(event.target).val() === 'delete') {\n      deleteList(this, template);\n    } else {\n      toggleListPrivacy(this, template);\n    }\n\n    event.target.selectedIndex = 0;\n  },\n\n  'click .js-edit-list': function(event, template) {\n    editList(this, template);\n  },\n\n  'click .js-toggle-list-privacy': function(event, template) {\n    toggleListPrivacy(this, template);\n  },\n\n  'click .js-delete-list': function(event, template) {\n    deleteList(this, template);\n  },\n\n  'click .js-todo-add': function(event, template) {\n    template.$('.js-todo-new input').focus();\n  },\n\n  'submit .js-todo-new': function(event) {\n    event.preventDefault();\n\n    var $input = $(event.target).find('[type=text]');\n    if (! $input.val())\n      return;\n\n    Todos.insert({\n      listId: this._id,\n      text: $input.val(),\n      checked: false,\n      createdAt: new Date()\n    });\n    Lists.update(this._id, {$inc: {incompleteCount: 1}});\n    $input.val('');\n  }\n});\n\n}).call(this);\n","servePath":"/client/templates/lists-show.js","sourceMap":{"version":3,"sources":["/client/templates/lists-show.js"],"names":[],"mappings":"yfile":"/client/templates/lists-show.js","sourcesContent":["var EDITING_KEY = 'editingList';\nSession.setDefault(EDITING_KEY, false);\n\n// Track if this is the first time the list template is rendered\nvar firstRender = true;\nvar listRenderHold = LaunchScreen.hold();\nlistFadeInHold = null;\n\nTemplate.listsShow.onRendered(function() {\n  if (firstRender) {\n    // Released in app-body.js\n    listFadeInHold = LaunchScreen.hold();\n\n    // Handle for launch screen defined in app-body.js\n    listRenderHold.release();\n\n    firstRender = false;\n  }\n\n  this.find('.js-title-nav')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn();\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        this.remove();\n      });\n    }\n  };\n});\n\nTemplate.listsShow.helpers({\n  editing: function() {\n    return Session.get(EDITING_KEY);\n  },\n\n  todosReady: function() {\n    return Router.current().todosHandle.ready();\n  },\n\n  todos: function(listId) {\n    return Todos.find({listId: listId}, {sort: {createdAt : -1}});\n  }\n});\n\nvar editList = function(list, template) {\n  Session.set(EDITING_KEY, true);\n\n  // force the template to redraw based on the reactive change\n  Tracker.flush();\n  template.$('.js-edit-form input[type=text]').focus();\n};\n\nvar saveList = function(list, template) {\n  Session.set(EDITING_KEY, false);\n  Lists.update(list._id, {$set: {name: template.$('[name=name]').val()}});\n}\n\nvar deleteList = function(list) {\n  // ensure the last public list cannot be deleted.\n  if (! list.userId && Lists.find({userId: {$exists: false}}).count() === 1) {\n    return alert(\"Sorry, you cannot delete the final public list!\");\n  }\n\n  var message = \"Are you sure you want to delete the list \" + list.name + \"?\";\n  if (confirm(message)) {\n    // we must remove each item individually from the client\n    Todos.find({listId: list._id}).forEach(function(todo) {\n      Todos.remove(todo._id);\n    });\n    Lists.remove(list._id);\n\n    Router.go('home');\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar toggleListPrivacy = function(list) {\n  if (! Meteor.user()) {\n    return alert(\"Please sign in or create an account to make private lists.\");\n  }\n\n  if (list.userId) {\n    Lists.update(list._id, {$unset: {userId: true}});\n  } else {\n    // ensure the last public list cannot be made private\n    if (Lists.find({userId: {$exists: false}}).count() === 1) {\n      return alert(\"Sorry, you cannot make the final public list private!\");\n    }\n\n    Lists.update(list._id, {$set: {userId: Meteor.userId()}});\n  }\n};\n\nTemplate.listsShow.events({\n  'click .js-cancel': function() {\n    Session.set(EDITING_KEY, false);\n  },\n\n  'keydown input[type=text]': function(event) {\n    // ESC\n    if (27 === event.which) {\n      event.preventDefault();\n      $(event.target).blur();\n    }\n  },\n\n  'blur input[type=text]': function(event, template) {\n    // if we are still editing (we haven't just clicked the cancel button)\n    if (Session.get(EDITING_KEY))\n      saveList(this, template);\n  },\n\n  'submit .js-edit-form': function(event, template) {\n    event.preventDefault();\n    saveList(this, template);\n  },\n\n  // handle mousedown otherwise the blur handler above will swallow the click\n  // on iOS, we still require the click event so handle both\n  'mousedown .js-cancel, click .js-cancel': function(event) {\n    event.preventDefault();\n    Session.set(EDITING_KEY, false);\n  },\n\n  'change .list-edit': function(event, template) {\n    if ($(event.target).val() === 'edit') {\n      editList(this, template);\n    } else if ($(event.target).val() === 'delete') {\n      deleteList(this, template);\n    } else {\n      toggleListPrivacy(this, template);\n    }\n\n    event.target.selectedIndex = 0;\n  },\n\n  'click .js-edit-list': function(event, template) {\n    editList(this, template);\n  },\n\n  'click .js-toggle-list-privacy': function(event, template) {\n    toggleListPrivacy(this, template);\n  },\n\n  'click .js-delete-list': function(event, template) {\n    deleteList(this, template);\n  },\n\n  'click .js-todo-add': function(event, template) {\n    template.$('.js-todo-new input').focus();\n  },\n\n  'submit .js-todo-new': function(event) {\n    event.preventDefault();\n\n    var $input = $(event.target).find('[type=text]');\n    if (! $input.val())\n      return;\n\n    Todos.insert({\n      listId: this._id,\n      text: $input.val(),\n      checked: false,\n      createdAt: new Date()\n    });\n    Lists.update(this._id, {$inc: {incompleteCount: 1}});\n    $input.val('');\n  }\n});\n"]}},{"type":"js","data":"(function(){var EDITING_KEY = 'EDITING_TODO_ID';\n\nTemplate.todosItem.helpers({\n  checkedClass: function() {\n    return this.checked && 'checked';\n  },\n  editingClass: function() {\n    return Session.equals(EDITING_KEY, this._id) && 'editing';\n  }\n});\n\nTemplate.todosItem.events({\n  'change [type=checkbox]': function(event) {\n    var checked = $(event.target).is(':checked');\n    Todos.update(this._id, {$set: {checked: checked}});\n    Lists.update(this.listId, {$inc: {incompleteCount: checked ? -1 : 1}});\n  },\n  \n  'focus input[type=text]': function(event) {\n    Session.set(EDITING_KEY, this._id);\n  },\n  \n  'blur input[type=text]': function(event) {\n    if (Session.equals(EDITING_KEY, this._id))\n      Session.set(EDITING_KEY, null);\n  },\n  \n  'keydown input[type=text]': function(event) {\n    // ESC or ENTER\n    if (event.which === 27 || event.which === 13) {\n      event.preventDefault();\n      event.target.blur();\n    }\n  },\n  \n  // update the text of the item on keypress but throttle the event to ensure\n  // we don't flood the server with updates (handles the event at most once \n  // every 300ms)\n  'keyup input[type=text]': _.throttle(function(event) {\n    Todos.update(this._id, {$set: {text: event.target.value}});\n  }, 300),\n  \n  // handle mousedown otherwise the blur handler above will swallow the click\n  // on iOS, we still require the click event so handle both\n  'mousedown .js-delete-item, click .js-delete-item': function() {\n    Todos.remove(this._id);\n    if (! this.checked)\n      Lists.update(this.listId, {$inc: {incompleteCount: -1}});\n  }\n});\n}).call(this);\n","servePath":"/client/templates/todos-item.js","sourceMap":{"version":3,"sources":["/client/templates/todos-item.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/client/templates/todos-item.js","sourcesContent":["var EDITING_KEY = 'EDITING_TODO_ID';\n\nTemplate.todosItem.helpers({\n  checkedClass: function() {\n    return this.checked && 'checked';\n  },\n  editingClass: function() {\n    return Session.equals(EDITING_KEY, this._id) && 'editing';\n  }\n});\n\nTemplate.todosItem.events({\n  'change [type=checkbox]': function(event) {\n    var checked = $(event.target).is(':checked');\n    Todos.update(this._id, {$set: {checked: checked}});\n    Lists.update(this.listId, {$inc: {incompleteCount: checked ? -1 : 1}});\n  },\n  \n  'focus input[type=text]': function(event) {\n    Session.set(EDITING_KEY, this._id);\n  },\n  \n  'blur input[type=text]': function(event) {\n    if (Session.equals(EDITING_KEY, this._id))\n      Session.set(EDITING_KEY, null);\n  },\n  \n  'keydown input[type=text]': function(event) {\n    // ESC or ENTER\n    if (event.which === 27 || event.which === 13) {\n      event.preventDefault();\n      event.target.blur();\n    }\n  },\n  \n  // update the text of the item on keypress but throttle the event to ensure\n  // we don't flood the server with updates (handles the event at most once \n  // every 300ms)\n  'keyup input[type=text]': _.throttle(function(event) {\n    Todos.update(this._id, {$set: {text: event.target.value}});\n  }, 300),\n  \n  // handle mousedown otherwise the blur handler above will swallow the click\n  // on iOS, we still require the click event so handle both\n  'mousedown .js-delete-item, click .js-delete-item': function() {\n    Todos.remove(this._id);\n    if (! this.checked)\n      Lists.update(this.listId, {$inc: {incompleteCount: -1}});\n  }\n});"]}}]