[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar HTTP = Package.http.HTTP;\nvar Random = Package.random.Random;\n\n/* Package-scope variables */\nvar ClientVersions, Autoupdate;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/autoupdate/autoupdate_cordova.js                                                                    //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar DEBUG_TAG = 'METEOR CORDOVA DEBUG (autoupdate_cordova.js) ';                                                // 1\nvar log = function (msg) {                                                                                      // 2\n  console.log(DEBUG_TAG + msg);                                                                                 // 3\n};                                                                                                              // 4\n                                                                                                                // 5\n// This constant was picked by testing on iOS 7.1                                                               // 6\n// We limit the number of concurrent downloads because iOS gets angry on the                                    // 7\n// application when a certain limit is exceeded and starts timing-out the                                       // 8\n// connections in 1-2 minutes which makes the whole HCP really slow.                                            // 9\nvar MAX_NUM_CONCURRENT_DOWNLOADS = 30;                                                                          // 10\nvar MAX_RETRY_COUNT = 5;                                                                                        // 11\n                                                                                                                // 12\nvar autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova || \"unknown\";                 // 13\n                                                                                                                // 14\n// The collection of acceptable client versions.                                                                // 15\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");                                      // 16\n                                                                                                                // 17\nAutoupdate = {};                                                                                                // 18\n                                                                                                                // 19\nAutoupdate.newClientAvailable = function () {                                                                   // 20\n  return !! ClientVersions.findOne({                                                                            // 21\n    _id: 'version-cordova',                                                                                     // 22\n    version: {$ne: autoupdateVersionCordova}                                                                    // 23\n  });                                                                                                           // 24\n};                                                                                                              // 25\n                                                                                                                // 26\nvar writeFile = function (directoryPath, fileName, content, cb) {                                               // 27\n  var fail = function (err) {                                                                                   // 28\n    cb(new Error(\"Failed to write file: \", err), null);                                                         // 29\n  };                                                                                                            // 30\n                                                                                                                // 31\n  window.resolveLocalFileSystemURL(directoryPath, function (dirEntry) {                                         // 32\n    var success = function (fileEntry) {                                                                        // 33\n      fileEntry.createWriter(function (writer) {                                                                // 34\n        writer.onwrite = function (evt) {                                                                       // 35\n          var result = evt.target.result;                                                                       // 36\n          cb(null, result);                                                                                     // 37\n        };                                                                                                      // 38\n        writer.onerror = fail;                                                                                  // 39\n        writer.write(content);                                                                                  // 40\n      }, fail);                                                                                                 // 41\n    };                                                                                                          // 42\n                                                                                                                // 43\n    dirEntry.getFile(fileName, {                                                                                // 44\n      create: true,                                                                                             // 45\n      exclusive: false                                                                                          // 46\n    }, success, fail);                                                                                          // 47\n  }, fail);                                                                                                     // 48\n};                                                                                                              // 49\n                                                                                                                // 50\nvar restartServer = function (location) {                                                                       // 51\n  log('restartServer with location ' + location);                                                               // 52\n  var fail = function (err) { log(\"Unexpected error in restartServer: \" + err.message) };                       // 53\n  var httpd = cordova && cordova.plugins && cordova.plugins.CordovaUpdate;                                      // 54\n                                                                                                                // 55\n  if (! httpd) {                                                                                                // 56\n    fail(new Error('no httpd'));                                                                                // 57\n    return;                                                                                                     // 58\n  }                                                                                                             // 59\n                                                                                                                // 60\n  var startServer = function (cordovajsRoot) {                                                                  // 61\n    httpd.startServer({                                                                                         // 62\n      'www_root' : location,                                                                                    // 63\n      'cordovajs_root': cordovajsRoot                                                                           // 64\n    }, function (url) {                                                                                         // 65\n      if (Package.reload) {                                                                                     // 66\n        Package.reload.Reload._reload();                                                                        // 67\n      } else {                                                                                                  // 68\n        window.location.reload();                                                                               // 69\n      }                                                                                                         // 70\n    }, fail);                                                                                                   // 71\n  };                                                                                                            // 72\n                                                                                                                // 73\n  httpd.getCordovajsRoot(function (cordovajsRoot) {                                                             // 74\n    startServer(cordovajsRoot);                                                                                 // 75\n  }, fail);                                                                                                     // 76\n};                                                                                                              // 77\n                                                                                                                // 78\nvar hasCalledReload = false;                                                                                    // 79\nvar updating = false;                                                                                           // 80\nvar localPathPrefix = null;                                                                                     // 81\n                                                                                                                // 82\nvar onNewVersion = function () {                                                                                // 83\n  var ft = new FileTransfer();                                                                                  // 84\n  var urlPrefix = Meteor.absoluteUrl() + '__cordova';                                                           // 85\n  HTTP.get(urlPrefix + '/manifest.json', function (err, res) {                                                  // 86\n    if (err || ! res.data) {                                                                                    // 87\n      log('Failed to download the manifest ' + (err && err.message) + ' ' + (res && res.content));              // 88\n      return;                                                                                                   // 89\n    }                                                                                                           // 90\n                                                                                                                // 91\n    updating = true;                                                                                            // 92\n    ensureLocalPathPrefix(_.bind(downloadNewVersion, null, res.data));                                          // 93\n  });                                                                                                           // 94\n};                                                                                                              // 95\n                                                                                                                // 96\nvar downloadNewVersion = function (program) {                                                                   // 97\n  var urlPrefix = Meteor.absoluteUrl() + '__cordova';                                                           // 98\n  var manifest = _.clone(program.manifest);                                                                     // 99\n  var version = program.version;                                                                                // 100\n  var ft = new FileTransfer();                                                                                  // 101\n                                                                                                                // 102\n  manifest.push({ url: '/index.html?' + Random.id() });                                                         // 103\n                                                                                                                // 104\n  var versionPrefix = localPathPrefix + version;                                                                // 105\n                                                                                                                // 106\n  var queue = [];                                                                                               // 107\n  _.each(manifest, function (item) {                                                                            // 108\n    if (! item.url) return;                                                                                     // 109\n                                                                                                                // 110\n    var url = item.url;                                                                                         // 111\n    url = url.replace(/\\?.+$/, '');                                                                             // 112\n                                                                                                                // 113\n    queue.push(url);                                                                                            // 114\n  });                                                                                                           // 115\n                                                                                                                // 116\n  var afterAllFilesDownloaded = _.after(queue.length, function () {                                             // 117\n    var wroteManifest = function (err) {                                                                        // 118\n      if (err) {                                                                                                // 119\n        log(\"Failed to write manifest.json: \" + err);                                                           // 120\n        // XXX do something smarter?                                                                            // 121\n        return;                                                                                                 // 122\n      }                                                                                                         // 123\n                                                                                                                // 124\n      // success! downloaded all sources and saved the manifest                                                 // 125\n      // save the version string for atomicity                                                                  // 126\n      writeFile(localPathPrefix, 'version', version, function (err) {                                           // 127\n        if (err) {                                                                                              // 128\n          log(\"Failed to write version: \" + err);                                                               // 129\n          return;                                                                                               // 130\n        }                                                                                                       // 131\n                                                                                                                // 132\n        // don't call reload twice!                                                                             // 133\n        if (! hasCalledReload) {                                                                                // 134\n          var location = uriToPath(localPathPrefix + version);                                                  // 135\n          restartServer(location);                                                                              // 136\n        }                                                                                                       // 137\n      });                                                                                                       // 138\n    };                                                                                                          // 139\n                                                                                                                // 140\n    writeFile(versionPrefix, 'manifest.json',                                                                   // 141\n              JSON.stringify(program, undefined, 2), wroteManifest);                                            // 142\n  });                                                                                                           // 143\n                                                                                                                // 144\n  var downloadUrl = function (url) {                                                                            // 145\n    console.log(DEBUG_TAG + \"start downloading \" + url);                                                        // 146\n    // Add a cache buster to ensure that we don't cache an old asset.                                           // 147\n    var uri = encodeURI(urlPrefix + url + '?' + Random.id());                                                   // 148\n                                                                                                                // 149\n    // Try to download the file a few times.                                                                    // 150\n    var tries = 0;                                                                                              // 151\n    var tryDownload = function () {                                                                             // 152\n      ft.download(uri, versionPrefix + encodeURI(url), function (entry) {                                       // 153\n        if (entry) {                                                                                            // 154\n          console.log(DEBUG_TAG + \"done downloading \" + url);                                                   // 155\n          // start downloading next queued url                                                                  // 156\n          if (queue.length)                                                                                     // 157\n            downloadUrl(queue.shift());                                                                         // 158\n          afterAllFilesDownloaded();                                                                            // 159\n        }                                                                                                       // 160\n      }, function (err) {                                                                                       // 161\n        // It failed, try again if we have tried less than 5 times.                                             // 162\n        if (tries++ < MAX_RETRY_COUNT) {                                                                        // 163\n          log(\"Download error, will retry (#\" + tries + \"): \" + uri);                                           // 164\n          tryDownload();                                                                                        // 165\n        } else {                                                                                                // 166\n          log('Download failed: ' + JSON.stringify(err) + \", source=\" + err.source + \", target=\" + err.target);\n        }                                                                                                       // 168\n      });                                                                                                       // 169\n    };                                                                                                          // 170\n                                                                                                                // 171\n    tryDownload();                                                                                              // 172\n  };                                                                                                            // 173\n                                                                                                                // 174\n  _.times(Math.min(MAX_NUM_CONCURRENT_DOWNLOADS, queue.length), function () {                                   // 175\n    var nextUrl = queue.shift();                                                                                // 176\n    // XXX defer the next download so iOS doesn't rate limit us on concurrent                                   // 177\n    // downloads                                                                                                // 178\n    Meteor.setTimeout(downloadUrl.bind(null, nextUrl), 50);                                                     // 179\n  });                                                                                                           // 180\n};                                                                                                              // 181\n                                                                                                                // 182\nvar retry = new Retry({                                                                                         // 183\n  minCount: 0, // don't do any immediate retries                                                                // 184\n  baseTimeout: 30*1000 // start with 30s                                                                        // 185\n});                                                                                                             // 186\nvar failures = 0;                                                                                               // 187\n                                                                                                                // 188\nAutoupdate._retrySubscription = function () {                                                                   // 189\n  var appId = __meteor_runtime_config__.appId;                                                                  // 190\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {                                                 // 191\n    onError: function (err) {                                                                                   // 192\n      Meteor._debug(\"autoupdate subscription failed:\", err);                                                    // 193\n      failures++;                                                                                               // 194\n      retry.retryLater(failures, function () {                                                                  // 195\n        // Just retry making the subscription, don't reload the whole                                           // 196\n        // page. While reloading would catch more cases (for example,                                           // 197\n        // the server went back a version and is now doing old-style hot                                        // 198\n        // code push), it would also be more prone to reload loops,                                             // 199\n        // which look really bad to the user. Just retrying the                                                 // 200\n        // subscription over DDP means it is at least possible to fix by                                        // 201\n        // updating the server.                                                                                 // 202\n        Autoupdate._retrySubscription();                                                                        // 203\n      });                                                                                                       // 204\n    }                                                                                                           // 205\n  });                                                                                                           // 206\n  if (Package.reload) {                                                                                         // 207\n    var checkNewVersionDocument = function (doc) {                                                              // 208\n      var self = this;                                                                                          // 209\n      if (doc.version !== autoupdateVersionCordova) {                                                           // 210\n        onNewVersion();                                                                                         // 211\n      }                                                                                                         // 212\n    };                                                                                                          // 213\n                                                                                                                // 214\n    var handle = ClientVersions.find({                                                                          // 215\n      _id: 'version-cordova'                                                                                    // 216\n    }).observe({                                                                                                // 217\n      added: checkNewVersionDocument,                                                                           // 218\n      changed: checkNewVersionDocument                                                                          // 219\n    });                                                                                                         // 220\n  }                                                                                                             // 221\n};                                                                                                              // 222\n                                                                                                                // 223\nMeteor.startup(function () {                                                                                    // 224\n  clearAutoupdateCache(autoupdateVersionCordova);                                                               // 225\n});                                                                                                             // 226\nMeteor.startup(Autoupdate._retrySubscription);                                                                  // 227\n                                                                                                                // 228\n                                                                                                                // 229\n// A helper that removes old directories left from previous autoupdates                                         // 230\nvar clearAutoupdateCache = function (currentVersion) {                                                          // 231\n  ensureLocalPathPrefix(function () {                                                                           // 232\n    // Try to clean up our cache directory, make sure to scan the directory                                     // 233\n    // *before* loading the actual app. This ordering will prevent race                                         // 234\n    // conditions when the app code tries to download a new version before                                      // 235\n    // the old-cache removal has scanned the cache folder.                                                      // 236\n    listDirectory(localPathPrefix, {dirsOnly: true}, function (err, names) {                                    // 237\n      // Couldn't get the list of dirs or risking to get into a race with an                                    // 238\n      // on-going update to disk.                                                                               // 239\n      if (err || updating) {                                                                                    // 240\n        return;                                                                                                 // 241\n      }                                                                                                         // 242\n                                                                                                                // 243\n      _.each(names, function (name) {                                                                           // 244\n        // Skip the folder with the latest version                                                              // 245\n        if (name === currentVersion)                                                                            // 246\n          return;                                                                                               // 247\n                                                                                                                // 248\n        // remove everything else, as we don't want to keep too much cache                                      // 249\n        // around on disk                                                                                       // 250\n        removeDirectory(localPathPrefix + name + '/', function (err) {                                          // 251\n          if (err) {                                                                                            // 252\n            log('Failed to remove an old cache folder '                                                         // 253\n                + name + ':' + err.message);                                                                    // 254\n          } else {                                                                                              // 255\n            log('Successfully removed an old cache folder ' + name);                                            // 256\n          }                                                                                                     // 257\n        });                                                                                                     // 258\n      });                                                                                                       // 259\n    });                                                                                                         // 260\n  })                                                                                                            // 261\n};                                                                                                              // 262\n                                                                                                                // 263\n// Cordova File plugin helpers                                                                                  // 264\nvar listDirectory = function (url, options, cb) {                                                               // 265\n  if (typeof options === 'function')                                                                            // 266\n    cb = options, options = {};                                                                                 // 267\n                                                                                                                // 268\n  var fail = function (err) { cb(err); };                                                                       // 269\n  window.resolveLocalFileSystemURL(url, function (entry) {                                                      // 270\n    var reader = entry.createReader();                                                                          // 271\n    reader.readEntries(function (entries) {                                                                     // 272\n      var names = [];                                                                                           // 273\n      _.each(entries, function (entry) {                                                                        // 274\n        if (! options.dirsOnly || entry.isDirectory)                                                            // 275\n          names.push(entry.name);                                                                               // 276\n      });                                                                                                       // 277\n      cb(null, names);                                                                                          // 278\n    }, fail);                                                                                                   // 279\n  }, fail);                                                                                                     // 280\n};                                                                                                              // 281\n                                                                                                                // 282\nvar removeDirectory = function (url, cb) {                                                                      // 283\n  var fail = function (err) {                                                                                   // 284\n    cb(err);                                                                                                    // 285\n  };                                                                                                            // 286\n  window.resolveLocalFileSystemURL(url, function (entry) {                                                      // 287\n    entry.removeRecursively(function () { cb(); }, fail);                                                       // 288\n  }, fail);                                                                                                     // 289\n};                                                                                                              // 290\n                                                                                                                // 291\nvar uriToPath = function (uri) {                                                                                // 292\n  return decodeURI(uri).replace(/^file:\\/\\//g, '');                                                             // 293\n};                                                                                                              // 294\n                                                                                                                // 295\nvar ensureLocalPathPrefix = function (cb) {                                                                     // 296\n  if (! localPathPrefix) {                                                                                      // 297\n    if (! cordova.file.dataDirectory) {                                                                         // 298\n      // Since ensureLocalPathPrefix function is always called on                                               // 299\n      // Meteor.startup, all Cordova plugins should be ready.                                                   // 300\n      // XXX Experiments have shown that it is not always the case, even when                                   // 301\n      // the cordova.file symbol is attached, properties like dataDirectory                                     // 302\n      // still can be null. Poll until we are sure the property is attached.                                    // 303\n      console.log(DEBUG_TAG + 'cordova.file.dataDirectory is null, retrying in 20ms');                          // 304\n      Meteor.setTimeout(_.bind(ensureLocalPathPrefix, null, cb), 20);                                           // 305\n    } else {                                                                                                    // 306\n      localPathPrefix = cordova.file.dataDirectory + 'meteor/';                                                 // 307\n      cb();                                                                                                     // 308\n    }                                                                                                           // 309\n  } else {                                                                                                      // 310\n    cb();                                                                                                       // 311\n  }                                                                                                             // 312\n};                                                                                                              // 313\n                                                                                                                // 314\n                                                                                                                // 315\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.autoupdate = {\n  Autoupdate: Autoupdate\n};\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["/packages/autoupdate/autoupdate_cordova.js"],"names":[],"mappingssH","file":"/packages/autoupdate.js","sourcesContent":["var DEBUG_TAG = 'METEOR CORDOVA DEBUG (autoupdate_cordova.js) ';\nvar log = function (msg) {\n  console.log(DEBUG_TAG + msg);\n};\n\n// This constant was picked by testing on iOS 7.1\n// We limit the number of concurrent downloads because iOS gets angry on the\n// application when a certain limit is exceeded and starts timing-out the\n// connections in 1-2 minutes which makes the whole HCP really slow.\nvar MAX_NUM_CONCURRENT_DOWNLOADS = 30;\nvar MAX_RETRY_COUNT = 5;\n\nvar autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova || \"unknown\";\n\n// The collection of acceptable client versions.\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function () {\n  return !! ClientVersions.findOne({\n    _id: 'version-cordova',\n    version: {$ne: autoupdateVersionCordova}\n  });\n};\n\nvar writeFile = function (directoryPath, fileName, content, cb) {\n  var fail = function (err) {\n    cb(new Error(\"Failed to write file: \", err), null);\n  };\n\n  window.resolveLocalFileSystemURL(directoryPath, function (dirEntry) {\n    var success = function (fileEntry) {\n      fileEntry.createWriter(function (writer) {\n        writer.onwrite = function (evt) {\n          var result = evt.target.result;\n          cb(null, result);\n        };\n        writer.onerror = fail;\n        writer.write(content);\n      }, fail);\n    };\n\n    dirEntry.getFile(fileName, {\n      create: true,\n      exclusive: false\n    }, success, fail);\n  }, fail);\n};\n\nvar restartServer = function (location) {\n  log('restartServer with location ' + location);\n  var fail = function (err) { log(\"Unexpected error in restartServer: \" + err.message) };\n  var httpd = cordova && cordova.plugins && cordova.plugins.CordovaUpdate;\n\n  if (! httpd) {\n    fail(new Error('no httpd'));\n    return;\n  }\n\n  var startServer = function (cordovajsRoot) {\n    httpd.startServer({\n      'www_root' : location,\n      'cordovajs_root': cordovajsRoot\n    }, function (url) {\n      if (Package.reload) {\n        Package.reload.Reload._reload();\n      } else {\n        window.location.reload();\n      }\n    }, fail);\n  };\n\n  httpd.getCordovajsRoot(function (cordovajsRoot) {\n    startServer(cordovajsRoot);\n  }, fail);\n};\n\nvar hasCalledReload = false;\nvar updating = false;\nvar localPathPrefix = null;\n\nvar onNewVersion = function () {\n  var ft = new FileTransfer();\n  var urlPrefix = Meteor.absoluteUrl() + '__cordova';\n  HTTP.get(urlPrefix + '/manifest.json', function (err, res) {\n    if (err || ! res.data) {\n      log('Failed to download the manifest ' + (err && err.message) + ' ' + (res && res.content));\n      return;\n    }\n\n    updating = true;\n    ensureLocalPathPrefix(_.bind(downloadNewVersion, null, res.data));\n  });\n};\n\nvar downloadNewVersion = function (program) {\n  var urlPrefix = Meteor.absoluteUrl() + '__cordova';\n  var manifest = _.clone(program.manifest);\n  var version = program.version;\n  var ft = new FileTransfer();\n\n  manifest.push({ url: '/index.html?' + Random.id() });\n\n  var versionPrefix = localPathPrefix + version;\n\n  var queue = [];\n  _.each(manifest, function (item) {\n    if (! item.url) return;\n\n    var url = item.url;\n    url = url.replace(/\\?.+$/, '');\n\n    queue.push(url);\n  });\n\n  var afterAllFilesDownloaded = _.after(queue.length, function () {\n    var wroteManifest = function (err) {\n      if (err) {\n        log(\"Failed to write manifest.json: \" + err);\n        // XXX do something smarter?\n        return;\n      }\n\n      // success! downloaded all sources and saved the manifest\n      // save the version string for atomicity\n      writeFile(localPathPrefix, 'version', version, function (err) {\n        if (err) {\n          log(\"Failed to write version: \" + err);\n          return;\n        }\n\n        // don't call reload twice!\n        if (! hasCalledReload) {\n          var location = uriToPath(localPathPrefix + version);\n          restartServer(location);\n        }\n      });\n    };\n\n    writeFile(versionPrefix, 'manifest.json',\n              JSON.stringify(program, undefined, 2), wroteManifest);\n  });\n\n  var downloadUrl = function (url) {\n    console.log(DEBUG_TAG + \"start downloading \" + url);\n    // Add a cache buster to ensure that we don't cache an old asset.\n    var uri = encodeURI(urlPrefix + url + '?' + Random.id());\n\n    // Try to download the file a few times.\n    var tries = 0;\n    var tryDownload = function () {\n      ft.download(uri, versionPrefix + encodeURI(url), function (entry) {\n        if (entry) {\n          console.log(DEBUG_TAG + \"done downloading \" + url);\n          // start downloading next queued url\n          if (queue.length)\n            downloadUrl(queue.shift());\n          afterAllFilesDownloaded();\n        }\n      }, function (err) {\n        // It failed, try again if we have tried less than 5 times.\n        if (tries++ < MAX_RETRY_COUNT) {\n          log(\"Download error, will retry (#\" + tries + \"): \" + uri);\n          tryDownload();\n        } else {\n          log('Download failed: ' + JSON.stringify(err) + \", source=\" + err.source + \", target=\" + err.target);\n        }\n      });\n    };\n\n    tryDownload();\n  };\n\n  _.times(Math.min(MAX_NUM_CONCURRENT_DOWNLOADS, queue.length), function () {\n    var nextUrl = queue.shift();\n    // XXX defer the next download so iOS doesn't rate limit us on concurrent\n    // downloads\n    Meteor.setTimeout(downloadUrl.bind(null, nextUrl), 50);\n  });\n};\n\nvar retry = new Retry({\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function () {\n  var appId = __meteor_runtime_config__.appId;\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError: function (err) {\n      Meteor._debug(\"autoupdate subscription failed:\", err);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    }\n  });\n  if (Package.reload) {\n    var checkNewVersionDocument = function (doc) {\n      var self = this;\n      if (doc.version !== autoupdateVersionCordova) {\n        onNewVersion();\n      }\n    };\n\n    var handle = ClientVersions.find({\n      _id: 'version-cordova'\n    }).observe({\n      added: checkNewVersionDocument,\n      changed: checkNewVersionDocument\n    });\n  }\n};\n\nMeteor.startup(function () {\n  clearAutoupdateCache(autoupdateVersionCordova);\n});\nMeteor.startup(Autoupdate._retrySubscription);\n\n\n// A helper that removes old directories left from previous autoupdates\nvar clearAutoupdateCache = function (currentVersion) {\n  ensureLocalPathPrefix(function () {\n    // Try to clean up our cache directory, make sure to scan the directory\n    // *before* loading the actual app. This ordering will prevent race\n    // conditions when the app code tries to download a new version before\n    // the old-cache removal has scanned the cache folder.\n    listDirectory(localPathPrefix, {dirsOnly: true}, function (err, names) {\n      // Couldn't get the list of dirs or risking to get into a race with an\n      // on-going update to disk.\n      if (err || updating) {\n        return;\n      }\n\n      _.each(names, function (name) {\n        // Skip the folder with the latest version\n        if (name === currentVersion)\n          return;\n\n        // remove everything else, as we don't want to keep too much cache\n        // around on disk\n        removeDirectory(localPathPrefix + name + '/', function (err) {\n          if (err) {\n            log('Failed to remove an old cache folder '\n                + name + ':' + err.message);\n          } else {\n            log('Successfully removed an old cache folder ' + name);\n          }\n        });\n      });\n    });\n  })\n};\n\n// Cordova File plugin helpers\nvar listDirectory = function (url, options, cb) {\n  if (typeof options === 'function')\n    cb = options, options = {};\n\n  var fail = function (err) { cb(err); };\n  window.resolveLocalFileSystemURL(url, function (entry) {\n    var reader = entry.createReader();\n    reader.readEntries(function (entries) {\n      var names = [];\n      _.each(entries, function (entry) {\n        if (! options.dirsOnly || entry.isDirectory)\n          names.push(entry.name);\n      });\n      cb(null, names);\n    }, fail);\n  }, fail);\n};\n\nvar removeDirectory = function (url, cb) {\n  var fail = function (err) {\n    cb(err);\n  };\n  window.resolveLocalFileSystemURL(url, function (entry) {\n    entry.removeRecursively(function () { cb(); }, fail);\n  }, fail);\n};\n\nvar uriToPath = function (uri) {\n  return decodeURI(uri).replace(/^file:\\/\\//g, '');\n};\n\nvar ensureLocalPathPrefix = function (cb) {\n  if (! localPathPrefix) {\n    if (! cordova.file.dataDirectory) {\n      // Since ensureLocalPathPrefix function is always called on\n      // Meteor.startup, all Cordova plugins should be ready.\n      // XXX Experiments have shown that it is not always the case, even when\n      // the cordova.file symbol is attached, properties like dataDirectory\n      // still can be null. Poll until we are sure the property is attached.\n      console.log(DEBUG_TAG + 'cordova.file.dataDirectory is null, retrying in 20ms');\n      Meteor.setTimeout(_.bind(ensureLocalPathPrefix, null, cb), 20);\n    } else {\n      localPathPrefix = cordova.file.dataDirectory + 'meteor/';\n      cb();\n    }\n  } else {\n    cb();\n  }\n};\n\n"]}}]