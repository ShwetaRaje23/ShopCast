[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nRouteController = Package['iron:router'].RouteController;\nRoute = Package['iron:router'].Route;\nRouter = Package['iron:router'].Router;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){Lists = new Mongo.Collection('lists');\n\n// Calculate a default name for a list in the form of 'List A'\nLists.defaultName = function() {\n  var nextLetter = 'A', nextName = 'List ' + nextLetter;\n  while (Lists.findOne({name: nextName})) {\n    // not going to be too smart here, can go past Z\n    nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n    nextName = 'List ' + nextLetter;\n  }\n\n  return nextName;\n};\n\nTodos = new Mongo.Collection('todos');\n\n}).call(this);\n","servePath":"/lib/collections.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/lib/collections.js","sourcesContent":["Lists = new Mongo.Collection('lists');\n\n// Calculate a default name for a list in the form of 'List A'\nLists.defaultName = function() {\n  var nextLetter = 'A', nextName = 'List ' + nextLetter;\n  while (Lists.findOne({name: nextName})) {\n    // not going to be too smart here, can go past Z\n    nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n    nextName = 'List ' + nextLetter;\n  }\n\n  return nextName;\n};\n\nTodos = new Mongo.Collection('todos');\n"]}},{"type":"js","data":"(function(){Router.configure({\n  // we use the  appBody template to define the layout for the entire app\n  layoutTemplate: 'appBody',\n\n  // the appNotFound template is used for unknown routes and missing lists\n  notFoundTemplate: 'appNotFound',\n\n  // show the appLoading template whilst the subscriptions below load their data\n  loadingTemplate: 'appLoading',\n\n  // wait on the following subscriptions before rendering the page to ensure\n  // the data it's expecting is present\n  waitOn: function() {\n    return [\n      Meteor.subscribe('publicLists'),\n      Meteor.subscribe('privateLists')\n    ];\n  }\n});\n\ndataReadyHold = null;\n\nif (Meteor.isClient) {\n  // Keep showing the launch screen on mobile devices until we have loaded\n  // the app's data\n  dataReadyHold = LaunchScreen.hold();\n\n  // Show the loading screen on desktop\n  Router.onBeforeAction('loading', {except: ['join', 'signin']});\n  Router.onBeforeAction('dataNotFound', {except: ['join', 'signin']});\n}\n\nRouter.route('join');\nRouter.route('signin');\n\nRouter.route('listsShow', {\n  path: '/lists/:_id',\n  // subscribe to todos before the page is rendered but don't wait on the\n  // subscription, we'll just render the items as they arrive\n  onBeforeAction: function () {\n    this.todosHandle = Meteor.subscribe('todos', this.params._id);\n\n    if (this.ready()) {\n      // Handle for launch screen defined in app-body.js\n      dataReadyHold.release();\n    }\n  },\n  data: function () {\n    return Lists.findOne(this.params._id);\n  },\n  action: function () {\n    this.render();\n  }\n});\n\nRouter.route('home', {\n  path: '/',\n  action: function() {\n    Router.go('listsShow', Lists.findOne());\n  }\n});\n\n}).call(this);\n","servePath":"/lib/router.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/router.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/lib/router.js","sourcesContent":["Router.configure({\n  // we use the  appBody template to define the layout for the entire app\n  layoutTemplate: 'appBody',\n\n  // the appNotFound template is used for unknown routes and missing lists\n  notFoundTemplate: 'appNotFound',\n\n  // show the appLoading template whilst the subscriptions below load their data\n  loadingTemplate: 'appLoading',\n\n  // wait on the following subscriptions before rendering the page to ensure\n  // the data it's expecting is present\n  waitOn: function() {\n    return [\n      Meteor.subscribe('publicLists'),\n      Meteor.subscribe('privateLists')\n    ];\n  }\n});\n\ndataReadyHold = null;\n\nif (Meteor.isClient) {\n  // Keep showing the launch screen on mobile devices until we have loaded\n  // the app's data\n  dataReadyHold = LaunchScreen.hold();\n\n  // Show the loading screen on desktop\n  Router.onBeforeAction('loading', {except: ['join', 'signin']});\n  Router.onBeforeAction('dataNotFound', {except: ['join', 'signin']});\n}\n\nRouter.route('join');\nRouter.route('signin');\n\nRouter.route('listsShow', {\n  path: '/lists/:_id',\n  // subscribe to todos before the page is rendered but don't wait on the\n  // subscription, we'll just render the items as they arrive\n  onBeforeAction: function () {\n    this.todosHandle = Meteor.subscribe('todos', this.params._id);\n\n    if (this.ready()) {\n      // Handle for launch screen defined in app-body.js\n      dataReadyHold.release();\n    }\n  },\n  data: function () {\n    return Lists.findOne(this.params._id);\n  },\n  action: function () {\n    this.render();\n  }\n});\n\nRouter.route('home', {\n  path: '/',\n  action: function() {\n    Router.go('listsShow', Lists.findOne());\n  }\n});\n"]}},{"type":"js","data":"(function(){// if the database is empty on server start, create some sample data.\nMeteor.startup(function () {\n  if (Lists.find().count() === 0) {\n    var data = [\n      {name: \"Meteor Principles\",\n       items: [\"Data on the Wire\",\n         \"One Language\",\n         \"Database Everywhere\",\n         \"Latency Compensation\",\n         \"Full Stack Reactivity\",\n         \"Embrace the Ecosystem\",\n         \"Simplicity Equals Productivity\"\n       ]\n      },\n      {name: \"Languages\",\n       items: [\"Lisp\",\n         \"C\",\n         \"C++\",\n         \"Python\",\n         \"Ruby\",\n         \"JavaScript\",\n         \"Scala\",\n         \"Erlang\",\n         \"6502 Assembly\"\n         ]\n      },\n      {name: \"Favorite Scientists\",\n       items: [\"Ada Lovelace\",\n         \"Grace Hopper\",\n         \"Marie Curie\",\n         \"Carl Friedrich Gauss\",\n         \"Nikola Tesla\",\n         \"Claude Shannon\"\n       ]\n      }\n    ];\n\n    var timestamp = (new Date()).getTime();\n    _.each(data, function(list) {\n      var list_id = Lists.insert({name: list.name,\n        incompleteCount: list.items.length});\n\n      _.each(list.items, function(text) {\n        Todos.insert({listId: list_id,\n                      text: text,\n                      createdAt: new Date(timestamp)});\n        timestamp += 1; // ensure unique timestamp.\n      });\n    });\n  }\n});\n\n}).call(this);\n","servePath":"/server/bootstrap.js","sourceMap":{"version":3,"sources":["/server/bootstrap.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/server/bootstrap.js","sourcesContent":["// if the database is empty on server start, create some sample data.\nMeteor.startup(function () {\n  if (Lists.find().count() === 0) {\n    var data = [\n      {name: \"Meteor Principles\",\n       items: [\"Data on the Wire\",\n         \"One Language\",\n         \"Database Everywhere\",\n         \"Latency Compensation\",\n         \"Full Stack Reactivity\",\n         \"Embrace the Ecosystem\",\n         \"Simplicity Equals Productivity\"\n       ]\n      },\n      {name: \"Languages\",\n       items: [\"Lisp\",\n         \"C\",\n         \"C++\",\n         \"Python\",\n         \"Ruby\",\n         \"JavaScript\",\n         \"Scala\",\n         \"Erlang\",\n         \"6502 Assembly\"\n         ]\n      },\n      {name: \"Favorite Scientists\",\n       items: [\"Ada Lovelace\",\n         \"Grace Hopper\",\n         \"Marie Curie\",\n         \"Carl Friedrich Gauss\",\n         \"Nikola Tesla\",\n         \"Claude Shannon\"\n       ]\n      }\n    ];\n\n    var timestamp = (new Date()).getTime();\n    _.each(data, function(list) {\n      var list_id = Lists.insert({name: list.name,\n        incompleteCount: list.items.length});\n\n      _.each(list.items, function(text) {\n        Todos.insert({listId: list_id,\n                      text: text,\n                      createdAt: new Date(timestamp)});\n        timestamp += 1; // ensure unique timestamp.\n      });\n    });\n  }\n});\n"]}},{"type":"js","data":"(function(){Meteor.publish('publicLists', function() {\n  return Lists.find({userId: {$exists: false}});\n});\n\nMeteor.publish('privateLists', function() {\n  if (this.userId) {\n    return Lists.find({userId: this.userId});\n  } else {\n    this.ready();\n  }\n});\n\nMeteor.publish('todos', function(listId) {\n  check(listId, String);\n\n  return Todos.find({listId: listId});\n});\n\n}).call(this);\n","servePath":"/server/publish.js","sourceMap":{"version":3,"sources":["/server/publish.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/server/publish.js","sourcesContent":["Meteor.publish('publicLists', function() {\n  return Lists.find({userId: {$exists: false}});\n});\n\nMeteor.publish('privateLists', function() {\n  if (this.userId) {\n    return Lists.find({userId: this.userId});\n  } else {\n    this.ready();\n  }\n});\n\nMeteor.publish('todos', function(listId) {\n  check(listId, String);\n\n  return Todos.find({listId: listId});\n});\n"]}}]