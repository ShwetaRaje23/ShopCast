{"version":3,"sources":["meteor://ðŸ’»app/packages/iron_dynamic-template/packages/iron_dynamic-template.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/iron_dynamic-template.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron:dynamic-template/version_conflict_error.js                                                       //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nif (Package['cmather:iron-dynamic-template']) {                                                                   // 1\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                             // 17\n                                                                                                                  // 18\n}                                                                                                                 // 19\n                                                                                                                  // 20\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/iron:dynamic-template/dynamic_template.js                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n/*****************************************************************************/                                   // 1\n/* Imports */                                                                                                     // 2\n/*****************************************************************************/                                   // 3\ndebug = Iron.utils.debug('iron:dynamic-template');                                                                // 4\ncamelCase = Iron.utils.camelCase;                                                                                 // 5\n                                                                                                                  // 6\n/*****************************************************************************/                                   // 7\n/* Helpers */                                                                                                     // 8\n/*****************************************************************************/                                   // 9\ntypeOf = function (value) {                                                                                       // 10\n  return Object.prototype.toString.call(value);                                                                   // 11\n};                                                                                                                // 12\n                                                                                                                  // 13\n/*****************************************************************************/                                   // 14\n/* DynamicTemplate */                                                                                             // 15\n/*****************************************************************************/                                   // 16\n                                                                                                                  // 17\n/**                                                                                                               // 18\n * Render a component to the page whose template and data context can change                                      // 19\n * dynamically, either from code or from helpers.                                                                 // 20\n *                                                                                                                // 21\n */                                                                                                               // 22\nDynamicTemplate = function (options) {                                                                            // 23\n  this.options = options = options || {};                                                                         // 24\n  this._template = options.template;                                                                              // 25\n  this._defaultTemplate = options.defaultTemplate;                                                                // 26\n  this._content = options.content;                                                                                // 27\n  this._data = options.data;                                                                                      // 28\n  this._templateDep = new Deps.Dependency;                                                                        // 29\n  this._dataDep = new Deps.Dependency;                                                                            // 30\n  this._hasControllerDep = new Deps.Dependency;                                                                   // 31\n  this._hooks = {};                                                                                               // 32\n  this._controller = new Blaze.ReactiveVar;                                                                       // 33\n  this.name = options.name || 'DynamicTemplate';                                                                  // 34\n                                                                                                                  // 35\n  // has the Blaze.View been created?                                                                             // 36\n  this.isCreated = false;                                                                                         // 37\n                                                                                                                  // 38\n  // has the Blaze.View been destroyed and not created again?                                                     // 39\n  this.isDestroyed = false;                                                                                       // 40\n};                                                                                                                // 41\n                                                                                                                  // 42\n/**                                                                                                               // 43\n * Get or set the template.                                                                                       // 44\n */                                                                                                               // 45\nDynamicTemplate.prototype.template = function (value) {                                                           // 46\n  if (arguments.length === 1 && value !== this._template) {                                                       // 47\n    this._template = value;                                                                                       // 48\n    this._templateDep.changed();                                                                                  // 49\n    return;                                                                                                       // 50\n  }                                                                                                               // 51\n                                                                                                                  // 52\n  if (arguments.length > 0)                                                                                       // 53\n    return;                                                                                                       // 54\n                                                                                                                  // 55\n  this._templateDep.depend();                                                                                     // 56\n                                                                                                                  // 57\n  // do we have a template?                                                                                       // 58\n  if (this._template)                                                                                             // 59\n    return (typeof this._template === 'function') ? this._template() : this._template;                            // 60\n                                                                                                                  // 61\n  // no template? ok let's see if we have a default one set                                                       // 62\n  if (this._defaultTemplate)                                                                                      // 63\n    return (typeof this._defaultTemplate === 'function') ? this._defaultTemplate() : this._defaultTemplate;       // 64\n};                                                                                                                // 65\n                                                                                                                  // 66\n/**                                                                                                               // 67\n * Get or set the default template.                                                                               // 68\n *                                                                                                                // 69\n * This function does not change any dependencies.                                                                // 70\n */                                                                                                               // 71\nDynamicTemplate.prototype.defaultTemplate = function (value) {                                                    // 72\n  if (arguments.length === 1)                                                                                     // 73\n    this._defaultTemplate = value;                                                                                // 74\n  else                                                                                                            // 75\n    return this._defaultTemplate;                                                                                 // 76\n};                                                                                                                // 77\n                                                                                                                  // 78\n/**                                                                                                               // 79\n * Clear the template and data contexts.                                                                          // 80\n */                                                                                                               // 81\nDynamicTemplate.prototype.clear = function () {                                                                   // 82\n  //XXX do we need to clear dependencies here too?                                                                // 83\n  this._template = undefined;                                                                                     // 84\n  this._data = undefined;                                                                                         // 85\n  this._templateDep.changed();                                                                                    // 86\n};                                                                                                                // 87\n                                                                                                                  // 88\n/**                                                                                                               // 89\n * Get or set the data context.                                                                                   // 90\n */                                                                                                               // 91\nDynamicTemplate.prototype.data = function (value) {                                                               // 92\n  if (arguments.length === 1 && value !== this._data) {                                                           // 93\n    this._data = value;                                                                                           // 94\n    this._dataDep.changed();                                                                                      // 95\n    return;                                                                                                       // 96\n  }                                                                                                               // 97\n                                                                                                                  // 98\n  this._dataDep.depend();                                                                                         // 99\n  return typeof this._data === 'function' ? this._data() : this._data;                                            // 100\n};                                                                                                                // 101\n                                                                                                                  // 102\n/**                                                                                                               // 103\n * Create the view if it hasn't been created yet.                                                                 // 104\n */                                                                                                               // 105\nDynamicTemplate.prototype.create = function (options) {                                                           // 106\n  var self = this;                                                                                                // 107\n                                                                                                                  // 108\n  if (this.isCreated) {                                                                                           // 109\n    throw new Error(\"DynamicTemplate view is already created\");                                                   // 110\n  }                                                                                                               // 111\n                                                                                                                  // 112\n  this.isCreated = true;                                                                                          // 113\n  this.isDestroyed = false;                                                                                       // 114\n                                                                                                                  // 115\n  var templateVar = Blaze.ReactiveVar(null);                                                                      // 116\n                                                                                                                  // 117\n  var view = Blaze.View('DynamicTemplate', function () {                                                          // 118\n    var thisView = this;                                                                                          // 119\n                                                                                                                  // 120\n    // create the template dependency here because we need the entire                                             // 121\n    // dynamic template to re-render if the template changes, including                                           // 122\n    // the Blaze.With view.                                                                                       // 123\n    var template = templateVar.get();                                                                             // 124\n                                                                                                                  // 125\n    return Blaze.With(function () {                                                                               // 126\n      // NOTE: This will rerun anytime the data function invalidates this                                         // 127\n      // computation OR if created from an inclusion helper (see note below) any                                  // 128\n      // time any of the argument functions invlidate the computation. For                                        // 129\n      // example, when the template changes this function will rerun also. But                                    // 130\n      // it's probably generally ok. The more serious use case is to not                                          // 131\n      // re-render the entire template every time the data context changes.                                       // 132\n      var result = self.data();                                                                                   // 133\n                                                                                                                  // 134\n      if (typeof result !== 'undefined')                                                                          // 135\n        // looks like data was set directly on this dynamic template                                              // 136\n        return result;                                                                                            // 137\n      else                                                                                                        // 138\n        // return the first parent data context that is not inclusion arguments                                   // 139\n        return DynamicTemplate.getParentDataContext(thisView);                                                    // 140\n    }, function () {                                                                                              // 141\n      // NOTE: When DynamicTemplate is used from a template inclusion helper                                      // 142\n      // like this {{> DynamicTemplate template=getTemplate data=getData}} the                                    // 143\n      // function below will rerun any time the getData function invalidates the                                  // 144\n      // argument data computation.                                                                               // 145\n      var tmpl = null;                                                                                            // 146\n                                                                                                                  // 147\n      // is it a template name like \"MyTemplate\"?                                                                 // 148\n      if (typeof template === 'string') {                                                                         // 149\n        tmpl = Template[template];                                                                                // 150\n                                                                                                                  // 151\n        if (!tmpl)                                                                                                // 152\n          // as a fallback double check the user didn't actually define                                           // 153\n          // a camelCase version of the template.                                                                 // 154\n          tmpl = Template[camelCase(template)];                                                                   // 155\n                                                                                                                  // 156\n        if (!tmpl)                                                                                                // 157\n          throw new Error(\"Couldn't find a template named \" + JSON.stringify(template) + \" or \" + JSON.stringify(camelCase(template))+ \". Are you sure you defined it?\");\n      } else if (typeOf(template) === '[object Object]') {                                                        // 159\n        // or maybe a view already?                                                                               // 160\n        tmpl = template;                                                                                          // 161\n      } else if (typeof self._content !== 'undefined') {                                                          // 162\n        // or maybe its block content like                                                                        // 163\n        // {{#DynamicTemplate}}                                                                                   // 164\n        //  Some block                                                                                            // 165\n        // {{/DynamicTemplate}}                                                                                   // 166\n        tmpl = self._content;                                                                                     // 167\n      }                                                                                                           // 168\n                                                                                                                  // 169\n      return tmpl;                                                                                                // 170\n    });                                                                                                           // 171\n  });                                                                                                             // 172\n                                                                                                                  // 173\n  view.onViewCreated(function () {                                                                                // 174\n    this.autorun(function () {                                                                                    // 175\n      templateVar.set(self.template());                                                                           // 176\n    });                                                                                                           // 177\n  });                                                                                                             // 178\n                                                                                                                  // 179\n  // wire up the view lifecycle callbacks                                                                         // 180\n  _.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {                // 181\n    view[hook](function () {                                                                                      // 182\n      // \"this\" is the view instance                                                                              // 183\n      self._runHooks(hook, this);                                                                                 // 184\n    });                                                                                                           // 185\n  });                                                                                                             // 186\n                                                                                                                  // 187\n  view._onViewRendered(function () {                                                                              // 188\n    // avoid inserting the view twice by accident.                                                                // 189\n    self.isInserted = true;                                                                                       // 190\n  });                                                                                                             // 191\n                                                                                                                  // 192\n  this.view = view;                                                                                               // 193\n  view.__dynamicTemplate__ = this;                                                                                // 194\n  view.name = this.name;                                                                                          // 195\n  return view;                                                                                                    // 196\n};                                                                                                                // 197\n                                                                                                                  // 198\n/**                                                                                                               // 199\n * Destroy the dynamic template, also destroying the view if it exists.                                           // 200\n */                                                                                                               // 201\nDynamicTemplate.prototype.destroy = function () {                                                                 // 202\n  if (this.isCreated) {                                                                                           // 203\n    Blaze.remove(this.view);                                                                                      // 204\n    this.view = null;                                                                                             // 205\n    this.isDestroyed = true;                                                                                      // 206\n    this.isCreated = false;                                                                                       // 207\n  }                                                                                                               // 208\n};                                                                                                                // 209\n                                                                                                                  // 210\n/**                                                                                                               // 211\n * View lifecycle hooks.                                                                                          // 212\n */                                                                                                               // 213\n_.each(['onViewCreated', 'onViewReady', '_onViewRendered', 'onViewDestroyed'], function (hook) {                  // 214\n  DynamicTemplate.prototype[hook] = function (cb) {                                                               // 215\n    var hooks = this._hooks[hook] = this._hooks[hook] || [];                                                      // 216\n    hooks.push(cb);                                                                                               // 217\n    return this;                                                                                                  // 218\n  };                                                                                                              // 219\n});                                                                                                               // 220\n                                                                                                                  // 221\nDynamicTemplate.prototype._runHooks = function (name, view) {                                                     // 222\n  var hooks = this._hooks[name] || [];                                                                            // 223\n  var hook;                                                                                                       // 224\n                                                                                                                  // 225\n  for (var i = 0; i < hooks.length; i++) {                                                                        // 226\n    hook = hooks[i];                                                                                              // 227\n    // keep the \"thisArg\" pointing to the view, but make the first parameter to                                   // 228\n    // the callback teh dynamic template instance.                                                                // 229\n    hook.call(view, this);                                                                                        // 230\n  }                                                                                                               // 231\n};                                                                                                                // 232\n                                                                                                                  // 233\n/**                                                                                                               // 234\n * Insert the Layout view into the dom.                                                                           // 235\n */                                                                                                               // 236\nDynamicTemplate.prototype.insert = function (options) {                                                           // 237\n  options = options || {};                                                                                        // 238\n                                                                                                                  // 239\n  if (this.isInserted)                                                                                            // 240\n    return;                                                                                                       // 241\n  this.isInserted = true;                                                                                         // 242\n                                                                                                                  // 243\n  var el = options.el || document.body;                                                                           // 244\n  var $el = $(el);                                                                                                // 245\n                                                                                                                  // 246\n  if ($el.length === 0)                                                                                           // 247\n    throw new Error(\"No element to insert layout into. Is your element defined? Try a Meteor.startup callback.\"); // 248\n                                                                                                                  // 249\n  if (!this.view)                                                                                                 // 250\n    this.create(options);                                                                                         // 251\n                                                                                                                  // 252\n  Blaze.render(this.view, $el[0], options.nextNode, options.parentView);                                          // 253\n                                                                                                                  // 254\n  return this;                                                                                                    // 255\n};                                                                                                                // 256\n                                                                                                                  // 257\n/**                                                                                                               // 258\n * Reactively return the value of the current controller.                                                         // 259\n */                                                                                                               // 260\nDynamicTemplate.prototype.getController = function () {                                                           // 261\n  return this._controller.get();                                                                                  // 262\n};                                                                                                                // 263\n                                                                                                                  // 264\n/**                                                                                                               // 265\n * Set the reactive value of the controller.                                                                      // 266\n */                                                                                                               // 267\nDynamicTemplate.prototype.setController = function (controller) {                                                 // 268\n  var didHaveController = !!this._hasController;                                                                  // 269\n  this._hasController = (typeof controller !== 'undefined');                                                      // 270\n                                                                                                                  // 271\n  if (didHaveController !== this._hasController)                                                                  // 272\n    this._hasControllerDep.changed();                                                                             // 273\n                                                                                                                  // 274\n  return this._controller.set(controller);                                                                        // 275\n};                                                                                                                // 276\n                                                                                                                  // 277\n/**                                                                                                               // 278\n * Reactively returns true if the template has a controller and false otherwise.                                  // 279\n */                                                                                                               // 280\nDynamicTemplate.prototype.hasController = function () {                                                           // 281\n  this._hasControllerDep.depend();                                                                                // 282\n  return this._hasController;                                                                                     // 283\n};                                                                                                                // 284\n                                                                                                                  // 285\n/*****************************************************************************/                                   // 286\n/* DynamicTemplate Static Methods */                                                                              // 287\n/*****************************************************************************/                                   // 288\n                                                                                                                  // 289\n/**                                                                                                               // 290\n * Get the first parent data context that are not inclusion arguments                                             // 291\n * (see above function). Note: This function can create reactive dependencies.                                    // 292\n */                                                                                                               // 293\nDynamicTemplate.getParentDataContext = function (view) {                                                          // 294\n  // start off with the parent.                                                                                   // 295\n  view = view.parentView;                                                                                         // 296\n                                                                                                                  // 297\n  while (view) {                                                                                                  // 298\n    if (view.name === 'with' && !view.__isTemplateWith)                                                           // 299\n      return view.dataVar.get();                                                                                  // 300\n    else                                                                                                          // 301\n      view = view.parentView;                                                                                     // 302\n  }                                                                                                               // 303\n                                                                                                                  // 304\n  return null;                                                                                                    // 305\n};                                                                                                                // 306\n                                                                                                                  // 307\n                                                                                                                  // 308\n/**                                                                                                               // 309\n * Get inclusion arguments, if any, from a view.                                                                  // 310\n *                                                                                                                // 311\n * Uses the __isTemplateWith property set when a parent view is used                                              // 312\n * specificially for a data context with inclusion args.                                                          // 313\n *                                                                                                                // 314\n * Inclusion arguments are arguments provided in a template like this:                                            // 315\n * {{> yield \"inclusionArg\"}}                                                                                     // 316\n * or                                                                                                             // 317\n * {{> yield region=\"inclusionArgValue\"}}                                                                         // 318\n */                                                                                                               // 319\nDynamicTemplate.getInclusionArguments = function (view) {                                                         // 320\n  var parent = view && view.parentView;                                                                           // 321\n                                                                                                                  // 322\n  if (!parent)                                                                                                    // 323\n    return null;                                                                                                  // 324\n                                                                                                                  // 325\n  if (parent.__isTemplateWith)                                                                                    // 326\n    return parent.dataVar.get();                                                                                  // 327\n                                                                                                                  // 328\n  return null;                                                                                                    // 329\n};                                                                                                                // 330\n                                                                                                                  // 331\n/**                                                                                                               // 332\n * Given a view, return a function that can be used to access argument values at                                  // 333\n * the time the view was rendered. There are two key benefits:                                                    // 334\n *                                                                                                                // 335\n * 1. Save the argument data at the time of rendering. When you use lookup(...)                                   // 336\n *    it starts from the current data context which can change.                                                   // 337\n * 2. Defer creating a dependency on inclusion arguments until later.                                             // 338\n *                                                                                                                // 339\n * Example:                                                                                                       // 340\n *                                                                                                                // 341\n *   {{> MyTemplate template=\"MyTemplate\"                                                                         // 342\n *   var args = DynamicTemplate.args(view);                                                                       // 343\n *   var tmplValue = args('template');                                                                            // 344\n *     => \"MyTemplate\"                                                                                            // 345\n */                                                                                                               // 346\nDynamicTemplate.args = function (view) {                                                                          // 347\n  return function (key) {                                                                                         // 348\n    var data = DynamicTemplate.getInclusionArguments(view);                                                       // 349\n                                                                                                                  // 350\n    if (data) {                                                                                                   // 351\n      if (key)                                                                                                    // 352\n        return data[key];                                                                                         // 353\n      else                                                                                                        // 354\n        return data;                                                                                              // 355\n    }                                                                                                             // 356\n                                                                                                                  // 357\n    return null;                                                                                                  // 358\n  };                                                                                                              // 359\n};                                                                                                                // 360\n                                                                                                                  // 361\n/**                                                                                                               // 362\n * Inherit from DynamicTemplate.                                                                                  // 363\n */                                                                                                               // 364\nDynamicTemplate.extend = function (props) {                                                                       // 365\n  return Iron.utils.extend(this, props);                                                                          // 366\n};                                                                                                                // 367\n                                                                                                                  // 368\n/*****************************************************************************/                                   // 369\n/* UI Helpers */                                                                                                  // 370\n/*****************************************************************************/                                   // 371\n                                                                                                                  // 372\nif (typeof Template !== 'undefined') {                                                                            // 373\n  UI.registerHelper('DynamicTemplate', new Template('DynamicTemplateHelper', function () {                        // 374\n    var args = DynamicTemplate.args(this);                                                                        // 375\n                                                                                                                  // 376\n    return new DynamicTemplate({                                                                                  // 377\n      data: function () { return args('data'); },                                                                 // 378\n      template: function () { return args('template'); },                                                         // 379\n      content: this.templateContentBlock                                                                          // 380\n    }).create();                                                                                                  // 381\n  }));                                                                                                            // 382\n}                                                                                                                 // 383\n                                                                                                                  // 384\n/*****************************************************************************/                                   // 385\n/* Namespacing */                                                                                                 // 386\n/*****************************************************************************/                                   // 387\nIron.DynamicTemplate = DynamicTemplate;                                                                           // 388\n                                                                                                                  // 389\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}