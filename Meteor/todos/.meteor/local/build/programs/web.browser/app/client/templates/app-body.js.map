{"version":3,"sources":["meteor://ðŸ’»app/client/templates/app-body.js"],"names":[],"mappings":"yfile":"/client/templates/app-body.js","sourcesContent":["var MENU_KEY = 'menuOpen';\nSession.setDefault(MENU_KEY, false);\n\nvar USER_MENU_KEY = 'userMenuOpen';\nSession.setDefault(USER_MENU_KEY, false);\n\nvar SHOW_CONNECTION_ISSUE_KEY = 'showConnectionIssue';\nSession.setDefault(SHOW_CONNECTION_ISSUE_KEY, false);\n\nvar CONNECTION_ISSUE_TIMEOUT = 5000;\n\nMeteor.startup(function () {\n  // set up a swipe left / right handler\n  $(document.body).touchwipe({\n    wipeLeft: function () {\n      Session.set(MENU_KEY, false);\n    },\n    wipeRight: function () {\n      Session.set(MENU_KEY, true);\n    },\n    preventDefaultEvents: false\n  });\n\n  // Only show the connection error box if it has been 5 seconds since\n  // the app started\n  setTimeout(function () {\n    // Launch screen handle created in lib/router.js\n    dataReadyHold.release();\n\n    // Show the connection error box\n    Session.set(SHOW_CONNECTION_ISSUE_KEY, true);\n  }, CONNECTION_ISSUE_TIMEOUT);\n});\n\nTemplate.appBody.onRendered(function() {\n  this.find('#content-container')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn(function () {\n          if (listFadeInHold) {\n            listFadeInHold.release();\n          }\n        });\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        $(this).remove();\n      });\n    }\n  };\n});\n\nTemplate.appBody.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes. #each looks at the _id property of it's\n  // items to know when to insert a new item and when to update an old one.\n  thisArray: function() {\n    return [this];\n  },\n  menuOpen: function() {\n    return Session.get(MENU_KEY) && 'menu-open';\n  },\n  cordova: function() {\n    return Meteor.isCordova && 'cordova';\n  },\n  emailLocalPart: function() {\n    var email = Meteor.user().emails[0].address;\n    return email.substring(0, email.indexOf('@'));\n  },\n  userMenuOpen: function() {\n    return Session.get(USER_MENU_KEY);\n  },\n  lists: function() {\n    return Lists.find();\n  },\n  activeListClass: function() {\n    var current = Router.current();\n    if (current.route.name === 'listsShow' && current.params._id === this._id) {\n      return 'active';\n    }\n  },\n  connected: function() {\n    if (Session.get(SHOW_CONNECTION_ISSUE_KEY)) {\n      return Meteor.status().connected;\n    } else {\n      return true;\n    }\n  }\n});\n\nTemplate.appBody.events({\n  'click .js-menu': function() {\n    Session.set(MENU_KEY, ! Session.get(MENU_KEY));\n  },\n\n  'click .content-overlay': function(event) {\n    Session.set(MENU_KEY, false);\n    event.preventDefault();\n  },\n\n  'click .js-user-menu': function(event) {\n    Session.set(USER_MENU_KEY, ! Session.get(USER_MENU_KEY));\n    // stop the menu from closing\n    event.stopImmediatePropagation();\n  },\n\n  'click #menu a': function() {\n    Session.set(MENU_KEY, false);\n  },\n\n  'click .js-logout': function() {\n    Meteor.logout();\n\n    // if we are on a private list, we'll need to go to a public one\n    var current = Router.current();\n    if (current.route.name === 'listsShow' && current.data().userId) {\n      Router.go('listsShow', Lists.findOne({userId: {$exists: false}}));\n    }\n    else {\n      Router.go('signin');\n    }\n  },\n\n  'click .js-details': function() {\n    // Meteor.logout();\n\n    // if we are on a private list, we'll need to go to a public one\n    Router.go('detail');\n    // var current = Router.current();\n    // if (current.route.name === 'listsShow' && current.data().userId) {\n    //   Router.go('listsShow', Lists.findOne({userId: {$exists: false}}));\n    // }\n    // else {\n    //   Router.go('signin');\n    // }\n  },\n\n  'click .js-new-list': function() {\n    var list = {name: Lists.defaultName(), incompleteCount: 0};\n    list._id = Lists.insert(list);\n\n    Router.go('listsShow', list);\n  }\n});\n"]}