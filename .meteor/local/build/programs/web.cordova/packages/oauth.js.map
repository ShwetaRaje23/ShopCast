{"version":3,"sources":["meteor://ðŸ’»app/packages/oauth/oauth_client.js","meteor://ðŸ’»app/packages/oauth/oauth_cordova.js","meteor://ðŸ’»app/packages/oauth/oauth_common.js","meteor://ðŸ’»app/packages/oauth/deprecated.js"],"names":[],"mappingsrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA,4F","file":"/packages/oauth.js","sourcesContent":["// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nvar credentialSecrets = {};\n\nOAuth = {};\n\nOAuth.showPopup = function (url, callback, dimensions) {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n};\n\n// Determine the login style (popup or redirect) for this login flow.\n//\n//\nOAuth._loginStyle = function (service, config, options) {\n\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n\n  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';\n\n  if (! _.contains([\"popup\", \"redirect\"], loginStyle))\n    throw new Error(\"Invalid login style: \" + loginStyle);\n\n  // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n\n  return loginStyle;\n};\n\nOAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {\n  var state = {\n    loginStyle: loginStyle,\n    credentialToken: credentialToken,\n    isCordova: Meteor.isCordova\n  };\n\n  if (loginStyle === 'redirect')\n    state.redirectUrl = redirectUrl || ('' + window.location);\n\n  // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n  return Base64.encode(JSON.stringify(state));\n};\n\n\n// At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {\n  Reload._onMigrate('oauth', function () {\n    return [true, {loginService: loginService, credentialToken: credentialToken}];\n  });\n  Reload._migrate(null, {immediateMigration: true});\n};\n\n// At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\nOAuth.getDataAfterRedirect = function () {\n  var migrationData = Reload._migrationData('oauth');\n\n  if (! (migrationData && migrationData.credentialToken))\n    return null;\n\n  var credentialToken = migrationData.credentialToken;\n  var key = OAuth._storageTokenPrefix + credentialToken;\n  var credentialSecret;\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n  return {\n    loginService: migrationData.loginService,\n    credentialToken: credentialToken,\n    credentialSecret: credentialSecret\n  };\n};\n\n// Launch an OAuth login flow.  For the popup login style, show the\n// popup.  For the redirect login style, save the credential token for\n// this login attempt in the reload migration data, and redirect to\n// the service for the login.\n//\n// options:\n//  loginService: \"facebook\", \"google\", etc.\n//  loginStyle: \"popup\" or \"redirect\"\n//  loginUrl: The URL at the login service provider to start the OAuth flow.\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup\n//    is closed and we have the credential from the login service.\n//  credentialToken: our identifier for this login flow.\n//\nOAuth.launchLogin = function (options) {\n  if (! options.loginService)\n    throw new Error('loginService required');\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(\n      options.loginUrl,\n      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),\n      options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n};\n\n// XXX COMPAT WITH 0.7.0.1\n// Private interface but probably used by many oauth clients in atmosphere.\nOAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {\n  OAuth.showPopup(\n    url,\n    _.bind(callback, null, credentialToken),\n    dimensions\n  );\n};\n\n// Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\nOAuth._handleCredentialSecret = function (credentialToken, secret) {\n  check(credentialToken, String);\n  check(secret, String);\n  if (! _.has(credentialSecrets,credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n};\n\n// Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\nOAuth._retrieveCredentialSecret = function (credentialToken) {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  var secret = credentialSecrets[credentialToken];\n  if (! secret) {\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n  return secret;\n};\n","// Cordova specific code for the OAuth package.\n\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = function (url, callback, dimensions) {\n  var fail = function (err) {\n    Meteor._debug(\"Error from OAuth popup: \" + JSON.stringify(err));\n  };\n\n  // When running on an android device, we sometimes see the\n  // `pageLoaded` callback fire twice for the final page in the OAuth\n  // popup, even though the page only loads once. This is maybe an\n  // Android bug or maybe something intentional about how onPageFinished\n  // works that we don't understand and isn't well-documented.\n  var oauthFinished = false;\n\n  var pageLoaded = function (event) {\n    if (oauthFinished) {\n      return;\n    }\n\n    if (event.url.indexOf(Meteor.absoluteUrl('_oauth')) === 0) {\n      var splitUrl = event.url.split(\"#\");\n      var hashFragment = splitUrl[1];\n\n      if (! hashFragment) {\n        throw new Error(\"No hash fragment in OAuth popup?\");\n      }\n\n      var credentials = JSON.parse(decodeURIComponent(hashFragment));\n      OAuth._handleCredentialSecret(credentials.credentialToken,\n                                    credentials.credentialSecret);\n\n      oauthFinished = true;\n\n      // On iOS, this seems to prevent \"Warning: Attempt to dismiss from\n      // view controller <MainViewController: ...> while a presentation\n      // or dismiss is in progress\". My guess is that the last\n      // navigation of the OAuth popup is still in progress while we try\n      // to close the popup. See\n      // https://issues.apache.org/jira/browse/CB-2285.\n      //\n      // XXX Can we make this timeout smaller?\n      setTimeout(function () {\n        popup.close();\n        callback();\n      }, 100);\n    }\n  };\n\n  var onExit = function () {\n    popup.removeEventListener('loadstop', pageLoaded);\n    popup.removeEventListener('loaderror', fail);\n    popup.removeEventListener('exit', onExit);\n  };\n\n  var popup = window.open(url, '_blank', 'location=yes,hidden=yes');\n  popup.addEventListener('loadstop', pageLoaded);\n  popup.addEventListener('loaderror', fail);\n  popup.addEventListener('exit', onExit);\n  popup.show();\n\n};\n","OAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\n\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {\n  // XXX COMPAT WITH 0.9.0\n  // The redirect URI used to have a \"?close\" query argument.  We\n  // detect whether we need to be backwards compatible by checking for\n  // the absence of the `loginStyle` field, which wasn't used in the\n  // code which had the \"?close\" argument.\n  // This logic is duplicated in the tool so that the tool can do OAuth\n  // flow with <= 0.9.0 servers (tools/auth.js).\n  var query = config.loginStyle ? null : \"close\";\n\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  var isCordova = false;\n  var isAndroid = false;\n  if (params) {\n    params = _.clone(params);\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n    if (_.isEmpty(params)) {\n      params = undefined;\n    }\n  }\n\n  if (Meteor.isServer && isCordova) {\n    var rootUrl = process.env.MOBILE_ROOT_URL ||\n          __meteor_runtime_config__.ROOT_URL;\n\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      var url = Npm.require(\"url\");\n      var parsedRootUrl = url.parse(rootUrl);\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n      rootUrl = url.format(parsedRootUrl);\n    }\n\n    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl: rootUrl\n    });\n  }\n\n  return URL._constructUrl(\n    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),\n    query,\n    params);\n};\n","// XXX COMPAT WITH 0.8.0\n\nOauth = OAuth;\n"]}