{"version":3,"sources":["meteor://ðŸ’»app/client/javascripts/ask.js"],"names":[],"mappings":"yfile":"/client/javascripts/ask.js","sourcesContent":["var EDITING_KEY = 'editingList';\nSession.setDefault(EDITING_KEY, false);\n\n// Track if this is the first time the list template is rendered\nvar firstRender = true;\nvar listRenderHold = LaunchScreen.hold();\nlistFadeInHold = null;\n\nTemplate.ask.onRendered(function() {\n  if (firstRender) {\n    // Released in app-body.js\n    listFadeInHold = LaunchScreen.hold();\n\n    // Handle for launch screen defined in app-body.js\n    listRenderHold.release();\n\n    firstRender = false;\n    console.log(firstRender);\n    alert('Page rendered!');\n    var requesteremail = Meteor.user()['emails'][0]['address'];\n    var requestername = requesteremail.substring(0, requesteremail.indexOf('@'));\n\n\n    Request.insert({\n      castId: '',\n      username: requestername,\n      createdAt: new Date(),\n      approved: false\n    });\n    Session.set('currentrequestid', Request.findOne({username: requestername})._id);\n  }\n\n  this.find('.js-title-nav')._uihooks = {\n    insertElement: function(node, next) {\n      $(node)\n        .hide()\n        .insertBefore(next)\n        .fadeIn();\n    },\n    removeElement: function(node) {\n      $(node).fadeOut(function() {\n        this.remove();\n      });\n    }\n  };\n});\n\nTemplate.ask.helpers({\n  editing: function() {\n    return Session.get(EDITING_KEY);\n  },\n\n  todosReady: function() {\n    return Router.current().todosHandle.ready();\n    //return true;\n  },\n\n  todos: function(castId) {\n    console.log(castId);\n    return Todos.find({castId: castId});\n  }\n});\n\nvar editList = function(list, template) {\n  Session.set(EDITING_KEY, true);\n\n  // force the template to redraw based on the reactive change\n  Tracker.flush();\n  template.$('.js-edit-form input[type=text]').focus();\n};\n\nvar saveList = function(list, template) {\n  Session.set(EDITING_KEY, false);\n  Lists.update(list._id, {$set: {name: template.$('[name=name]').val()}});\n}\n\nvar deleteList = function(list) {\n  // ensure the last public list cannot be deleted.\n  if (! list.userId && Lists.find({userId: {$exists: false}}).count() === 1) {\n    return alert(\"Sorry, you cannot delete the final public list!\");\n  }\n\n  var message = \"Are you sure you want to delete the list \" + list.name + \"?\";\n  if (confirm(message)) {\n    // we must remove each item individually from the client\n    Todos.find({listId: list._id}).forEach(function(todo) {\n      Todos.remove(todo._id);\n    });\n    Lists.remove(list._id);\n    Router.go('listsShow', Lists.findOne());\n    //Router.go('home');\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar toggleListPrivacy = function(list) {\n  if (! Meteor.user()) {\n    return alert(\"Please sign in or create an account to make private lists.\");\n  }\n\n  if (list.userId) {\n    Lists.update(list._id, {$unset: {userId: true}});\n  } else {\n    // ensure the last public list cannot be made private\n    if (Lists.find({userId: {$exists: false}}).count() === 1) {\n      return alert(\"Sorry, you cannot make the final public list private!\");\n    }\n\n    Lists.update(list._id, {$set: {userId: Meteor.userId()}});\n  }\n};\n\nTemplate.ask.events({\n  'click .js-cancel': function() {\n    Session.set(EDITING_KEY, false);\n  },\n\n  'keydown input[type=text]': function(event) {\n    // ESC\n    if (27 === event.which) {\n      event.preventDefault();\n      $(event.target).blur();\n    }\n  },\n\n  'blur input[type=text]': function(event, template) {\n    // if we are still editing (we haven't just clicked the cancel button)\n    if (Session.get(EDITING_KEY))\n      saveList(this, template);\n  },\n\n  'submit .js-edit-form': function(event, template) {\n    event.preventDefault();\n    saveList(this, template);\n  },\n\n  // handle mousedown otherwise the blur handler above will swallow the click\n  // on iOS, we still require the click event so handle both\n  'mousedown .js-cancel, click .js-cancel': function(event) {\n    event.preventDefault();\n    Session.set(EDITING_KEY, false);\n  },\n\n  'change .list-edit': function(event, template) {\n    if ($(event.target).val() === 'edit') {\n      editList(this, template);\n    } else if ($(event.target).val() === 'delete') {\n      deleteList(this, template);\n    } else {\n      toggleListPrivacy(this, template);\n    }\n\n    event.target.selectedIndex = 0;\n  },\n\n  'click .js-edit-list': function(event, template) {\n    editList(this, template);\n  },\n\n  'click .js-toggle-list-privacy': function(event, template) {\n    toggleListPrivacy(this, template);\n  },\n\n  'click .js-delete-list': function(event, template) {\n    deleteList(this, template);\n  },\n\n  'click .js-todo-add': function(event, template) {\n    template.$('.js-todo-new input').focus();\n  },\n\n  'click .send-request': function(event){\n    //alert('click!');\n    Request.update(Session.get('currentrequestid'), {\n      $set: {castId: this._id}\n    });\n    Router.go('/feed')\n  },\n\n\n  'submit .js-todo-new': function(event) {\n    event.preventDefault();\n\n    //alert('hey');\n    var itemname = $('#itemname').val();\n    var itemquantity = $('#itemquantity').val();\n    var itemprice = $('#itemprice').val();\n\n    if(!itemname || !itemquantity || !itemprice){\n      return;\n    }\n\n    // var $input = $(event.target).find('[type=text]');\n    // if (! $input.val())\n    //   return;\n    var requesteremail = Meteor.user()['emails'][0]['address'];\n    var requestername = requesteremail.substring(0, requesteremail.indexOf('@'));\n    console.log(Session.get('currentrequestid'));\n    Todos.insert({\n      castId: this._id,\n      requestId: Session.get('currentrequestid'),\n      username: requestername,\n      itemname: itemname,\n      itemquantity: itemquantity,\n      itemprice: itemprice,\n      createdAt: new Date()\n    });\n    alert('Todo inserted');\n    $('#itemname').val('');\n    $('#itemquantity').val('');\n    $('#itemprice').val('');\n    //Lists.update(this._id, {$inc: {incompleteCount: 1}});\n    //$input.val('');\n  }\n});\n"]}