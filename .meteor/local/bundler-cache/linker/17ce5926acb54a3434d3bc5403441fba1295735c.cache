[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar HTML = Package.htmljs.HTML;\nvar Iron = Package['iron:core'].Iron;\n\n/* Package-scope variables */\nvar Utils, hasOld, Route, paramParts, RouteController, IronRouter, IronLocation, href, setState, Router, WaitList;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/iron_router/packages/iron_router.js                                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n(function () {                                                                                               // 1\n                                                                                                             // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                    //     // 4\n// packages/iron:router/lib/utils.js                                                                  //     // 5\n//                                                                                                    //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                      //     // 8\n/**                                                                                                   // 1   // 9\n * Utility methods available privately to the package.                                                // 2   // 10\n */                                                                                                   // 3   // 11\n                                                                                                      // 4   // 12\nUtils = {};                                                                                           // 5   // 13\n                                                                                                      // 6   // 14\n/**                                                                                                   // 7   // 15\n * global object on node or window object in the browser.                                             // 8   // 16\n */                                                                                                   // 9   // 17\n                                                                                                      // 10  // 18\nUtils.global = (function () { return this; })();                                                      // 11  // 19\n                                                                                                      // 12  // 20\n/**                                                                                                   // 13  // 21\n * Assert that the given condition is truthy.                                                         // 14  // 22\n *                                                                                                    // 15  // 23\n * @param {Boolean} condition The boolean condition to test for truthiness.                           // 16  // 24\n * @param {String} msg The error message to show if the condition is falsy.                           // 17  // 25\n */                                                                                                   // 18  // 26\n                                                                                                      // 19  // 27\nUtils.assert = function (condition, msg) {                                                            // 20  // 28\n  if (!condition)                                                                                     // 21  // 29\n    throw new Error(msg);                                                                             // 22  // 30\n};                                                                                                    // 23  // 31\n                                                                                                      // 24  // 32\nvar warn = function (msg) {                                                                           // 25  // 33\n  if (!Router || Router.options.supressWarnings !== true) {                                           // 26  // 34\n    console && console.warn && console.warn(msg);                                                     // 27  // 35\n  }                                                                                                   // 28  // 36\n};                                                                                                    // 29  // 37\n                                                                                                      // 30  // 38\nUtils.warn = function (condition, msg) {                                                              // 31  // 39\n  if (!condition)                                                                                     // 32  // 40\n    warn(msg);                                                                                        // 33  // 41\n};                                                                                                    // 34  // 42\n                                                                                                      // 35  // 43\n/**                                                                                                   // 36  // 44\n * deprecatation notice to the user which can be a string or object                                   // 37  // 45\n * of the form:                                                                                       // 38  // 46\n *                                                                                                    // 39  // 47\n * {                                                                                                  // 40  // 48\n *  name: 'somePropertyOrMethod',                                                                     // 41  // 49\n *  where: 'RouteController',                                                                         // 42  // 50\n *  instead: 'someOtherPropertyOrMethod',                                                             // 43  // 51\n *  message: ':name is deprecated. Please use :instead instead'                                       // 44  // 52\n * }                                                                                                  // 45  // 53\n */                                                                                                   // 46  // 54\nUtils.notifyDeprecated = function (info) {                                                            // 47  // 55\n  var name;                                                                                           // 48  // 56\n  var instead;                                                                                        // 49  // 57\n  var message;                                                                                        // 50  // 58\n  var where;                                                                                          // 51  // 59\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";              // 52  // 60\n                                                                                                      // 53  // 61\n  if (_.isObject(info)) {                                                                             // 54  // 62\n    name = info.name;                                                                                 // 55  // 63\n    instead = info.instead;                                                                           // 56  // 64\n    message = info.message || defaultMessage;                                                         // 57  // 65\n    where = info.where || 'IronRouter';                                                               // 58  // 66\n  } else {                                                                                            // 59  // 67\n    message = info;                                                                                   // 60  // 68\n    name = '';                                                                                        // 61  // 69\n    instead = '';                                                                                     // 62  // 70\n    where = '';                                                                                       // 63  // 71\n  }                                                                                                   // 64  // 72\n                                                                                                      // 65  // 73\n  warn(                                                                                               // 66  // 74\n      '<deprecated> ' +                                                                               // 67  // 75\n      message                                                                                         // 68  // 76\n      .replace(':name', name)                                                                         // 69  // 77\n      .replace(':instead', instead)                                                                   // 70  // 78\n      .replace(':where', where) +                                                                     // 71  // 79\n      ' ' +                                                                                           // 72  // 80\n      (new Error).stack                                                                               // 73  // 81\n  );                                                                                                  // 74  // 82\n};                                                                                                    // 75  // 83\n                                                                                                      // 76  // 84\nUtils.withDeprecatedNotice = function (info, fn, thisArg) {                                           // 77  // 85\n  return function () {                                                                                // 78  // 86\n    Utils.notifyDeprecated(info);                                                                     // 79  // 87\n    return fn && fn.apply(thisArg || this, arguments);                                                // 80  // 88\n  };                                                                                                  // 81  // 89\n};                                                                                                    // 82  // 90\n                                                                                                      // 83  // 91\n/**                                                                                                   // 84  // 92\n * Given the name of a property, resolves to the value. Works with namespacing                        // 85  // 93\n * too. If first parameter is already a value that isn't a string it's returned                       // 86  // 94\n * immediately.                                                                                       // 87  // 95\n *                                                                                                    // 88  // 96\n * Examples:                                                                                          // 89  // 97\n *  'SomeClass' => window.SomeClass || global.someClass                                               // 90  // 98\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass                                       // 91  // 99\n *                                                                                                    // 92  // 100\n * @param {String|Object} nameOrValue                                                                 // 93  // 101\n */                                                                                                   // 94  // 102\n                                                                                                      // 95  // 103\nUtils.resolveValue = function (nameOrValue) {                                                         // 96  // 104\n  var global = Utils.global;                                                                          // 97  // 105\n  var parts;                                                                                          // 98  // 106\n  var ptr;                                                                                            // 99  // 107\n                                                                                                      // 100\n  if (_.isString(nameOrValue)) {                                                                      // 101\n    parts = nameOrValue.split('.')                                                                    // 102\n    ptr = global;                                                                                     // 103\n    for (var i = 0; i < parts.length; i++) {                                                          // 104\n      ptr = ptr[parts[i]];                                                                            // 105\n      if (!ptr)                                                                                       // 106\n        return undefined;                                                                             // 107\n    }                                                                                                 // 108\n  } else {                                                                                            // 109\n    ptr = nameOrValue;                                                                                // 110\n  }                                                                                                   // 111\n                                                                                                      // 112\n  // final position of ptr should be the resolved value                                               // 113\n  return ptr;                                                                                         // 114\n};                                                                                                    // 115\n                                                                                                      // 116\nUtils.hasOwnProperty = function (obj, key) {                                                          // 117\n  var prop = {}.hasOwnProperty;                                                                       // 118\n  return prop.call(obj, key);                                                                         // 119\n};                                                                                                    // 120\n                                                                                                      // 121\n/**                                                                                                   // 122\n * Don't mess with this function. It's exactly the same as the compiled                               // 123\n * coffeescript mechanism. If you change it we can't guarantee that our code                          // 124\n * will work when used with Coffeescript. One exception is putting in a runtime                       // 125\n * check that both child and parent are of type Function.                                             // 126\n */                                                                                                   // 127\n                                                                                                      // 128\nUtils.inherits = function (child, parent) {                                                           // 129\n  if (Utils.typeOf(child) !== '[object Function]')                                                    // 130\n    throw new Error('First parameter to Utils.inherits must be a function');                          // 131\n                                                                                                      // 132\n  if (Utils.typeOf(parent) !== '[object Function]')                                                   // 133\n    throw new Error('Second parameter to Utils.inherits must be a function');                         // 134\n                                                                                                      // 135\n  for (var key in parent) {                                                                           // 136\n    if (Utils.hasOwnProperty(parent, key))                                                            // 137\n      child[key] = parent[key];                                                                       // 138\n  }                                                                                                   // 139\n                                                                                                      // 140\n  function ctor () {                                                                                  // 141\n    this.constructor = child;                                                                         // 142\n  }                                                                                                   // 143\n                                                                                                      // 144\n  ctor.prototype = parent.prototype;                                                                  // 145\n  child.prototype = new ctor();                                                                       // 146\n  child.__super__ = parent.prototype;                                                                 // 147\n  return child;                                                                                       // 148\n};                                                                                                    // 149\n                                                                                                      // 150\nUtils.toArray = function (obj) {                                                                      // 151\n  if (!obj)                                                                                           // 152\n    return [];                                                                                        // 153\n  else if (Utils.typeOf(obj) !== '[object Array]')                                                    // 154\n    return [obj];                                                                                     // 155\n  else                                                                                                // 156\n    return obj;                                                                                       // 157\n};                                                                                                    // 158\n                                                                                                      // 159\nUtils.typeOf = function (obj) {                                                                       // 160\n  if (obj && obj.typeName)                                                                            // 161\n    return obj.typeName;                                                                              // 162\n  else                                                                                                // 163\n    return Object.prototype.toString.call(obj);                                                       // 164\n};                                                                                                    // 165\n                                                                                                      // 166\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {                                // 167\n  if (arguments.length === 1)                                                                         // 168\n    definition = Super;                                                                               // 169\n  else {                                                                                              // 170\n    definition = definition || {};                                                                    // 171\n    definition.extend = Super;                                                                        // 172\n  }                                                                                                   // 173\n                                                                                                      // 174\n  return Utils.create(definition, {                                                                   // 175\n    onBeforeExtendPrototype: onBeforeExtendPrototype                                                  // 176\n  });                                                                                                 // 177\n};                                                                                                    // 178\n                                                                                                      // 179\nUtils.create = function (definition, options) {                                                       // 180\n  var Constructor                                                                                     // 181\n    , extendFrom                                                                                      // 182\n    , savedPrototype;                                                                                 // 183\n                                                                                                      // 184\n  options = options || {};                                                                            // 185\n  definition = definition || {};                                                                      // 186\n                                                                                                      // 187\n  if (Utils.hasOwnProperty(definition, 'constructor'))                                                // 188\n    Constructor = definition.constructor;                                                             // 189\n  else {                                                                                              // 190\n    Constructor = function () {                                                                       // 191\n      if (Constructor.__super__ && Constructor.__super__.constructor)                                 // 192\n        return Constructor.__super__.constructor.apply(this, arguments);                              // 193\n    }                                                                                                 // 194\n  }                                                                                                   // 195\n                                                                                                      // 196\n  extendFrom = definition.extend;                                                                     // 197\n                                                                                                      // 198\n  if (definition.extend) delete definition.extend;                                                    // 199\n                                                                                                      // 200\n  var inherit = function (Child, Super, prototype) {                                                  // 201\n    Utils.inherits(Child, Utils.resolveValue(Super));                                                 // 202\n    if (prototype) _.extend(Child.prototype, prototype);                                              // 203\n  };                                                                                                  // 204\n                                                                                                      // 205\n  if (extendFrom) {                                                                                   // 206\n    inherit(Constructor, extendFrom);                                                                 // 207\n  }                                                                                                   // 208\n                                                                                                      // 209\n  if (options.onBeforeExtendPrototype)                                                                // 210\n    options.onBeforeExtendPrototype.call(Constructor, definition);                                    // 211\n                                                                                                      // 212\n  _.extend(Constructor.prototype, definition);                                                        // 213\n                                                                                                      // 214\n  return Constructor;                                                                                 // 215\n};                                                                                                    // 216\n                                                                                                      // 217\nUtils.capitalize = function (str) {                                                                   // 218\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);                                      // 219\n};                                                                                                    // 220\n                                                                                                      // 221\nUtils.upperCamelCase = function (str) {                                                               // 222\n  var re = /_|-|\\./;                                                                                  // 223\n                                                                                                      // 224\n  if (!str)                                                                                           // 225\n    return '';                                                                                        // 226\n                                                                                                      // 227\n  return _.map(str.split(re), function (word) {                                                       // 228\n    return Utils.capitalize(word);                                                                    // 229\n  }).join('');                                                                                        // 230\n};                                                                                                    // 231\n                                                                                                      // 232\nUtils.camelCase = function (str) {                                                                    // 233\n  var output = Utils.upperCamelCase(str);                                                             // 234\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);                           // 235\n  return output;                                                                                      // 236\n};                                                                                                    // 237\n                                                                                                      // 238\nUtils.pick = function (/* args */) {                                                                  // 239\n  var args = _.toArray(arguments)                                                                     // 240\n    , arg;                                                                                            // 241\n  for (var i = 0; i < args.length; i++) {                                                             // 242\n    arg = args[i];                                                                                    // 243\n    if (typeof arg !== 'undefined' && arg !== null)                                                   // 244\n      return arg;                                                                                     // 245\n  }                                                                                                   // 246\n                                                                                                      // 247\n  return null;                                                                                        // 248\n};                                                                                                    // 249\n                                                                                                      // 250\nUtils.StringConverters = {                                                                            // 251\n  'none': function(input) {                                                                           // 252\n    return input;                                                                                     // 253\n  },                                                                                                  // 254\n                                                                                                      // 255\n  'upperCamelCase': function (input) {                                                                // 256\n    return Utils.upperCamelCase(input);                                                               // 257\n  },                                                                                                  // 258\n                                                                                                      // 259\n  'camelCase': function (input) {                                                                     // 260\n    return Utils.camelCase(input);                                                                    // 261\n  }                                                                                                   // 262\n};                                                                                                    // 263\n                                                                                                      // 264\nUtils.rewriteLegacyHooks = function (obj) {                                                           // 265\n  var legacyToNew = IronRouter.LEGACY_HOOK_TYPES;                                                     // 266\n                                                                                                      // 267\n  _.each(legacyToNew, function (newHook, oldHook) {                                                   // 268\n    // only look on the immediate object, not its                                                     // 269\n    // proto chain                                                                                    // 270\n    if (_.has(obj, oldHook)) {                                                                        // 271\n      hasOld = true;                                                                                  // 272\n      obj[newHook] = obj[oldHook];                                                                    // 273\n                                                                                                      // 274\n      Utils.notifyDeprecated({                                                                        // 275\n        where: 'RouteController',                                                                     // 276\n        name: oldHook,                                                                                // 277\n        instead: newHook                                                                              // 278\n      });                                                                                             // 279\n    }                                                                                                 // 280\n  });                                                                                                 // 281\n};                                                                                                    // 282\n                                                                                                      // 283\n                                                                                                      // 284\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 293\n                                                                                                             // 294\n}).call(this);                                                                                               // 295\n                                                                                                             // 296\n                                                                                                             // 297\n                                                                                                             // 298\n                                                                                                             // 299\n                                                                                                             // 300\n                                                                                                             // 301\n(function () {                                                                                               // 302\n                                                                                                             // 303\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 304\n//                                                                                                    //     // 305\n// packages/iron:router/lib/route.js                                                                  //     // 306\n//                                                                                                    //     // 307\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 308\n                                                                                                      //     // 309\n/*                                                                                                    // 1   // 310\n * Inspiration and some code for the compilation of routes comes from pagejs.                         // 2   // 311\n * The original has been modified to better handle hash fragments, and to store                       // 3   // 312\n * the regular expression on the Route instance. Also, the resolve method has                         // 4   // 313\n * been added to return a resolved path given a parameters object.                                    // 5   // 314\n */                                                                                                   // 6   // 315\n                                                                                                      // 7   // 316\nRoute = function (router, name, options) {                                                            // 8   // 317\n  var path;                                                                                           // 9   // 318\n                                                                                                      // 10  // 319\n  Utils.assert(                                                                                       // 11  // 320\n    router instanceof IronRouter,                                                                     // 12  // 321\n    \"Route constructor first parameter must be a Router\");                                            // 13  // 322\n                                                                                                      // 14  // 323\n  Utils.assert(                                                                                       // 15  // 324\n    _.isString(name),                                                                                 // 16  // 325\n    \"Route constructor second parameter must be a String name\");                                      // 17  // 326\n                                                                                                      // 18  // 327\n  if (_.isFunction(options))                                                                          // 19  // 328\n    options = { handler: options };                                                                   // 20  // 329\n                                                                                                      // 21  // 330\n  options = this.options = options || {};                                                             // 22  // 331\n  path = options.path || ('/' + name);                                                                // 23  // 332\n                                                                                                      // 24  // 333\n  this.router = router;                                                                               // 25  // 334\n  this.originalPath = path;                                                                           // 26  // 335\n                                                                                                      // 27  // 336\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')                           // 28  // 337\n    this.originalPath = '/' + this.originalPath;                                                      // 29  // 338\n                                                                                                      // 30  // 339\n  this.name = name;                                                                                   // 31  // 340\n  this.where = options.where || 'client';                                                             // 32  // 341\n  this.controller = options.controller;                                                               // 33  // 342\n  this.action = options.action;                                                                       // 34  // 343\n                                                                                                      // 35  // 344\n  if (typeof options.reactive !== 'undefined')                                                        // 36  // 345\n    this.isReactive = options.reactive;                                                               // 37  // 346\n  else                                                                                                // 38  // 347\n    this.isReactive = true;                                                                           // 39  // 348\n                                                                                                      // 40  // 349\n  Utils.rewriteLegacyHooks(this.options);                                                             // 41  // 350\n                                                                                                      // 42  // 351\n  this.compile();                                                                                     // 43  // 352\n};                                                                                                    // 44  // 353\n                                                                                                      // 45  // 354\nRoute.prototype = {                                                                                   // 46  // 355\n  constructor: Route,                                                                                 // 47  // 356\n                                                                                                      // 48  // 357\n  /**                                                                                                 // 49  // 358\n   * Compile the path.                                                                                // 50  // 359\n   *                                                                                                  // 51  // 360\n   *  @return {Route}                                                                                 // 52  // 361\n   *  @api public                                                                                     // 53  // 362\n   */                                                                                                 // 54  // 363\n                                                                                                      // 55  // 364\n  compile: function () {                                                                              // 56  // 365\n    var self = this;                                                                                  // 57  // 366\n    var path;                                                                                         // 58  // 367\n    var options = self.options;                                                                       // 59  // 368\n                                                                                                      // 60  // 369\n    this.keys = [];                                                                                   // 61  // 370\n                                                                                                      // 62  // 371\n    if (self.originalPath instanceof RegExp) {                                                        // 63  // 372\n      self.re = self.originalPath;                                                                    // 64  // 373\n    } else {                                                                                          // 65  // 374\n      path = self.originalPath                                                                        // 66  // 375\n        .replace(/(.)\\/$/, '$1')                                                                      // 67  // 376\n        .concat(options.strict ? '' : '/?')                                                           // 68  // 377\n        .replace(/\\/\\(/g, '(?:/')                                                                     // 69  // 378\n        .replace(/#/, '/?#')                                                                          // 70  // 379\n        .replace(                                                                                     // 71  // 380\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                     // 72  // 381\n          function (match, slash, format, key, capture, optional){                                    // 73  // 382\n            self.keys.push({ name: key, optional: !! optional });                                     // 74  // 383\n            slash = slash || '';                                                                      // 75  // 384\n            return ''                                                                                 // 76  // 385\n              + (optional ? '' : slash)                                                               // 77  // 386\n              + '(?:'                                                                                 // 78  // 387\n              + (optional ? slash : '')                                                               // 79  // 388\n              + (format || '')                                                                        // 80  // 389\n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'                              // 81  // 390\n              + (optional || '');                                                                     // 82  // 391\n          }                                                                                           // 83  // 392\n        )                                                                                             // 84  // 393\n        .replace(/([\\/.])/g, '\\\\$1')                                                                  // 85  // 394\n        .replace(/\\*/g, '(.*)');                                                                      // 86  // 395\n                                                                                                      // 87  // 396\n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');                           // 88  // 397\n    }                                                                                                 // 89  // 398\n                                                                                                      // 90  // 399\n    return this;                                                                                      // 91  // 400\n  },                                                                                                  // 92  // 401\n                                                                                                      // 93  // 402\n  /**                                                                                                 // 94  // 403\n   * Returns an array of parameters given a path. The array may have named                            // 95  // 404\n   * properties in addition to indexed values.                                                        // 96  // 405\n   *                                                                                                  // 97  // 406\n   * @param {String} path                                                                             // 98  // 407\n   * @return {Array}                                                                                  // 99  // 408\n   * @api public                                                                                      // 100\n   */                                                                                                 // 101\n                                                                                                      // 102\n  params: function (path) {                                                                           // 103\n    if (!path)                                                                                        // 104\n      return null;                                                                                    // 105\n                                                                                                      // 106\n    var params = [];                                                                                  // 107\n    var m = this.exec(path);                                                                          // 108\n    var queryString;                                                                                  // 109\n    var keys = this.keys;                                                                             // 110\n    var key;                                                                                          // 111\n    var value;                                                                                        // 112\n                                                                                                      // 113\n    if (!m)                                                                                           // 114\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"');  // 115\n                                                                                                      // 116\n    for (var i = 1, len = m.length; i < len; ++i) {                                                   // 117\n      key = keys[i - 1];                                                                              // 118\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];                              // 119\n      if (key) {                                                                                      // 120\n        params[key.name] = params[key.name] !== undefined ?                                           // 121\n          params[key.name] : value;                                                                   // 122\n      } else                                                                                          // 123\n        params.push(value);                                                                           // 124\n    }                                                                                                 // 125\n                                                                                                      // 126\n    path = decodeURI(path);                                                                           // 127\n                                                                                                      // 128\n    queryString = path.split('?')[1];                                                                 // 129\n    if (queryString)                                                                                  // 130\n      queryString = queryString.split('#')[0];                                                        // 131\n                                                                                                      // 132\n    params.hash = path.split('#')[1];                                                                 // 133\n                                                                                                      // 134\n    if (queryString) {                                                                                // 135\n      _.each(queryString.split('&'), function (paramString) {                                         // 136\n        paramParts = paramString.split('=');                                                          // 137\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);                                    // 138\n      });                                                                                             // 139\n    }                                                                                                 // 140\n                                                                                                      // 141\n    return params;                                                                                    // 142\n  },                                                                                                  // 143\n                                                                                                      // 144\n  normalizePath: function (path) {                                                                    // 145\n    var origin = Meteor.absoluteUrl();                                                                // 146\n                                                                                                      // 147\n    path = path.replace(origin, '');                                                                  // 148\n                                                                                                      // 149\n    var queryStringIndex = path.indexOf('?');                                                         // 150\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;                                // 151\n                                                                                                      // 152\n    var hashIndex = path.indexOf('#');                                                                // 153\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;                                              // 154\n                                                                                                      // 155\n    if (path.charAt(0) !== '/')                                                                       // 156\n      path = '/' + path;                                                                              // 157\n                                                                                                      // 158\n    return path;                                                                                      // 159\n  },                                                                                                  // 160\n                                                                                                      // 161\n  /**                                                                                                 // 162\n   * Returns true if the path matches and false otherwise.                                            // 163\n   *                                                                                                  // 164\n   * @param {String} path                                                                             // 165\n   * @return {Boolean}                                                                                // 166\n   * @api public                                                                                      // 167\n   */                                                                                                 // 168\n  test: function (path) {                                                                             // 169\n    return this.re.test(this.normalizePath(path));                                                    // 170\n  },                                                                                                  // 171\n                                                                                                      // 172\n  exec: function (path) {                                                                             // 173\n    return this.re.exec(this.normalizePath(path));                                                    // 174\n  },                                                                                                  // 175\n                                                                                                      // 176\n  resolve: function (params, options) {                                                               // 177\n    var value;                                                                                        // 178\n    var isValueDefined;                                                                               // 179\n    var result;                                                                                       // 180\n    var wildCardCount = 0;                                                                            // 181\n    var path = this.originalPath;                                                                     // 182\n    var hash;                                                                                         // 183\n    var query;                                                                                        // 184\n    var isMissingParams = false;                                                                      // 185\n                                                                                                      // 186\n    options = options || {};                                                                          // 187\n    params = params || [];                                                                            // 188\n    query = options.query;                                                                            // 189\n    hash = options.hash && options.hash.toString();                                                   // 190\n                                                                                                      // 191\n    if (path instanceof RegExp) {                                                                     // 192\n      throw new Error('Cannot currently resolve a regular expression path');                          // 193\n    } else {                                                                                          // 194\n      path = this.originalPath                                                                        // 195\n        .replace(                                                                                     // 196\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                     // 197\n          function (match, slash, format, key, capture, optional, offset) {                           // 198\n            slash = slash || '';                                                                      // 199\n            value = params[key];                                                                      // 200\n            isValueDefined = typeof value !== 'undefined';                                            // 201\n                                                                                                      // 202\n            if (optional && !isValueDefined) {                                                        // 203\n              value = '';                                                                             // 204\n            } else if (!isValueDefined) {                                                             // 205\n              isMissingParams = true;                                                                 // 206\n              return;                                                                                 // 207\n            }                                                                                         // 208\n                                                                                                      // 209\n            value = _.isFunction(value) ? value.call(params) : value;                                 // 210\n            var escapedValue = _.map(String(value).split('/'), function (segment) {                   // 211\n              return encodeURIComponent(segment);                                                     // 212\n            }).join('/');                                                                             // 213\n            return slash + escapedValue                                                               // 214\n          }                                                                                           // 215\n        )                                                                                             // 216\n        .replace(                                                                                     // 217\n          /\\*/g,                                                                                      // 218\n          function (match) {                                                                          // 219\n            if (typeof params[wildCardCount] === 'undefined') {                                       // 220\n              throw new Error(                                                                        // 221\n                'You are trying to access a wild card parameter at index ' +                          // 222\n                wildCardCount +                                                                       // 223\n                ' but the value of params at that index is undefined');                               // 224\n            }                                                                                         // 225\n                                                                                                      // 226\n            var paramValue = String(params[wildCardCount++]);                                         // 227\n            return _.map(paramValue.split('/'), function (segment) {                                  // 228\n              return encodeURIComponent(segment);                                                     // 229\n            }).join('/');                                                                             // 230\n          }                                                                                           // 231\n        );                                                                                            // 232\n                                                                                                      // 233\n      if (_.isObject(query)) {                                                                        // 234\n        query = _.map(_.pairs(query), function (queryPart) {                                          // 235\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);                               // 236\n        }).join('&');                                                                                 // 237\n      }                                                                                               // 238\n                                                                                                      // 239\n      if (query && query.length)                                                                      // 240\n        path = path + '?' + query;                                                                    // 241\n                                                                                                      // 242\n      if (hash) {                                                                                     // 243\n        hash = encodeURI(hash.replace('#', ''));                                                      // 244\n        path = query ?                                                                                // 245\n          path + '#' + hash : path + '/#' + hash;                                                     // 246\n      }                                                                                               // 247\n    }                                                                                                 // 248\n                                                                                                      // 249\n    // Because of optional possibly empty segments we normalize path here                             // 250\n    path = path.replace(/\\/+/g, '/'); // Multiple / -> one /                                          // 251\n    path = path.replace(/^(.+)\\/$/g, '$1'); // Removal of trailing /                                  // 252\n                                                                                                      // 253\n    return isMissingParams ? null : path;                                                             // 254\n  },                                                                                                  // 255\n                                                                                                      // 256\n  path: function (params, options) {                                                                  // 257\n    return this.resolve(params, options);                                                             // 258\n  },                                                                                                  // 259\n                                                                                                      // 260\n  url: function (params, options) {                                                                   // 261\n    var path = this.path(params, options);                                                            // 262\n    if (path) {                                                                                       // 263\n      if (path.charAt(0) === '/')                                                                     // 264\n        path = path.slice(1, path.length);                                                            // 265\n      return Meteor.absoluteUrl() + path;                                                             // 266\n    } else {                                                                                          // 267\n      return null;                                                                                    // 268\n    }                                                                                                 // 269\n  },                                                                                                  // 270\n                                                                                                      // 271\n  findController: function (path, options) {                                                          // 272\n    var self = this;                                                                                  // 273\n    var handler;                                                                                      // 274\n    var controllerClass;                                                                              // 275\n    var controller;                                                                                   // 276\n    var action;                                                                                       // 277\n    var routeName;                                                                                    // 278\n                                                                                                      // 279\n    var resolveValue = Utils.resolveValue;                                                            // 280\n    var toArray = Utils.toArray;                                                                      // 281\n                                                                                                      // 282\n    var resolveController = function (name) {                                                         // 283\n      var controller = resolveValue(name);                                                            // 284\n      if (typeof controller === 'undefined') {                                                        // 285\n        throw new Error(                                                                              // 286\n          'controller \"' + name + '\" is not defined');                                                // 287\n      }                                                                                               // 288\n                                                                                                      // 289\n      return controller;                                                                              // 290\n    };                                                                                                // 291\n                                                                                                      // 292\n    // controller option is a string specifying the name                                              // 293\n    // of a controller somewhere                                                                      // 294\n    if (_.isString(this.controller))                                                                  // 295\n      controller = resolveController(this.controller);                                                // 296\n    else if (_.isFunction(this.controller))                                                           // 297\n      controller = this.controller;                                                                   // 298\n    else if (this.name)                                                                               // 299\n      controller = resolveValue(Router.convertRouteControllerName(this.name + 'Controller'));         // 300\n                                                                                                      // 301\n    if (!controller)                                                                                  // 302\n      controller = RouteController;                                                                   // 303\n                                                                                                      // 304\n    return controller;                                                                                // 305\n  },                                                                                                  // 306\n                                                                                                      // 307\n  newController: function (path, options) {                                                           // 308\n    var C = this.findController(path, options);                                                       // 309\n                                                                                                      // 310\n    options = _.extend({}, options, {                                                                 // 311\n      path: path,                                                                                     // 312\n      params: this.params(path),                                                                      // 313\n      where: this.where,                                                                              // 314\n      action: this.action                                                                             // 315\n    });                                                                                               // 316\n                                                                                                      // 317\n    return new C(this.router, this, options);                                                         // 318\n  },                                                                                                  // 319\n                                                                                                      // 320\n  getController: function (path, options) {                                                           // 321\n    return this.newController(path, options);                                                         // 322\n  }.deprecate({where: 'Route', name: 'getController', instead: 'newController'})                      // 323\n};                                                                                                    // 324\n                                                                                                      // 325\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 635\n                                                                                                             // 636\n}).call(this);                                                                                               // 637\n                                                                                                             // 638\n                                                                                                             // 639\n                                                                                                             // 640\n                                                                                                             // 641\n                                                                                                             // 642\n                                                                                                             // 643\n(function () {                                                                                               // 644\n                                                                                                             // 645\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 646\n//                                                                                                    //     // 647\n// packages/iron:router/lib/route_controller.js                                                       //     // 648\n//                                                                                                    //     // 649\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 650\n                                                                                                      //     // 651\nRouteController = function (router, route, options) {                                                 // 1   // 652\n  var self = this;                                                                                    // 2   // 653\n                                                                                                      // 3   // 654\n  if (!(router instanceof IronRouter))                                                                // 4   // 655\n    throw new Error('RouteController requires a router');                                             // 5   // 656\n                                                                                                      // 6   // 657\n  if (!(route instanceof Route))                                                                      // 7   // 658\n    throw new Error('RouteController requires a route');                                              // 8   // 659\n                                                                                                      // 9   // 660\n  options = this.options = options || {};                                                             // 10  // 661\n                                                                                                      // 11  // 662\n  this.router = router;                                                                               // 12  // 663\n  this.route = route;                                                                                 // 13  // 664\n                                                                                                      // 14  // 665\n  this.path = options.path || '';                                                                     // 15  // 666\n  this.params = options.params || [];                                                                 // 16  // 667\n  this.where = options.where || 'client';                                                             // 17  // 668\n  this.action = options.action || this.action;                                                        // 18  // 669\n                                                                                                      // 19  // 670\n  Utils.rewriteLegacyHooks(this.options);                                                             // 20  // 671\n  Utils.rewriteLegacyHooks(this);                                                                     // 21  // 672\n};                                                                                                    // 22  // 673\n                                                                                                      // 23  // 674\nRouteController.prototype = {                                                                         // 24  // 675\n  constructor: RouteController,                                                                       // 25  // 676\n                                                                                                      // 26  // 677\n  /**                                                                                                 // 27  // 678\n   * Returns the value of a property, searching for the property in this lookup                       // 28  // 679\n   * order:                                                                                           // 29  // 680\n   *                                                                                                  // 30  // 681\n   *   1. RouteController options                                                                     // 31  // 682\n   *   2. RouteController prototype                                                                   // 32  // 683\n   *   3. Route options                                                                               // 33  // 684\n   *   4. Router options                                                                              // 34  // 685\n   */                                                                                                 // 35  // 686\n  lookupProperty: function (key) {                                                                    // 36  // 687\n    var value;                                                                                        // 37  // 688\n                                                                                                      // 38  // 689\n    if (!_.isString(key))                                                                             // 39  // 690\n      throw new Error('key must be a string');                                                        // 40  // 691\n                                                                                                      // 41  // 692\n    // 1. RouteController options                                                                     // 42  // 693\n    if (typeof (value = this.options[key]) !== 'undefined')                                           // 43  // 694\n      return value;                                                                                   // 44  // 695\n                                                                                                      // 45  // 696\n    // 2. RouteController instance                                                                    // 46  // 697\n    if (typeof (value = this[key]) !== 'undefined')                                                   // 47  // 698\n      return value;                                                                                   // 48  // 699\n                                                                                                      // 49  // 700\n    var opts;                                                                                         // 50  // 701\n                                                                                                      // 51  // 702\n    // 3. Route options                                                                               // 52  // 703\n    opts = this.route.options;                                                                        // 53  // 704\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                           // 54  // 705\n      return value;                                                                                   // 55  // 706\n                                                                                                      // 56  // 707\n    // 4. Router options                                                                              // 57  // 708\n    opts = this.router.options;                                                                       // 58  // 709\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                           // 59  // 710\n      return value;                                                                                   // 60  // 711\n                                                                                                      // 61  // 712\n    // 5. Oops couldn't find property                                                                 // 62  // 713\n    return undefined;                                                                                 // 63  // 714\n  },                                                                                                  // 64  // 715\n                                                                                                      // 65  // 716\n  runHooks: function (hookName, more, cb) {                                                           // 66  // 717\n    var self = this;                                                                                  // 67  // 718\n    var ctor = this.constructor;                                                                      // 68  // 719\n                                                                                                      // 69  // 720\n    if (!_.isString(hookName))                                                                        // 70  // 721\n      throw new Error('hookName must be a string');                                                   // 71  // 722\n                                                                                                      // 72  // 723\n    if (more && !_.isArray(more))                                                                     // 73  // 724\n      throw new Error('more must be an array of functions');                                          // 74  // 725\n                                                                                                      // 75  // 726\n    var isPaused = false;                                                                             // 76  // 727\n                                                                                                      // 77  // 728\n    var lookupHook = function (nameOrFn) {                                                            // 78  // 729\n      var fn = nameOrFn;                                                                              // 79  // 730\n                                                                                                      // 80  // 731\n      // if we already have a func just return it                                                     // 81  // 732\n      if (_.isFunction(fn))                                                                           // 82  // 733\n        return fn;                                                                                    // 83  // 734\n                                                                                                      // 84  // 735\n      // look up one of the out-of-box hooks like                                                     // 85  // 736\n      // 'loaded or 'dataNotFound' if the nameOrFn is a                                               // 86  // 737\n      // string                                                                                       // 87  // 738\n      if (_.isString(fn)) {                                                                           // 88  // 739\n        if (_.isFunction(Router.hooks[fn]))                                                           // 89  // 740\n          return Router.hooks[fn];                                                                    // 90  // 741\n      }                                                                                               // 91  // 742\n                                                                                                      // 92  // 743\n      // we couldn't find it so throw an error                                                        // 93  // 744\n      throw new Error(\"No hook found named: \", nameOrFn);                                             // 94  // 745\n    };                                                                                                // 95  // 746\n                                                                                                      // 96  // 747\n    // concatenate together hook arrays from the inheritance                                          // 97  // 748\n    // heirarchy, starting at the top parent down to the child.                                       // 98  // 749\n    var collectInheritedHooks = function (ctor) {                                                     // 99  // 750\n      var hooks = [];                                                                                 // 100\n                                                                                                      // 101\n      if (ctor.__super__)                                                                             // 102\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));                      // 103\n                                                                                                      // 104\n      return Utils.hasOwnProperty(ctor.prototype, hookName) ?                                         // 105\n        hooks.concat(ctor.prototype[hookName]) : hooks;                                               // 106\n    };                                                                                                // 107\n                                                                                                      // 108\n                                                                                                      // 109\n    // get a list of hooks to run in the following order:                                             // 110\n    // 1. RouteController option hooks                                                                // 111\n    // 2. RouteController proto hooks (including inherited super to child)                            // 112\n    // 3. RouteController object hooks                                                                // 113\n    // 4. Router global hooks                                                                         // 114\n    // 5. Route option hooks                                                                          // 115\n    // 6. more                                                                                        // 116\n                                                                                                      // 117\n    var toArray = Utils.toArray;                                                                      // 118\n    var routerHooks = this.router.getHooks(hookName, this.route.name);                                // 119\n                                                                                                      // 120\n    var opts;                                                                                         // 121\n    opts = this.route.options;                                                                        // 122\n    var routeOptionHooks = toArray(opts && opts[hookName]);                                           // 123\n                                                                                                      // 124\n    opts = this.options;                                                                              // 125\n    var optionHooks = toArray(opts && opts[hookName]);                                                // 126\n                                                                                                      // 127\n    var protoHooks = collectInheritedHooks(this.constructor);                                         // 128\n                                                                                                      // 129\n    var objectHooks;                                                                                  // 130\n    // don't accidentally grab the prototype hooks!                                                   // 131\n    // this makes sure the hook is on the object itself                                               // 132\n    // not on its constructor's prototype object.                                                     // 133\n    if (_.has(this, hookName))                                                                        // 134\n      objectHooks = toArray(this[hookName])                                                           // 135\n    else                                                                                              // 136\n      objectHooks = [];                                                                               // 137\n                                                                                                      // 138\n    var allHooks = optionHooks                                                                        // 139\n      .concat(protoHooks)                                                                             // 140\n      .concat(objectHooks)                                                                            // 141\n      .concat(routeOptionHooks)                                                                       // 142\n      .concat(routerHooks)                                                                            // 143\n      .concat(more);                                                                                  // 144\n                                                                                                      // 145\n    var isPaused = false;                                                                             // 146\n    var pauseFn = function () {                                                                       // 147\n      isPaused = true;                                                                                // 148\n    };                                                                                                // 149\n                                                                                                      // 150\n    for (var i = 0, hook; hook = allHooks[i]; i++) {                                                  // 151\n      var hookFn = lookupHook(hook);                                                                  // 152\n                                                                                                      // 153\n      if (!isPaused && !this.isStopped)                                                               // 154\n        hookFn.call(self, pauseFn, i);                                                                // 155\n    }                                                                                                 // 156\n                                                                                                      // 157\n    cb && cb.call(self, isPaused);                                                                    // 158\n    return isPaused;                                                                                  // 159\n  },                                                                                                  // 160\n                                                                                                      // 161\n  action: function () {                                                                               // 162\n    throw new Error('not implemented');                                                               // 163\n  },                                                                                                  // 164\n                                                                                                      // 165\n  stop: function (cb) {                                                                               // 166\n    return this._stopController(cb);                                                                  // 167\n  },                                                                                                  // 168\n                                                                                                      // 169\n  _stopController: function (cb) {                                                                    // 170\n    var self = this;                                                                                  // 171\n                                                                                                      // 172\n    if (this.isStopped)                                                                               // 173\n      return;                                                                                         // 174\n                                                                                                      // 175\n    self.isRunning = false;                                                                           // 176\n    self.runHooks('onStop');                                                                          // 177\n    self.isStopped = true;                                                                            // 178\n    cb && cb.call(self);                                                                              // 179\n  },                                                                                                  // 180\n                                                                                                      // 181\n  _run: function () {                                                                                 // 182\n    throw new Error('not implemented');                                                               // 183\n  }                                                                                                   // 184\n};                                                                                                    // 185\n                                                                                                      // 186\n_.extend(RouteController, {                                                                           // 187\n  /**                                                                                                 // 188\n   * Inherit from RouteController                                                                     // 189\n   *                                                                                                  // 190\n   * @param {Object} definition Prototype properties for inherited class.                             // 191\n   */                                                                                                 // 192\n                                                                                                      // 193\n  extend: function (definition) {                                                                     // 194\n    Utils.rewriteLegacyHooks(definition);                                                             // 195\n                                                                                                      // 196\n    return Utils.extend(this, definition, function (definition) {                                     // 197\n      var klass = this;                                                                               // 198\n                                                                                                      // 199\n                                                                                                      // 200\n      /*                                                                                              // 201\n        Allow calling a class method from javascript, directly in the subclass                        // 202\n        definition.                                                                                   // 203\n                                                                                                      // 204\n        Instead of this:                                                                              // 205\n          MyController = RouteController.extend({...});                                               // 206\n          MyController.before(function () {});                                                        // 207\n                                                                                                      // 208\n        You can do:                                                                                   // 209\n          MyController = RouteController.extend({                                                     // 210\n            before: function () {}                                                                    // 211\n          });                                                                                         // 212\n                                                                                                      // 213\n        And in Coffeescript you can do:                                                               // 214\n         MyController extends RouteController                                                         // 215\n           @before function () {}                                                                     // 216\n       */                                                                                             // 217\n    });                                                                                               // 218\n  }                                                                                                   // 219\n});                                                                                                   // 220\n                                                                                                      // 221\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 873\n                                                                                                             // 874\n}).call(this);                                                                                               // 875\n                                                                                                             // 876\n                                                                                                             // 877\n                                                                                                             // 878\n                                                                                                             // 879\n                                                                                                             // 880\n                                                                                                             // 881\n(function () {                                                                                               // 882\n                                                                                                             // 883\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 884\n//                                                                                                    //     // 885\n// packages/iron:router/lib/router.js                                                                 //     // 886\n//                                                                                                    //     // 887\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 888\n                                                                                                      //     // 889\nIronRouter = function (options) {                                                                     // 1   // 890\n  var self = this;                                                                                    // 2   // 891\n                                                                                                      // 3   // 892\n  this.configure(options);                                                                            // 4   // 893\n                                                                                                      // 5   // 894\n  /**                                                                                                 // 6   // 895\n   * The routes array which doubles as a named route index by adding                                  // 7   // 896\n   * properties to the array.                                                                         // 8   // 897\n   *                                                                                                  // 9   // 898\n   * @api public                                                                                      // 10  // 899\n   */                                                                                                 // 11  // 900\n  this.routes = [];                                                                                   // 12  // 901\n                                                                                                      // 13  // 902\n  /**                                                                                                 // 14  // 903\n   * Default name conversions for controller                                                          // 15  // 904\n   * and template lookup.                                                                             // 16  // 905\n   */                                                                                                 // 17  // 906\n  this._nameConverters = {};                                                                          // 18  // 907\n  this.setNameConverter('Template', 'none');                                                          // 19  // 908\n  this.setNameConverter('RouteController', 'upperCamelCase');                                         // 20  // 909\n                                                                                                      // 21  // 910\n  this._globalHooks = {};                                                                             // 22  // 911\n  _.each(IronRouter.HOOK_TYPES, function (type) {                                                     // 23  // 912\n    self._globalHooks[type] = [];                                                                     // 24  // 913\n                                                                                                      // 25  // 914\n    // example:                                                                                       // 26  // 915\n    //  self.onRun = function (hook, options) {                                                       // 27  // 916\n    //    return self.addHook('onRun', hook, options);                                                // 28  // 917\n    //  };                                                                                            // 29  // 918\n    self[type] = function (hook, options) {                                                           // 30  // 919\n      return self.addHook(type, hook, options);                                                       // 31  // 920\n    };                                                                                                // 32  // 921\n  });                                                                                                 // 33  // 922\n                                                                                                      // 34  // 923\n  _.each(IronRouter.LEGACY_HOOK_TYPES, function (type, legacyType) {                                  // 35  // 924\n    self[legacyType] = function () {                                                                  // 36  // 925\n      Utils.notifyDeprecated({                                                                        // 37  // 926\n        where: 'Router',                                                                              // 38  // 927\n        name: legacyType,                                                                             // 39  // 928\n        instead: type                                                                                 // 40  // 929\n      });                                                                                             // 41  // 930\n                                                                                                      // 42  // 931\n      return self[type].apply(this, arguments);                                                       // 43  // 932\n    }                                                                                                 // 44  // 933\n  });                                                                                                 // 45  // 934\n};                                                                                                    // 46  // 935\n                                                                                                      // 47  // 936\nIronRouter.HOOK_TYPES = [                                                                             // 48  // 937\n  'onRun',                                                                                            // 49  // 938\n  'onData',                                                                                           // 50  // 939\n  'onBeforeAction',                                                                                   // 51  // 940\n  'onAfterAction',                                                                                    // 52  // 941\n  'onStop',                                                                                           // 53  // 942\n                                                                                                      // 54  // 943\n  // not technically a hook but we'll use it                                                          // 55  // 944\n  // in a similar way. This will cause waitOn                                                         // 56  // 945\n  // to be added as a method to the Router and then                                                   // 57  // 946\n  // it can be selectively applied to specific routes                                                 // 58  // 947\n  'waitOn'                                                                                            // 59  // 948\n];                                                                                                    // 60  // 949\n                                                                                                      // 61  // 950\nIronRouter.LEGACY_HOOK_TYPES = {                                                                      // 62  // 951\n  'load': 'onRun',                                                                                    // 63  // 952\n  'before': 'onBeforeAction',                                                                         // 64  // 953\n  'after': 'onAfterAction',                                                                           // 65  // 954\n  'unload': 'onStop'                                                                                  // 66  // 955\n};                                                                                                    // 67  // 956\n                                                                                                      // 68  // 957\nIronRouter.prototype = {                                                                              // 69  // 958\n  constructor: IronRouter,                                                                            // 70  // 959\n                                                                                                      // 71  // 960\n  /**                                                                                                 // 72  // 961\n   * Configure instance with options. This can be called at any time. If the                          // 73  // 962\n   * instance options object hasn't been created yet it is created here.                              // 74  // 963\n   *                                                                                                  // 75  // 964\n   * @param {Object} options                                                                          // 76  // 965\n   * @return {IronRouter}                                                                             // 77  // 966\n   * @api public                                                                                      // 78  // 967\n   */                                                                                                 // 79  // 968\n                                                                                                      // 80  // 969\n  configure: function (options) {                                                                     // 81  // 970\n    var self = this;                                                                                  // 82  // 971\n                                                                                                      // 83  // 972\n    options = options || {};                                                                          // 84  // 973\n    this.options = this.options || {};                                                                // 85  // 974\n    _.extend(this.options, options);                                                                  // 86  // 975\n                                                                                                      // 87  // 976\n    // e.g. before: fn OR before: [fn1, fn2]                                                          // 88  // 977\n    _.each(IronRouter.HOOK_TYPES, function(type) {                                                    // 89  // 978\n      if (self.options[type]) {                                                                       // 90  // 979\n        _.each(Utils.toArray(self.options[type]), function(hook) {                                    // 91  // 980\n          self.addHook(type, hook);                                                                   // 92  // 981\n        });                                                                                           // 93  // 982\n                                                                                                      // 94  // 983\n        delete self.options[type];                                                                    // 95  // 984\n      }                                                                                               // 96  // 985\n    });                                                                                               // 97  // 986\n                                                                                                      // 98  // 987\n    _.each(IronRouter.LEGACY_HOOK_TYPES, function(type, legacyType) {                                 // 99  // 988\n      if (self.options[legacyType]) {                                                                 // 100\n        // XXX: warning?                                                                              // 101\n        _.each(Utils.toArray(self.options[legacyType]), function(hook) {                              // 102\n          self.addHook(type, hook);                                                                   // 103\n        });                                                                                           // 104\n                                                                                                      // 105\n        delete self.options[legacyType];                                                              // 106\n      }                                                                                               // 107\n    });                                                                                               // 108\n                                                                                                      // 109\n    if (options.templateNameConverter)                                                                // 110\n      this.setNameConverter('Template', options.templateNameConverter);                               // 111\n                                                                                                      // 112\n    if (options.routeControllerNameConverter)                                                         // 113\n      this.setNameConverter('RouteController', options.routeControllerNameConverter);                 // 114\n                                                                                                      // 115\n    return this;                                                                                      // 116\n  },                                                                                                  // 117\n                                                                                                      // 118\n  convertTemplateName: function (input) {                                                             // 119\n    var converter = this._nameConverters['Template'];                                                 // 120\n    if (!converter)                                                                                   // 121\n      throw new Error('No name converter found for Template');                                        // 122\n    return converter(input);                                                                          // 123\n  },                                                                                                  // 124\n                                                                                                      // 125\n  convertRouteControllerName: function (input) {                                                      // 126\n    var converter = this._nameConverters['RouteController'];                                          // 127\n    if (!converter)                                                                                   // 128\n      throw new Error('No name converter found for RouteController');                                 // 129\n    return converter(input);                                                                          // 130\n  },                                                                                                  // 131\n                                                                                                      // 132\n  setNameConverter: function (key, stringOrFunc) {                                                    // 133\n    var converter;                                                                                    // 134\n                                                                                                      // 135\n    if (_.isFunction(stringOrFunc))                                                                   // 136\n      converter = stringOrFunc;                                                                       // 137\n                                                                                                      // 138\n    if (_.isString(stringOrFunc))                                                                     // 139\n      converter = Utils.StringConverters[stringOrFunc];                                               // 140\n                                                                                                      // 141\n    if (!converter) {                                                                                 // 142\n      throw new Error('No converter found named: ' + stringOrFunc);                                   // 143\n    }                                                                                                 // 144\n                                                                                                      // 145\n    this._nameConverters[key] = converter;                                                            // 146\n    return this;                                                                                      // 147\n  },                                                                                                  // 148\n                                                                                                      // 149\n  /**                                                                                                 // 150\n   *                                                                                                  // 151\n   * Add a hook to all routes. The hooks will apply to all routes,                                    // 152\n   * unless you name routes to include or exclude via `only` and `except` options                     // 153\n   *                                                                                                  // 154\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                              // 155\n   * @param {Object} [options] Options to controll the hooks [optional]                               // 156\n   * @param {Function} [hook] Callback to run                                                         // 157\n   * @return {IronRouter}                                                                             // 158\n   * @api public                                                                                      // 159\n   *                                                                                                  // 160\n   */                                                                                                 // 161\n                                                                                                      // 162\n  addHook: function(type, hook, options) {                                                            // 163\n    options = options || {}                                                                           // 164\n                                                                                                      // 165\n    if (options.only)                                                                                 // 166\n      options.only = Utils.toArray(options.only);                                                     // 167\n    if (options.except)                                                                               // 168\n      options.except = Utils.toArray(options.except);                                                 // 169\n                                                                                                      // 170\n    this._globalHooks[type].push({options: options, hook: hook});                                     // 171\n                                                                                                      // 172\n    return this;                                                                                      // 173\n  },                                                                                                  // 174\n                                                                                                      // 175\n  /**                                                                                                 // 176\n   *                                                                                                  // 177\n   * Fetch the list of global hooks that apply to the given route name.                               // 178\n   * Hooks are defined by the .addHook() function above.                                              // 179\n   *                                                                                                  // 180\n   * @param {String} [type] one of IronRouter.HOOK_TYPES                                              // 181\n   * @param {String} [name] the name of the route we are interested in                                // 182\n   * @return {[Function]} [hooks] an array of hooks to run                                            // 183\n   * @api public                                                                                      // 184\n   *                                                                                                  // 185\n   */                                                                                                 // 186\n                                                                                                      // 187\n  getHooks: function(type, name) {                                                                    // 188\n    var hooks = [];                                                                                   // 189\n                                                                                                      // 190\n    _.each(this._globalHooks[type], function(hook) {                                                  // 191\n      var options = hook.options;                                                                     // 192\n                                                                                                      // 193\n      if (options.except && _.include(options.except, name))                                          // 194\n        return;                                                                                       // 195\n                                                                                                      // 196\n      if (options.only && ! _.include(options.only, name))                                            // 197\n        return;                                                                                       // 198\n                                                                                                      // 199\n      hooks.push(hook.hook);                                                                          // 200\n    });                                                                                               // 201\n                                                                                                      // 202\n    return hooks;                                                                                     // 203\n  },                                                                                                  // 204\n                                                                                                      // 205\n                                                                                                      // 206\n  /**                                                                                                 // 207\n   * Convenience function to define a bunch of routes at once. In the future we                       // 208\n   * might call the callback with a custom dsl.                                                       // 209\n   *                                                                                                  // 210\n   * Example:                                                                                         // 211\n   *  Router.map(function () {                                                                        // 212\n   *    this.route('posts');                                                                          // 213\n   *  });                                                                                             // 214\n   *                                                                                                  // 215\n   *  @param {Function} cb                                                                            // 216\n   *  @return {IronRouter}                                                                            // 217\n   *  @api public                                                                                     // 218\n   */                                                                                                 // 219\n                                                                                                      // 220\n  map: function (cb) {                                                                                // 221\n    Utils.assert(_.isFunction(cb),                                                                    // 222\n           'map requires a function as the first parameter');                                         // 223\n    cb.call(this);                                                                                    // 224\n    return this;                                                                                      // 225\n  },                                                                                                  // 226\n                                                                                                      // 227\n  /**                                                                                                 // 228\n   * Define a new route. You must name the route, but as a second parameter you                       // 229\n   * can either provide an object of options or a Route instance.                                     // 230\n   *                                                                                                  // 231\n   * @param {String} name The name of the route                                                       // 232\n   * @param {Object} [options] Options to pass along to the route                                     // 233\n   * @return {Route}                                                                                  // 234\n   * @api public                                                                                      // 235\n   */                                                                                                 // 236\n                                                                                                      // 237\n  route: function (name, options) {                                                                   // 238\n    var route;                                                                                        // 239\n                                                                                                      // 240\n    Utils.assert(_.isString(name), 'name is a required parameter');                                   // 241\n                                                                                                      // 242\n    if (options instanceof Route)                                                                     // 243\n      route = options;                                                                                // 244\n    else                                                                                              // 245\n      route = new Route(this, name, options);                                                         // 246\n                                                                                                      // 247\n    this.routes[name] = route;                                                                        // 248\n    this.routes.push(route);                                                                          // 249\n    return route;                                                                                     // 250\n  },                                                                                                  // 251\n                                                                                                      // 252\n  path: function (routeName, params, options) {                                                       // 253\n    var route = this.routes[routeName];                                                               // 254\n    Utils.warn(route,                                                                                 // 255\n     'You called Router.path for a route named ' + routeName + ' but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.path(params, options);                                                      // 257\n  },                                                                                                  // 258\n                                                                                                      // 259\n  url: function (routeName, params, options) {                                                        // 260\n    var route = this.routes[routeName];                                                               // 261\n    Utils.warn(route,                                                                                 // 262\n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.url(params, options);                                                       // 264\n  },                                                                                                  // 265\n                                                                                                      // 266\n  match: function (path) {                                                                            // 267\n    return _.find(this.routes, function(r) { return r.test(path); });                                 // 268\n  },                                                                                                  // 269\n                                                                                                      // 270\n  dispatch: function (path, options, cb) {                                                            // 271\n    var route = this.match(path);                                                                     // 272\n                                                                                                      // 273\n    if (! route)                                                                                      // 274\n      return this.onRouteNotFound(path, options);                                                     // 275\n                                                                                                      // 276\n    if (route.where !== (Meteor.isClient ? 'client' : 'server'))                                      // 277\n      return this.onUnhandled(path, options);                                                         // 278\n                                                                                                      // 279\n    var controller = route.newController(path, options);                                              // 280\n    this.run(controller, cb);                                                                         // 281\n  },                                                                                                  // 282\n                                                                                                      // 283\n  run: function (controller, cb) {                                                                    // 284\n    var self = this;                                                                                  // 285\n    var where = Meteor.isClient ? 'client' : 'server';                                                // 286\n                                                                                                      // 287\n    Utils.assert(controller, 'run requires a controller');                                            // 288\n                                                                                                      // 289\n    // one last check to see if we should handle the route here                                       // 290\n    if (controller.where != where) {                                                                  // 291\n      self.onUnhandled(controller.path, controller.options);                                          // 292\n      return;                                                                                         // 293\n    }                                                                                                 // 294\n                                                                                                      // 295\n    var run = function () {                                                                           // 296\n      self._currentController = controller;                                                           // 297\n      // set the location                                                                             // 298\n      cb && cb(controller);                                                                           // 299\n      self._currentController._run();                                                                 // 300\n    };                                                                                                // 301\n                                                                                                      // 302\n    // if we already have a current controller let's stop it and then                                 // 303\n    // run the new one once the old controller is stopped. this will add                              // 304\n    // the run function as an onInvalidate callback to the controller's                               // 305\n    // computation. Otherwse, just run the new controller.                                            // 306\n    if (this._currentController)                                                                      // 307\n      this._currentController._stopController(run);                                                   // 308\n    else                                                                                              // 309\n      run();                                                                                          // 310\n  },                                                                                                  // 311\n                                                                                                      // 312\n  onUnhandled: function (path, options) {                                                             // 313\n    throw new Error('onUnhandled not implemented');                                                   // 314\n  },                                                                                                  // 315\n                                                                                                      // 316\n  onRouteNotFound: function (path, options) {                                                         // 317\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');                                // 318\n  }                                                                                                   // 319\n};                                                                                                    // 320\n                                                                                                      // 321\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1211\n                                                                                                             // 1212\n}).call(this);                                                                                               // 1213\n                                                                                                             // 1214\n                                                                                                             // 1215\n                                                                                                             // 1216\n                                                                                                             // 1217\n                                                                                                             // 1218\n                                                                                                             // 1219\n(function () {                                                                                               // 1220\n                                                                                                             // 1221\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1222\n//                                                                                                    //     // 1223\n// packages/iron:router/lib/client/location.js                                                        //     // 1224\n//                                                                                                    //     // 1225\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1226\n                                                                                                      //     // 1227\nvar dep = new Deps.Dependency;                                                                        // 1   // 1228\n// XXX: we have to store the state internally (rather than just calling out                           // 2   // 1229\n// to window.location) due to an android 2.3 bug. See:                                                // 3   // 1230\n//   https://github.com/EventedMind/iron-router/issues/350                                            // 4   // 1231\nvar currentState = {                                                                                  // 5   // 1232\n  path: location.pathname + location.search + location.hash,                                          // 6   // 1233\n  // we set title to null because that can be triggered immediately by a \"noop\"                       // 7   // 1234\n  // popstate that happens on load -- if it's already null, nothing's changed.                        // 8   // 1235\n  title: null                                                                                         // 9   // 1236\n};                                                                                                    // 10  // 1237\n                                                                                                      // 11  // 1238\nfunction onpopstate (e) {                                                                             // 12  // 1239\n  setState(e.originalEvent.state, null, location.pathname + location.search + location.hash);         // 13  // 1240\n}                                                                                                     // 14  // 1241\n                                                                                                      // 15  // 1242\nIronLocation = {};                                                                                    // 16  // 1243\n                                                                                                      // 17  // 1244\nIronLocation.origin = function () {                                                                   // 18  // 1245\n  return location.protocol + '//' + location.host;                                                    // 19  // 1246\n};                                                                                                    // 20  // 1247\n                                                                                                      // 21  // 1248\nIronLocation.isSameOrigin = function (href) {                                                         // 22  // 1249\n  var origin = IronLocation.origin();                                                                 // 23  // 1250\n  return href.indexOf(origin) === 0;                                                                  // 24  // 1251\n};                                                                                                    // 25  // 1252\n                                                                                                      // 26  // 1253\nIronLocation.get = function () {                                                                      // 27  // 1254\n  dep.depend();                                                                                       // 28  // 1255\n  return currentState;                                                                                // 29  // 1256\n};                                                                                                    // 30  // 1257\n                                                                                                      // 31  // 1258\nIronLocation.path = function () {                                                                     // 32  // 1259\n  dep.depend();                                                                                       // 33  // 1260\n  return currentState.path;                                                                           // 34  // 1261\n};                                                                                                    // 35  // 1262\n                                                                                                      // 36  // 1263\nIronLocation.set = function (url, options) {                                                          // 37  // 1264\n  options = options || {};                                                                            // 38  // 1265\n                                                                                                      // 39  // 1266\n  var state = options.state || {};                                                                    // 40  // 1267\n                                                                                                      // 41  // 1268\n  if (/^http/.test(url))                                                                              // 42  // 1269\n    href = url;                                                                                       // 43  // 1270\n  else {                                                                                              // 44  // 1271\n    if (url.charAt(0) !== '/')                                                                        // 45  // 1272\n      url = '/' + url;                                                                                // 46  // 1273\n    href = IronLocation.origin() + url;                                                               // 47  // 1274\n  }                                                                                                   // 48  // 1275\n                                                                                                      // 49  // 1276\n  if (!IronLocation.isSameOrigin(href))                                                               // 50  // 1277\n    window.location = href;                                                                           // 51  // 1278\n  else if (options.where === 'server')                                                                // 52  // 1279\n    window.location = href;                                                                           // 53  // 1280\n  else if (options.replaceState)                                                                      // 54  // 1281\n    IronLocation.replaceState(state, options.title, url, options.skipReactive);                       // 55  // 1282\n  else                                                                                                // 56  // 1283\n    IronLocation.pushState(state, options.title, url, options.skipReactive);                          // 57  // 1284\n};                                                                                                    // 58  // 1285\n                                                                                                      // 59  // 1286\n// store the state for later access                                                                   // 60  // 1287\nsetState = function(newState, title, url, skipReactive) {                                             // 61  // 1288\n  newState = _.extend({}, newState);                                                                  // 62  // 1289\n  newState.path = url;                                                                                // 63  // 1290\n  newState.title = title;                                                                             // 64  // 1291\n                                                                                                      // 65  // 1292\n  if (!skipReactive && ! EJSON.equals(currentState, newState))                                        // 66  // 1293\n    dep.changed();                                                                                    // 67  // 1294\n                                                                                                      // 68  // 1295\n  currentState = newState;                                                                            // 69  // 1296\n}                                                                                                     // 70  // 1297\n                                                                                                      // 71  // 1298\nIronLocation.pushState = function (state, title, url, skipReactive) {                                 // 72  // 1299\n  setState(state, title, url, skipReactive);                                                          // 73  // 1300\n                                                                                                      // 74  // 1301\n  if (history.pushState)                                                                              // 75  // 1302\n    history.pushState(state, title, url);                                                             // 76  // 1303\n  else                                                                                                // 77  // 1304\n    window.location = url;                                                                            // 78  // 1305\n};                                                                                                    // 79  // 1306\n                                                                                                      // 80  // 1307\nIronLocation.replaceState = function (state, title, url, skipReactive) {                              // 81  // 1308\n  // allow just the state or title to be set                                                          // 82  // 1309\n  if (arguments.length < 2)                                                                           // 83  // 1310\n    title = currentState.title;                                                                       // 84  // 1311\n  if (arguments.length < 3)                                                                           // 85  // 1312\n    url = currentState.path;                                                                          // 86  // 1313\n                                                                                                      // 87  // 1314\n  setState(state, title, url, skipReactive);                                                          // 88  // 1315\n                                                                                                      // 89  // 1316\n  if (history.replaceState)                                                                           // 90  // 1317\n    history.replaceState(state, title, url);                                                          // 91  // 1318\n  else                                                                                                // 92  // 1319\n    window.location = url;                                                                            // 93  // 1320\n};                                                                                                    // 94  // 1321\n                                                                                                      // 95  // 1322\nIronLocation.bindEvents = function(){                                                                 // 96  // 1323\n  $(window).on('popstate.iron-router', onpopstate);                                                   // 97  // 1324\n};                                                                                                    // 98  // 1325\n                                                                                                      // 99  // 1326\nIronLocation.unbindEvents = function(){                                                               // 100\n  $(window).off('popstate.iron-router');                                                              // 101\n};                                                                                                    // 102\n                                                                                                      // 103\nIronLocation.start = function () {                                                                    // 104\n  if (this.isStarted)                                                                                 // 105\n    return;                                                                                           // 106\n                                                                                                      // 107\n  IronLocation.bindEvents();                                                                          // 108\n  this.isStarted = true;                                                                              // 109\n  // store the fact that this is the first route we hit.                                              // 110\n  // this serves two purposes                                                                         // 111\n  //   1. We can tell when we've reached an unhandled route and need to show a                        // 112\n  //      404 (rather than bailing out to let the server handle it)                                   // 113\n  //   2. Users can look at the state to tell if the history.back() will stay                         // 114\n  //      inside the app (this is important for mobile apps).                                         // 115\n  if (history.replaceState)                                                                           // 116\n    history.replaceState({initial: true}, null, location.pathname + location.search + location.hash); // 117\n};                                                                                                    // 118\n                                                                                                      // 119\nIronLocation.stop = function () {                                                                     // 120\n  IronLocation.unbindEvents();                                                                        // 121\n  this.isStarted = false;                                                                             // 122\n};                                                                                                    // 123\n                                                                                                      // 124\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1352\n                                                                                                             // 1353\n}).call(this);                                                                                               // 1354\n                                                                                                             // 1355\n                                                                                                             // 1356\n                                                                                                             // 1357\n                                                                                                             // 1358\n                                                                                                             // 1359\n                                                                                                             // 1360\n(function () {                                                                                               // 1361\n                                                                                                             // 1362\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1363\n//                                                                                                    //     // 1364\n// packages/iron:router/lib/client/router.js                                                          //     // 1365\n//                                                                                                    //     // 1366\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1367\n                                                                                                      //     // 1368\n/*****************************************************************************/                       // 1   // 1369\n/* Private */                                                                                         // 2   // 1370\n/*****************************************************************************/                       // 3   // 1371\nvar bindData = function (value, thisArg) {                                                            // 4   // 1372\n  return function () {                                                                                // 5   // 1373\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;                   // 6   // 1374\n  };                                                                                                  // 7   // 1375\n};                                                                                                    // 8   // 1376\n                                                                                                      // 9   // 1377\n/*****************************************************************************/                       // 10  // 1378\n/* IronRouter */                                                                                      // 11  // 1379\n/*****************************************************************************/                       // 12  // 1380\nIronRouter = Utils.extend(IronRouter, {                                                               // 13  // 1381\n  constructor: function (options) {                                                                   // 14  // 1382\n    var self = this;                                                                                  // 15  // 1383\n                                                                                                      // 16  // 1384\n    IronRouter.__super__.constructor.apply(this, arguments);                                          // 17  // 1385\n    self.options.linkSelector = self.options.linkSelector || 'a[href]';                               // 18  // 1386\n                                                                                                      // 19  // 1387\n    options = options || {};                                                                          // 20  // 1388\n                                                                                                      // 21  // 1389\n    this.isRendered = false;                                                                          // 22  // 1390\n                                                                                                      // 23  // 1391\n    /**                                                                                               // 24  // 1392\n     * The current RouteController instance. This is set anytime a new route is                       // 25  // 1393\n     * dispatched. It's a reactive variable which you can get by calling                              // 26  // 1394\n     * Router.current();                                                                              // 27  // 1395\n     *                                                                                                // 28  // 1396\n     * @api private                                                                                   // 29  // 1397\n     */                                                                                               // 30  // 1398\n    this._currentController = null;                                                                   // 31  // 1399\n                                                                                                      // 32  // 1400\n    /**                                                                                               // 33  // 1401\n     * Dependency to for this._currentController                                                      // 34  // 1402\n     *                                                                                                // 35  // 1403\n     * @api private                                                                                   // 36  // 1404\n     */                                                                                               // 37  // 1405\n    this._controllerDep = new Deps.Dependency;                                                        // 38  // 1406\n                                                                                                      // 39  // 1407\n    /**                                                                                               // 40  // 1408\n      * Did the URL we are looking at come from a hot-code-reload                                     // 41  // 1409\n      *  (and thus should we treat is as not new?)                                                    // 42  // 1410\n      *                                                                                               // 43  // 1411\n      * @api private                                                                                  // 44  // 1412\n      */                                                                                              // 45  // 1413\n    this._hasJustReloaded = false;                                                                    // 46  // 1414\n                                                                                                      // 47  // 1415\n    Meteor.startup(function () {                                                                      // 48  // 1416\n      Meteor.defer(function () {                                                                      // 49  // 1417\n        if (self.options.autoRender !== false)                                                        // 50  // 1418\n          self.autoRender();                                                                          // 51  // 1419\n        if (self.options.autoStart !== false)                                                         // 52  // 1420\n          self.start();                                                                               // 53  // 1421\n      });                                                                                             // 54  // 1422\n    });                                                                                               // 55  // 1423\n                                                                                                      // 56  // 1424\n    // manages dynamic rendering                                                                      // 57  // 1425\n    // XXX we'll keep the same router api for now and clean it up to be more                          // 58  // 1426\n    // sensible on the next pass (to more closely mimic the new Iron.Layout api                       // 59  // 1427\n    // which is a lot nicer).                                                                         // 60  // 1428\n    this._layout = new Iron.Layout({template: this.options.layoutTemplate});                          // 61  // 1429\n                                                                                                      // 62  // 1430\n    /*                                                                                                // 63  // 1431\n    // proxy these methods to the underlying ui manager object                                        // 64  // 1432\n    _.each([                                                                                          // 65  // 1433\n      'layout',                                                                                       // 66  // 1434\n      'setRegion',                                                                                    // 67  // 1435\n      'clearRegion',                                                                                  // 68  // 1436\n      'getData',                                                                                      // 69  // 1437\n      'setData'                                                                                       // 70  // 1438\n    ], function (uiApiMethod) {                                                                       // 71  // 1439\n      self[uiApiMethod] = function () {                                                               // 72  // 1440\n        if (!self._ui)                                                                                // 73  // 1441\n          throw new Error(\"No uiManager is configured on the Router\");                                // 74  // 1442\n        return self._ui[uiApiMethod].apply(self._ui, arguments);                                      // 75  // 1443\n      };                                                                                              // 76  // 1444\n    });                                                                                               // 77  // 1445\n    */                                                                                                // 78  // 1446\n  },                                                                                                  // 79  // 1447\n                                                                                                      // 80  // 1448\n  layout: function (template, options) {                                                              // 81  // 1449\n    var result = this._layout.template(template);                                                     // 82  // 1450\n                                                                                                      // 83  // 1451\n    // check whether options has a data property                                                      // 84  // 1452\n    if (options && (_.has(options, 'data')))                                                          // 85  // 1453\n      this._layout.data(bindData(options.data, this));                                                // 86  // 1454\n                                                                                                      // 87  // 1455\n    return result;                                                                                    // 88  // 1456\n  },                                                                                                  // 89  // 1457\n                                                                                                      // 90  // 1458\n  setRegion: function (region, template) {                                                            // 91  // 1459\n    if (arguments.length === 1) {                                                                     // 92  // 1460\n      template = region;                                                                              // 93  // 1461\n      region = null;                                                                                  // 94  // 1462\n    }                                                                                                 // 95  // 1463\n                                                                                                      // 96  // 1464\n    this._layout.render(template, {to: region});                                                      // 97  // 1465\n    return this;                                                                                      // 98  // 1466\n  },                                                                                                  // 99  // 1467\n                                                                                                      // 100\n  clearRegion: function (region) {                                                                    // 101\n    this._layout.clear(region);                                                                       // 102\n    return this;                                                                                      // 103\n  },                                                                                                  // 104\n                                                                                                      // 105\n  /**                                                                                                 // 106\n   * Reactive accessor for the current RouteController instance. You can also                         // 107\n   * get a nonreactive value by specifiying {reactive: false} as an option.                           // 108\n   *                                                                                                  // 109\n   * @param {Object} [opts] configuration options                                                     // 110\n   * @param {Boolean} [opts.reactive] Set to false to enable a non-reactive read.                     // 111\n   * @return {RouteController}                                                                        // 112\n   * @api public                                                                                      // 113\n   */                                                                                                 // 114\n                                                                                                      // 115\n  current: function (opts) {                                                                          // 116\n    if (opts && opts.reactive === false)                                                              // 117\n      return this._currentController;                                                                 // 118\n    else {                                                                                            // 119\n      this._controllerDep.depend();                                                                   // 120\n      return this._currentController;                                                                 // 121\n    }                                                                                                 // 122\n  },                                                                                                  // 123\n                                                                                                      // 124\n  clearUnusedRegions: function (usedYields) {                                                         // 125\n    var self = this;                                                                                  // 126\n                                                                                                      // 127\n    //XXX clean this up in next major release                                                         // 128\n    var allYields = _.keys(this._layout._regions);                                                    // 129\n                                                                                                      // 130\n    usedYields = _.filter(usedYields, function (val) {                                                // 131\n      return !!val;                                                                                   // 132\n    });                                                                                               // 133\n                                                                                                      // 134\n    var unusedYields = _.difference(allYields, usedYields);                                           // 135\n                                                                                                      // 136\n    _.each(unusedYields, function (key) {                                                             // 137\n      self.clearRegion(key);                                                                          // 138\n    });                                                                                               // 139\n  },                                                                                                  // 140\n                                                                                                      // 141\n  run: function (controller, cb) {                                                                    // 142\n    IronRouter.__super__.run.apply(this, arguments);                                                  // 143\n                                                                                                      // 144\n    if (controller == this._currentController) {                                                      // 145\n      this._controllerDep.changed();                                                                  // 146\n    }                                                                                                 // 147\n  },                                                                                                  // 148\n                                                                                                      // 149\n  /**                                                                                                 // 150\n   * Wrapper around Location.go that accepts a routeName or a path as the first                       // 151\n   * parameter. This method can accept client and server side routes.                                 // 152\n   *                                                                                                  // 153\n   * Examples:                                                                                        // 154\n   *                                                                                                  // 155\n   *  1. Router.go('/posts', {state: 'true'});                                                        // 156\n   *  2. Router.go('postIndex', [param1, param2], {state});                                           // 157\n   *                                                                                                  // 158\n   * @param {String} routeNameOrPath                                                                  // 159\n   * @param {Array|Object} [params]                                                                   // 160\n   * @param {Object} [state]                                                                          // 161\n   * @param {Boolean} [replaceState]                                                                  // 162\n   * @api public                                                                                      // 163\n   */                                                                                                 // 164\n                                                                                                      // 165\n  go: function (routeNameOrPath, params, options) {                                                   // 166\n    var self = this;                                                                                  // 167\n    var isPathRe = /^\\/|http/                                                                         // 168\n    var route;                                                                                        // 169\n    var path;                                                                                         // 170\n    var onComplete;                                                                                   // 171\n    var controller;                                                                                   // 172\n    var done;                                                                                         // 173\n                                                                                                      // 174\n    // after the dispatch is complete, set the IronLocation                                           // 175\n    // path and state which will update the browser's url.                                            // 176\n    done = function() {                                                                               // 177\n      options = options || {};                                                                        // 178\n      self._location.set(path, {                                                                      // 179\n        replaceState: options.replaceState,                                                           // 180\n        state: options.state,                                                                         // 181\n        skipReactive: true                                                                            // 182\n      });                                                                                             // 183\n    };                                                                                                // 184\n                                                                                                      // 185\n    if (isPathRe.test(routeNameOrPath)) {                                                             // 186\n      path = routeNameOrPath;                                                                         // 187\n      options = params;                                                                               // 188\n                                                                                                      // 189\n      // if the path hasn't changed (at all), we are going to do nothing here                         // 190\n      if (path === self._location.path()) {                                                           // 191\n        if (self.options.debug)                                                                       // 192\n          console.log(\"You've navigated to the same path that you are currently at. Doing nothing\");  // 193\n        return;                                                                                       // 194\n      }                                                                                               // 195\n                                                                                                      // 196\n      // issue here is in the dispatch process we might want to                                       // 197\n      // make a server request so therefore not call this method yet, so                              // 198\n      // we need to push the state only after we've decided it's a client                             // 199\n      // request, otherwise let the browser handle it and send off to the                             // 200\n      // server                                                                                       // 201\n      self.dispatch(path, options, done);                                                             // 202\n    } else {                                                                                          // 203\n      route = self.routes[routeNameOrPath];                                                           // 204\n      Utils.assert(route, 'No route found named ' + routeNameOrPath);                                 // 205\n      path = route.path(params, options);                                                             // 206\n      controller = route.newController(path, options);                                                // 207\n      self.run(controller, done);                                                                     // 208\n    }                                                                                                 // 209\n  },                                                                                                  // 210\n                                                                                                      // 211\n  render: function () {                                                                               // 212\n    this.isRendered = true;                                                                           // 213\n                                                                                                      // 214\n    // return a UI component for the layout.                                                          // 215\n    return this._layout.create();                                                                     // 216\n  },                                                                                                  // 217\n                                                                                                      // 218\n  autoRender: function () {                                                                           // 219\n    this.isRendered = true;                                                                           // 220\n                                                                                                      // 221\n    this._layout.insert({                                                                             // 222\n      // insert into the document body element                                                        // 223\n      el: document.body,                                                                              // 224\n                                                                                                      // 225\n      // come back and make this body at some point                                                   // 226\n      parentComponent: null                                                                           // 227\n    });                                                                                               // 228\n  },                                                                                                  // 229\n                                                                                                      // 230\n  bindEvents: function () {                                                                           // 231\n    $(document).on('click.ironRouter', this.options.linkSelector, _.bind(this.onClick, this));        // 232\n  },                                                                                                  // 233\n                                                                                                      // 234\n  unbindEvents: function () {                                                                         // 235\n    $(document).off('click.ironRouter', this.options.linkSelector);                                   // 236\n  },                                                                                                  // 237\n                                                                                                      // 238\n  /**                                                                                                 // 239\n   * Start listening to click events and set up a Deps.autorun for location                           // 240\n   * changes. If already started the method just returns.                                             // 241\n   *                                                                                                  // 242\n   * @api public                                                                                      // 243\n   */                                                                                                 // 244\n                                                                                                      // 245\n  start: function () {                                                                                // 246\n    var self = this;                                                                                  // 247\n                                                                                                      // 248\n    if (self.isStarted) return;                                                                       // 249\n                                                                                                      // 250\n    self.isStarted = true;                                                                            // 251\n                                                                                                      // 252\n    self._location = self.options.location || IronLocation;                                           // 253\n    self._location.start();                                                                           // 254\n                                                                                                      // 255\n    self.bindEvents();                                                                                // 256\n                                                                                                      // 257\n    Deps.autorun(function (c) {                                                                       // 258\n      var location;                                                                                   // 259\n      self._locationComputation = c;                                                                  // 260\n      self.dispatch(self._location.path(), {state: history.state});                                   // 261\n    });                                                                                               // 262\n  },                                                                                                  // 263\n                                                                                                      // 264\n  /**                                                                                                 // 265\n   * Remove click event listener and stop listening for location changes.                             // 266\n   *                                                                                                  // 267\n   * @api public                                                                                      // 268\n   */                                                                                                 // 269\n                                                                                                      // 270\n  stop: function () {                                                                                 // 271\n    this.isStarted = false;                                                                           // 272\n                                                                                                      // 273\n    this.unbindEvents();                                                                              // 274\n    this._location.stop();                                                                            // 275\n                                                                                                      // 276\n    if (this._locationComputation)                                                                    // 277\n      this._locationComputation.stop();                                                               // 278\n  },                                                                                                  // 279\n                                                                                                      // 280\n  /**                                                                                                 // 281\n   * If we don't handle a link but the server does, bail to the server                                // 282\n   *                                                                                                  // 283\n   * @api public                                                                                      // 284\n   */                                                                                                 // 285\n  onUnhandled: function (path, options) {                                                             // 286\n    window.location = path;                                                                           // 287\n  },                                                                                                  // 288\n                                                                                                      // 289\n  /**                                                                                                 // 290\n   * if we don't handle a link, _and_ the  server doesn't handle it,                                  // 291\n   * do one of two things:                                                                            // 292\n   *   a) if this is the initial route, then it can't be a static asset, so                           // 293\n   *      show notFound or throw an error                                                             // 294\n   *   b) otherwise, let the server have a go at it, we may end up coming back.                       // 295\n   *                                                                                                  // 296\n   * @api public                                                                                      // 297\n   */                                                                                                 // 298\n  onRouteNotFound: function (path, options) {                                                         // 299\n    if (this._location.path() !== path) {                                                             // 300\n      window.location = path;                                                                         // 301\n    } else if (this.options.notFoundTemplate) {                                                       // 302\n      var notFoundRoute = new Route(this, '__notfound__', _.extend(options || {}, {path: path}));     // 303\n      this.run(new RouteController(this, notFoundRoute, {                                             // 304\n        layoutTemplate: this.options.layoutTemplate,                                                  // 305\n        template: this.options.notFoundTemplate                                                       // 306\n      }));                                                                                            // 307\n    } else {                                                                                          // 308\n      throw new Error('Oh no! No route found for path: \"' + path + '\"');                              // 309\n    }                                                                                                 // 310\n  },                                                                                                  // 311\n                                                                                                      // 312\n  onClick: function(e) {                                                                              // 313\n    var el = e.currentTarget;                                                                         // 314\n    var which = _.isUndefined(e.which) ? e.button : e.which;                                          // 315\n    var href = el.href;                                                                               // 316\n    var path = el.pathname + el.search + el.hash;                                                     // 317\n                                                                                                      // 318\n    // ie9 omits the leading slash in pathname - so patch up if it's missing                          // 319\n    path = path.replace(/(^\\/?)/,\"/\");                                                                // 320\n                                                                                                      // 321\n    // we only want to handle clicks on links which:                                                  // 322\n    // - haven't been cancelled already                                                               // 323\n    if (e.isDefaultPrevented())                                                                       // 324\n      return;                                                                                         // 325\n                                                                                                      // 326\n    //  - are with the left mouse button with no meta key pressed                                     // 327\n    if (which !== 1)                                                                                  // 328\n      return;                                                                                         // 329\n                                                                                                      // 330\n    if (e.metaKey || e.ctrlKey || e.shiftKey)                                                         // 331\n      return;                                                                                         // 332\n                                                                                                      // 333\n    // - aren't in a new window                                                                       // 334\n    if (el.target)                                                                                    // 335\n      return;                                                                                         // 336\n                                                                                                      // 337\n    // - aren't external to the app                                                                   // 338\n    if (!IronLocation.isSameOrigin(href))                                                             // 339\n      return;                                                                                         // 340\n                                                                                                      // 341\n    // note that we _do_ handle links which point to the current URL                                  // 342\n    // and links which only change the hash.                                                          // 343\n    e.preventDefault();                                                                               // 344\n    this.go(path);                                                                                    // 345\n  }                                                                                                   // 346\n});                                                                                                   // 347\n                                                                                                      // 348\n/**                                                                                                   // 349\n * The main Router instance that clients will deal with                                               // 350\n *                                                                                                    // 351\n * @api public                                                                                        // 352\n * @exports Router                                                                                    // 353\n */                                                                                                   // 354\n                                                                                                      // 355\nRouter = new IronRouter;                                                                              // 356\n                                                                                                      // 357\nif (Meteor._reload) {                                                                                 // 358\n  // just register the fact that a migration _has_ happened                                           // 359\n  Meteor._reload.onMigrate('iron-router', function() { return [true, true]});                         // 360\n                                                                                                      // 361\n  // then when we come back up, check if it it's set                                                  // 362\n  var data = Meteor._reload.migrationData('iron-router');                                             // 363\n  Router._hasJustReloaded = data;                                                                     // 364\n}                                                                                                     // 365\n                                                                                                      // 366\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1735\n                                                                                                             // 1736\n}).call(this);                                                                                               // 1737\n                                                                                                             // 1738\n                                                                                                             // 1739\n                                                                                                             // 1740\n                                                                                                             // 1741\n                                                                                                             // 1742\n                                                                                                             // 1743\n(function () {                                                                                               // 1744\n                                                                                                             // 1745\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1746\n//                                                                                                    //     // 1747\n// packages/iron:router/lib/client/wait_list.js                                                       //     // 1748\n//                                                                                                    //     // 1749\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1750\n                                                                                                      //     // 1751\n/*****************************************************************************/                       // 1   // 1752\n/* Imports */                                                                                         // 2   // 1753\n/*****************************************************************************/                       // 3   // 1754\nvar assert = Iron.utils.assert;                                                                       // 4   // 1755\n                                                                                                      // 5   // 1756\n/*****************************************************************************/                       // 6   // 1757\n/* Private */                                                                                         // 7   // 1758\n/*****************************************************************************/                       // 8   // 1759\n                                                                                                      // 9   // 1760\n/**                                                                                                   // 10  // 1761\n * Returns an object of computation ids starting with                                                 // 11  // 1762\n * the current computation and including all ancestor                                                 // 12  // 1763\n * computations. The data structure is an object                                                      // 13  // 1764\n * so we can index by id and do quick checks.                                                         // 14  // 1765\n */                                                                                                   // 15  // 1766\nvar parentComputations = function () {                                                                // 16  // 1767\n  var list = {};                                                                                      // 17  // 1768\n  var c = Deps.currentComputation;                                                                    // 18  // 1769\n                                                                                                      // 19  // 1770\n  while (c) {                                                                                         // 20  // 1771\n    list[String(c._id)] = true;                                                                       // 21  // 1772\n    c = c._parent;                                                                                    // 22  // 1773\n  }                                                                                                   // 23  // 1774\n                                                                                                      // 24  // 1775\n  return list;                                                                                        // 25  // 1776\n};                                                                                                    // 26  // 1777\n                                                                                                      // 27  // 1778\n/**                                                                                                   // 28  // 1779\n * Check whether the user has called ready() and then called wait(). This                             // 29  // 1780\n * can cause a condition that can be simplified to this:                                              // 30  // 1781\n *                                                                                                    // 31  // 1782\n * dep = new Deps.Dependency;                                                                         // 32  // 1783\n *                                                                                                    // 33  // 1784\n * Deps.autorun(function () {                                                                         // 34  // 1785\n *   dep.depend();                                                                                    // 35  // 1786\n *   dep.changed();                                                                                   // 36  // 1787\n * });                                                                                                // 37  // 1788\n */                                                                                                   // 38  // 1789\nvar assertNoInvalidationLoop = function (dependency) {                                                // 39  // 1790\n  var parentComps = parentComputations();                                                             // 40  // 1791\n  var depCompIds = Object.keys(dependency._dependentsById);                                           // 41  // 1792\n                                                                                                      // 42  // 1793\n  depCompIds.forEach(function (id) {                                                                  // 43  // 1794\n    assert(!parentComps[id], \"\\n\\n\\\nYou called wait() after calling ready() inside the same computation tree.\\\n\\n\\n\\\nYou can fix this problem in two possible ways:\\n\\n\\\n1) Put all of your wait() calls before any ready() calls.\\n\\\n2) Put your ready() call in its own computation with Deps.autorun.\"                                   // 49  // 1800\n    );                                                                                                // 50  // 1801\n  });                                                                                                 // 51  // 1802\n};                                                                                                    // 52  // 1803\n                                                                                                      // 53  // 1804\n                                                                                                      // 54  // 1805\n/*****************************************************************************/                       // 55  // 1806\n/* WaitList */                                                                                        // 56  // 1807\n/*****************************************************************************/                       // 57  // 1808\n/**                                                                                                   // 58  // 1809\n * A WaitList tracks a list of reactive functions, each in its own computation.                       // 59  // 1810\n * The list is ready() when all of the functions return true. This list is not                        // 60  // 1811\n * ready (i.e. this.ready() === false) if at least one function returns false.                        // 61  // 1812\n *                                                                                                    // 62  // 1813\n * You add functions by calling the wait(fn) method. Each function is run its                         // 63  // 1814\n * own computation. The ready() method is a reactive method but only calls the                        // 64  // 1815\n * deps changed function if the overall state of the list changes from true to                        // 65  // 1816\n * false or from false to true.                                                                       // 66  // 1817\n */                                                                                                   // 67  // 1818\nWaitList = function () {                                                                              // 68  // 1819\n  this._readyDep = new Deps.Dependency;                                                               // 69  // 1820\n  this._comps = [];                                                                                   // 70  // 1821\n  this._notReadyCount = 0;                                                                            // 71  // 1822\n};                                                                                                    // 72  // 1823\n                                                                                                      // 73  // 1824\n/**                                                                                                   // 74  // 1825\n * Pass a function that returns true or false.                                                        // 75  // 1826\n */                                                                                                   // 76  // 1827\nWaitList.prototype.wait = function (fn) {                                                             // 77  // 1828\n  var self = this;                                                                                    // 78  // 1829\n                                                                                                      // 79  // 1830\n  var activeComp = Deps.currentComputation;                                                           // 80  // 1831\n                                                                                                      // 81  // 1832\n  assertNoInvalidationLoop(self._readyDep);                                                           // 82  // 1833\n                                                                                                      // 83  // 1834\n  // break with parent computation and grab the new comp                                              // 84  // 1835\n  Deps.nonreactive(function () {                                                                      // 85  // 1836\n                                                                                                      // 86  // 1837\n    // store the cached result so we can see if it's different from one run to                        // 87  // 1838\n    // the next.                                                                                      // 88  // 1839\n    var cachedResult = null;                                                                          // 89  // 1840\n                                                                                                      // 90  // 1841\n    // create a computation for this handle                                                           // 91  // 1842\n    var comp = Deps.autorun(function (c) {                                                            // 92  // 1843\n      // let's get the new result coerced into a true or false value.                                 // 93  // 1844\n      var result = !!fn();                                                                            // 94  // 1845\n                                                                                                      // 95  // 1846\n      var oldNotReadyCount = self._notReadyCount;                                                     // 96  // 1847\n                                                                                                      // 97  // 1848\n      // if it's the first run and we're false then inc                                               // 98  // 1849\n      if (c.firstRun && !result)                                                                      // 99  // 1850\n        self._notReadyCount++;                                                                        // 100\n      else if (cachedResult !== null && result !== cachedResult && result === true)                   // 101\n        self._notReadyCount--;                                                                        // 102\n      else if (cachedResult !== null && result !== cachedResult && result === false)                  // 103\n        self._notReadyCount++;                                                                        // 104\n                                                                                                      // 105\n      cachedResult = result;                                                                          // 106\n                                                                                                      // 107\n      if (oldNotReadyCount === 0 && self._notReadyCount > 0)                                          // 108\n        self._readyDep.changed();                                                                     // 109\n      else if (oldNotReadyCount > 0 && self._notReadyCount === 0)                                     // 110\n        self._readyDep.changed();                                                                     // 111\n    });                                                                                               // 112\n                                                                                                      // 113\n    self._comps.push(comp);                                                                           // 114\n                                                                                                      // 115\n    if (activeComp) {                                                                                 // 116\n      activeComp.onInvalidate(function () {                                                           // 117\n        // keep the old computation and notReadyCount the same for one                                // 118\n        // flush cycle so that we don't end up in an intermediate state                               // 119\n        // where list.ready() is not correct.                                                         // 120\n                                                                                                      // 121\n        // keep the state the same until the flush cycle is complete                                  // 122\n        Deps.afterFlush(function () {                                                                 // 123\n          // stop the computation                                                                     // 124\n          comp.stop();                                                                                // 125\n                                                                                                      // 126\n          // remove the computation from the list                                                     // 127\n          self._comps.splice(_.indexOf(self._comps, comp), 1);                                        // 128\n                                                                                                      // 129\n          if (cachedResult === false) {                                                               // 130\n            self._notReadyCount--;                                                                    // 131\n                                                                                                      // 132\n            if (self._notReadyCount === 0)                                                            // 133\n              self._readyDep.changed();                                                               // 134\n          }                                                                                           // 135\n        });                                                                                           // 136\n      });                                                                                             // 137\n    }                                                                                                 // 138\n  });                                                                                                 // 139\n};                                                                                                    // 140\n                                                                                                      // 141\nWaitList.prototype.ready = function () {                                                              // 142\n  this._readyDep.depend();                                                                            // 143\n  return this._notReadyCount === 0;                                                                   // 144\n};                                                                                                    // 145\n                                                                                                      // 146\nWaitList.prototype.stop = function () {                                                               // 147\n  _.each(this._comps, function (c) { c.stop(); });                                                    // 148\n  this._comps = [];                                                                                   // 149\n};                                                                                                    // 150\n                                                                                                      // 151\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1903\n                                                                                                             // 1904\n}).call(this);                                                                                               // 1905\n                                                                                                             // 1906\n                                                                                                             // 1907\n                                                                                                             // 1908\n                                                                                                             // 1909\n                                                                                                             // 1910\n                                                                                                             // 1911\n(function () {                                                                                               // 1912\n                                                                                                             // 1913\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1914\n//                                                                                                    //     // 1915\n// packages/iron:router/lib/client/hooks.js                                                           //     // 1916\n//                                                                                                    //     // 1917\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1918\n                                                                                                      //     // 1919\nRouter.hooks = {                                                                                      // 1   // 1920\n  dataNotFound: function (pause) {                                                                    // 2   // 1921\n    var tmpl;                                                                                         // 3   // 1922\n                                                                                                      // 4   // 1923\n    if (!this.ready())                                                                                // 5   // 1924\n      return;                                                                                         // 6   // 1925\n                                                                                                      // 7   // 1926\n    if (!this._hasData())                                                                             // 8   // 1927\n      return;                                                                                         // 9   // 1928\n                                                                                                      // 10  // 1929\n    var data = this.data();                                                                           // 11  // 1930\n                                                                                                      // 12  // 1931\n    if (data === false || data === null || typeof data === 'undefined') {                             // 13  // 1932\n      tmpl = this.lookupProperty('notFoundTemplate');                                                 // 14  // 1933\n                                                                                                      // 15  // 1934\n      if (tmpl) {                                                                                     // 16  // 1935\n        this.render(tmpl);                                                                            // 17  // 1936\n        this.renderRegions();                                                                         // 18  // 1937\n        pause();                                                                                      // 19  // 1938\n      }                                                                                               // 20  // 1939\n    }                                                                                                 // 21  // 1940\n  },                                                                                                  // 22  // 1941\n                                                                                                      // 23  // 1942\n  loading: function (pause) {                                                                         // 24  // 1943\n    var self = this;                                                                                  // 25  // 1944\n    var tmpl;                                                                                         // 26  // 1945\n                                                                                                      // 27  // 1946\n    if (!this.ready()) {                                                                              // 28  // 1947\n      tmpl = this.lookupProperty('loadingTemplate');                                                  // 29  // 1948\n                                                                                                      // 30  // 1949\n      if (tmpl) {                                                                                     // 31  // 1950\n        this.render(tmpl);                                                                            // 32  // 1951\n        this.renderRegions();                                                                         // 33  // 1952\n        pause();                                                                                      // 34  // 1953\n      }                                                                                               // 35  // 1954\n    }                                                                                                 // 36  // 1955\n  }                                                                                                   // 37  // 1956\n};                                                                                                    // 38  // 1957\n                                                                                                      // 39  // 1958\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1959\n                                                                                                             // 1960\n}).call(this);                                                                                               // 1961\n                                                                                                             // 1962\n                                                                                                             // 1963\n                                                                                                             // 1964\n                                                                                                             // 1965\n                                                                                                             // 1966\n                                                                                                             // 1967\n(function () {                                                                                               // 1968\n                                                                                                             // 1969\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1970\n//                                                                                                    //     // 1971\n// packages/iron:router/lib/client/route_controller.js                                                //     // 1972\n//                                                                                                    //     // 1973\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1974\n                                                                                                      //     // 1975\nvar isLogging = false;                                                                                // 1   // 1976\nvar log = function (msg) {                                                                            // 2   // 1977\n  if (!isLogging)                                                                                     // 3   // 1978\n    return;                                                                                           // 4   // 1979\n  console.log('%c<RouteController> ' + msg, 'color: purple; font-size: 1.3em; font-weight: bold;');   // 5   // 1980\n};                                                                                                    // 6   // 1981\n                                                                                                      // 7   // 1982\nvar bindData = function (value, thisArg) {                                                            // 8   // 1983\n  return function () {                                                                                // 9   // 1984\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;                   // 10  // 1985\n  };                                                                                                  // 11  // 1986\n};                                                                                                    // 12  // 1987\n                                                                                                      // 13  // 1988\nRouteController = Utils.extend(RouteController, {                                                     // 14  // 1989\n  constructor: function () {                                                                          // 15  // 1990\n    var self = this;                                                                                  // 16  // 1991\n                                                                                                      // 17  // 1992\n    RouteController.__super__.constructor.apply(this, arguments);                                     // 18  // 1993\n                                                                                                      // 19  // 1994\n    this._waitList = new WaitList;                                                                    // 20  // 1995\n                                                                                                      // 21  // 1996\n    //XXX putting this back so people can access data by calling                                      // 22  // 1997\n    //this.data().                                                                                    // 23  // 1998\n                                                                                                      // 24  // 1999\n    var data = this.lookupProperty('data');                                                           // 25  // 2000\n                                                                                                      // 26  // 2001\n    this._hasData = function () { return typeof data !== 'undefined'; };                              // 27  // 2002\n    this.data = bindData(data, this);                                                                 // 28  // 2003\n                                                                                                      // 29  // 2004\n    // proxy these methods to the router                                                              // 30  // 2005\n    _.each([                                                                                          // 31  // 2006\n      'layout',                                                                                       // 32  // 2007\n      'setRegion',                                                                                    // 33  // 2008\n      'clearRegion'                                                                                   // 34  // 2009\n    ], function (routerApiMethod) {                                                                   // 35  // 2010\n      self[routerApiMethod] = function () {                                                           // 36  // 2011\n        if (!self.router)                                                                             // 37  // 2012\n          throw new Error(\"No router defined on RouteController\");                                    // 38  // 2013\n        return self.router[routerApiMethod].apply(self.router, arguments);                            // 39  // 2014\n      };                                                                                              // 40  // 2015\n    });                                                                                               // 41  // 2016\n  },                                                                                                  // 42  // 2017\n                                                                                                      // 43  // 2018\n  setLayout: function () {                                                                            // 44  // 2019\n    return this.layout.apply(this, arguments);                                                        // 45  // 2020\n  },                                                                                                  // 46  // 2021\n                                                                                                      // 47  // 2022\n  ready: function () {                                                                                // 48  // 2023\n    return this._waitList.ready();                                                                    // 49  // 2024\n  },                                                                                                  // 50  // 2025\n                                                                                                      // 51  // 2026\n  /**                                                                                                 // 52  // 2027\n   * Stop running this controller and redirect to a new path. Same parameters as                      // 53  // 2028\n   * those of Router.go.                                                                              // 54  // 2029\n   * @api public                                                                                      // 55  // 2030\n   */                                                                                                 // 56  // 2031\n                                                                                                      // 57  // 2032\n  redirect: function (/* args */) {                                                                   // 58  // 2033\n    return Router.go.apply(Router, arguments);                                                        // 59  // 2034\n  },                                                                                                  // 60  // 2035\n                                                                                                      // 61  // 2036\n  subscribe: function (/* same as Meteor.subscribe */) {                                              // 62  // 2037\n    var self = this;                                                                                  // 63  // 2038\n    var handle = Meteor.subscribe.apply(this, arguments);                                             // 64  // 2039\n                                                                                                      // 65  // 2040\n    return _.extend(handle, {                                                                         // 66  // 2041\n      wait: function () {                                                                             // 67  // 2042\n        self.wait(this);                                                                              // 68  // 2043\n      }                                                                                               // 69  // 2044\n    });                                                                                               // 70  // 2045\n  },                                                                                                  // 71  // 2046\n                                                                                                      // 72  // 2047\n  lookupLayoutTemplate: function () {                                                                 // 73  // 2048\n    return this.lookupProperty('layoutTemplate');                                                     // 74  // 2049\n  },                                                                                                  // 75  // 2050\n                                                                                                      // 76  // 2051\n  lookupTemplate: function () {                                                                       // 77  // 2052\n    return this.lookupProperty('template')                                                            // 78  // 2053\n      || Router.convertTemplateName(this.route.name);                                                 // 79  // 2054\n  },                                                                                                  // 80  // 2055\n                                                                                                      // 81  // 2056\n  lookupRegionTemplates: function () {                                                                // 82  // 2057\n    var res;                                                                                          // 83  // 2058\n                                                                                                      // 84  // 2059\n    if (res = this.lookupProperty('regionTemplates'))                                                 // 85  // 2060\n      return res;                                                                                     // 86  // 2061\n    else if (res = this.lookupProperty('yieldTemplates'))                                             // 87  // 2062\n      return res;                                                                                     // 88  // 2063\n    else                                                                                              // 89  // 2064\n      return {};                                                                                      // 90  // 2065\n  },                                                                                                  // 91  // 2066\n                                                                                                      // 92  // 2067\n  /**                                                                                                 // 93  // 2068\n   * Return an array of waitOn values in the folowing order (although, ordering                       // 94  // 2069\n   * shouldn't really matter for waitOn). The result may contain sub arrays like                      // 95  // 2070\n   * this:                                                                                            // 96  // 2071\n   *   [[fn1, fn2], [fn3, fn4]]                                                                       // 97  // 2072\n   *                                                                                                  // 98  // 2073\n   *   1. Router options                                                                              // 99  // 2074\n   *   2. Route options                                                                               // 100\n   *   3. Controller options                                                                          // 101\n   *   4. Controller instance                                                                         // 102\n   */                                                                                                 // 103\n                                                                                                      // 104\n  lookupWaitOn: function () {                                                                         // 105\n    var toArray = Utils.toArray;                                                                      // 106\n                                                                                                      // 107\n    var fromRouterHook = toArray(this.router.getHooks('waitOn', this.route.name));                    // 108\n    var fromRouterOptions = toArray(this.router.options.waitOn);                                      // 109\n    var fromRouteOptions = toArray(this.route.options.waitOn);                                        // 110\n    var fromMyOptions = toArray(this.options.waitOn);                                                 // 111\n    var fromInstOptions = toArray(this.waitOn);                                                       // 112\n                                                                                                      // 113\n    return fromRouterHook                                                                             // 114\n      .concat(fromRouterOptions)                                                                      // 115\n      .concat(fromRouteOptions)                                                                       // 116\n      .concat(fromMyOptions)                                                                          // 117\n      .concat(fromInstOptions);                                                                       // 118\n  },                                                                                                  // 119\n                                                                                                      // 120\n  /**                                                                                                 // 121\n   * Either specify a template to render or call with no arguments to render the                      // 122\n   * RouteController's template plus all of the yieldTemplates.                                       // 123\n   *                                                                                                  // 124\n   * XXX can we have some hooks here? would be nice to give                                           // 125\n   * iron-transitioner a place to plug in. Maybe onSetRegion(fn)?                                     // 126\n   */                                                                                                 // 127\n                                                                                                      // 128\n  render: function (template, options) {                                                              // 129\n    var to;                                                                                           // 130\n    var template;                                                                                     // 131\n    var layout;                                                                                       // 132\n    var self = this;                                                                                  // 133\n                                                                                                      // 134\n    if (arguments.length == 0) {                                                                      // 135\n      this.setRegion(this.lookupTemplate());                                                          // 136\n      this.renderRegions();                                                                           // 137\n    } else {                                                                                          // 138\n      options = options || {};                                                                        // 139\n      to = options.to;                                                                                // 140\n      this.setRegion(to, template);                                                                   // 141\n    }                                                                                                 // 142\n  },                                                                                                  // 143\n                                                                                                      // 144\n  renderRegions: function() {                                                                         // 145\n    var self = this;                                                                                  // 146\n    var regionTemplates = this.lookupRegionTemplates();                                               // 147\n                                                                                                      // 148\n    _.each(regionTemplates, function (opts, tmpl) {                                                   // 149\n      self.render(tmpl, opts)                                                                         // 150\n    });                                                                                               // 151\n  },                                                                                                  // 152\n                                                                                                      // 153\n  /**                                                                                                 // 154\n   * Add an item to the waitlist.                                                                     // 155\n   */                                                                                                 // 156\n  wait: function (fn) {                                                                               // 157\n    var self = this;                                                                                  // 158\n                                                                                                      // 159\n    if (!fn)                                                                                          // 160\n      // it's possible fn is just undefined but we'll just return instead                             // 161\n      // of throwing an error, to make it easier to call this function                                // 162\n      // with waitOn which might not return anything.                                                 // 163\n      return;                                                                                         // 164\n                                                                                                      // 165\n    if (_.isArray(fn)) {                                                                              // 166\n      _.each(fn, function eachWait (fnOrHandle) {                                                     // 167\n        self.wait(fnOrHandle);                                                                        // 168\n      });                                                                                             // 169\n    } else if (fn.ready) {                                                                            // 170\n      this._waitList.wait(function () { return fn.ready(); });                                        // 171\n    } else {                                                                                          // 172\n      this._waitList.wait(fn);                                                                        // 173\n    }                                                                                                 // 174\n                                                                                                      // 175\n    return this;                                                                                      // 176\n  },                                                                                                  // 177\n                                                                                                      // 178\n  action: function () {                                                                               // 179\n    this.render();                                                                                    // 180\n  },                                                                                                  // 181\n                                                                                                      // 182\n  /**                                                                                                 // 183\n   * A private method that the Router can call into to                                                // 184\n   * stop the controller. The reason we need this is because we                                       // 185\n   * don't want users calling stop() in their hooks/action like they                                  // 186\n   * had done previously. We now want them to call pause(). stop() now                                // 187\n   * completely stops the controller and tears down its computations. pause()                         // 188\n   * just stopps running downstream functions (e.g. when you're running                               // 189\n   * before/action/after functions. But if the outer computation causes the                           // 190\n   * entire chain of functions to run again that's fine.                                              // 191\n   */                                                                                                 // 192\n  _stopController: function (cb) {                                                                    // 193\n    var self = this;                                                                                  // 194\n                                                                                                      // 195\n    // noop if we're already stopped                                                                  // 196\n    if (this.isStopped)                                                                               // 197\n      return;                                                                                         // 198\n                                                                                                      // 199\n    var onStop = function () {                                                                        // 200\n      RouteController.__super__._stopController.call(self, cb);                                       // 201\n    };                                                                                                // 202\n                                                                                                      // 203\n    if (this._computation) {                                                                          // 204\n      this._computation.stop();                                                                       // 205\n      this._computation.onInvalidate(onStop);                                                         // 206\n    } else {                                                                                          // 207\n      onStop();                                                                                       // 208\n    }                                                                                                 // 209\n  },                                                                                                  // 210\n                                                                                                      // 211\n  _run: function () {                                                                                 // 212\n    var self = this;                                                                                  // 213\n    var layout = self.router._layout;                                                                 // 214\n                                                                                                      // 215\n    // if we're already running, you can't call run again without                                     // 216\n    // calling stop first.                                                                            // 217\n    if (self.isRunning)                                                                               // 218\n      throw new Error(\"You called _run without first calling stop\");                                  // 219\n                                                                                                      // 220\n    self.isRunning = true;                                                                            // 221\n    self.isStopped = false;                                                                           // 222\n                                                                                                      // 223\n    var withNoStopsAllowed = function (fn, thisArg) {                                                 // 224\n      return function () {                                                                            // 225\n        var oldStop = self.stop;                                                                      // 226\n                                                                                                      // 227\n        self.stop = function () {                                                                     // 228\n          if (typeof console !== 'undefined') {                                                       // 229\n            console.warn(\"You called this.stop() inside a hook or your action function but you should use pause() now instead which is the first parameter to the hook function.\");\n            return;                                                                                   // 231\n          }                                                                                           // 232\n        };                                                                                            // 233\n                                                                                                      // 234\n        try {                                                                                         // 235\n          return fn.apply(thisArg || this, arguments);                                                // 236\n        } finally {                                                                                   // 237\n          self.stop = oldStop;                                                                        // 238\n        }                                                                                             // 239\n      };                                                                                              // 240\n    };                                                                                                // 241\n                                                                                                      // 242\n    Deps.autorun(withNoStopsAllowed(function (c) {                                                    // 243\n      // outer most computation is just used to stop inner computations from one                      // 244\n      // place. Is stopped when the route is routed away from, which includes                         // 245\n      // if an route action redirects away.                                                           // 246\n      self._computation = c;                                                                          // 247\n                                                                                                      // 248\n      Deps.autorun(withNoStopsAllowed(function (onRunComp) {                                          // 249\n        if (!self.router._hasJustReloaded && c.firstRun && onRunComp.firstRun)                        // 250\n          self.runHooks('onRun');                                                                     // 251\n        self.router._hasJustReloaded = false;                                                         // 252\n      }));                                                                                            // 253\n                                                                                                      // 254\n      Deps.autorun(function (c) {                                                                     // 255\n        // waitOn                                                                                     // 256\n        var waitOnList = self.lookupWaitOn();                                                         // 257\n        var waitOn = _.flatten(_.map(waitOnList, function (fnOrHandle) {                              // 258\n          return _.isFunction(fnOrHandle) ? fnOrHandle.call(self) : fnOrHandle;                       // 259\n        }));                                                                                          // 260\n                                                                                                      // 261\n        log('waitOn');                                                                                // 262\n                                                                                                      // 263\n        self.wait(waitOn);                                                                            // 264\n      });                                                                                             // 265\n                                                                                                      // 266\n      Deps.autorun(function (c) {                                                                     // 267\n        // if we're already in a renderig transaction we want to cancel the                           // 268\n        // transaction. So the previous afterFlush callback should just be a                          // 269\n        // noop, and the new afterflush callback should do what's required. But                       // 270\n        // we need to keep a stack of these                                                           // 271\n        self.router._layout.beginRendering(function onCompleteRenderingTransaction (usedRegions) {    // 272\n          if (self.isStopped)                                                                         // 273\n            return;                                                                                   // 274\n          var allRegions = layout.regionKeys();                                                       // 275\n          var unusedRegions = _.difference(allRegions, usedRegions);                                  // 276\n          _.each(unusedRegions, function (r) { layout.clear(r); });                                   // 277\n        });                                                                                           // 278\n                                                                                                      // 279\n        // action                                                                                     // 280\n        var action = _.isFunction(self.action) ? self.action : self[self.action];                     // 281\n        Utils.assert(action,                                                                          // 282\n          \"You don't have an action named \\\"\" + self.action + \"\\\" defined on your RouteController\");  // 283\n                                                                                                      // 284\n        // Set layout to configured layoutTemplate                                                    // 285\n        self.layout(self.lookupLayoutTemplate(), {                                                    // 286\n          data: self.lookupProperty('data')                                                           // 287\n        });                                                                                           // 288\n                                                                                                      // 289\n        self.runHooks('onBeforeAction', [], function (paused) {                                       // 290\n          if (self.isStopped)                                                                         // 291\n            return;                                                                                   // 292\n                                                                                                      // 293\n          if (!paused) {                                                                              // 294\n            action.call(self);                                                                        // 295\n                                                                                                      // 296\n            if (!self.isStopped) {                                                                    // 297\n              self.runHooks('onAfterAction');                                                         // 298\n            }                                                                                         // 299\n          }                                                                                           // 300\n        });                                                                                           // 301\n      });                                                                                             // 302\n    }));                                                                                              // 303\n  }                                                                                                   // 304\n});                                                                                                   // 305\n                                                                                                      // 306\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2282\n                                                                                                             // 2283\n}).call(this);                                                                                               // 2284\n                                                                                                             // 2285\n                                                                                                             // 2286\n                                                                                                             // 2287\n                                                                                                             // 2288\n                                                                                                             // 2289\n                                                                                                             // 2290\n(function () {                                                                                               // 2291\n                                                                                                             // 2292\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2293\n//                                                                                                    //     // 2294\n// packages/iron:router/lib/client/ui/helpers.js                                                      //     // 2295\n//                                                                                                    //     // 2296\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2297\n                                                                                                      //     // 2298\nRouter.helpers = {};                                                                                  // 1   // 2299\n                                                                                                      // 2   // 2300\nvar getData = function (thisArg) {                                                                    // 3   // 2301\n  return thisArg === window ? {} : thisArg;                                                           // 4   // 2302\n};                                                                                                    // 5   // 2303\n                                                                                                      // 6   // 2304\nvar processPathArgs = function (routeName, options) {                                                 // 7   // 2305\n  if (_.isObject(routeName)) {                                                                        // 8   // 2306\n    options = routeName;                                                                              // 9   // 2307\n    routeName = options.route;                                                                        // 10  // 2308\n  }                                                                                                   // 11  // 2309\n                                                                                                      // 12  // 2310\n  var opts = options.hash || {};                                                                      // 13  // 2311\n  var params = opts.params || _.omit(opts, 'hash', 'query');                                          // 14  // 2312\n  var hash = opts.hash;                                                                               // 15  // 2313\n  var query = opts.query;                                                                             // 16  // 2314\n                                                                                                      // 17  // 2315\n  // if called without opts, use the data context of the parent                                       // 18  // 2316\n  if (_.isEmpty(opts))                                                                                // 19  // 2317\n    params = getData(this);                                                                           // 20  // 2318\n                                                                                                      // 21  // 2319\n  return {                                                                                            // 22  // 2320\n    routeName: routeName,                                                                             // 23  // 2321\n    params: params,                                                                                   // 24  // 2322\n    query: query,                                                                                     // 25  // 2323\n    hash: hash                                                                                        // 26  // 2324\n  };                                                                                                  // 27  // 2325\n};                                                                                                    // 28  // 2326\n                                                                                                      // 29  // 2327\n_.extend(Router.helpers, {                                                                            // 30  // 2328\n                                                                                                      // 31  // 2329\n  /**                                                                                                 // 32  // 2330\n   * Example Use:                                                                                     // 33  // 2331\n   *                                                                                                  // 34  // 2332\n   *  {{pathFor 'items' params=this}}                                                                 // 35  // 2333\n   *  {{pathFor 'items' id=5 query=\"view=all\" hash=\"somehash\"}}                                       // 36  // 2334\n   *  {{pathFor route='items' id=5 query=\"view=all\" hash=\"somehash\"}}                                 // 37  // 2335\n   */                                                                                                 // 38  // 2336\n                                                                                                      // 39  // 2337\n  pathFor: function (routeName, options) {                                                            // 40  // 2338\n    var args = processPathArgs.call(this, routeName, options);                                        // 41  // 2339\n                                                                                                      // 42  // 2340\n    return Router.path(args.routeName, args.params, {                                                 // 43  // 2341\n      query: args.query,                                                                              // 44  // 2342\n      hash: args.hash                                                                                 // 45  // 2343\n    });                                                                                               // 46  // 2344\n  },                                                                                                  // 47  // 2345\n                                                                                                      // 48  // 2346\n  /**                                                                                                 // 49  // 2347\n   * Same as pathFor but returns entire aboslute url.                                                 // 50  // 2348\n   *                                                                                                  // 51  // 2349\n   */                                                                                                 // 52  // 2350\n  urlFor: function (routeName, options) {                                                             // 53  // 2351\n    var args = processPathArgs.call(this, routeName, options);                                        // 54  // 2352\n                                                                                                      // 55  // 2353\n    return Router.url(args.routeName, args.params, {                                                  // 56  // 2354\n      query: args.query,                                                                              // 57  // 2355\n      hash: args.hash                                                                                 // 58  // 2356\n    });                                                                                               // 59  // 2357\n  }                                                                                                   // 60  // 2358\n});                                                                                                   // 61  // 2359\n                                                                                                      // 62  // 2360\n_.each(Router.helpers, function (helper, name) {                                                      // 63  // 2361\n  UI.registerHelper(name, helper);                                                                    // 64  // 2362\n});                                                                                                   // 65  // 2363\n                                                                                                      // 66  // 2364\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2365\n                                                                                                             // 2366\n}).call(this);                                                                                               // 2367\n                                                                                                             // 2368\n                                                                                                             // 2369\n                                                                                                             // 2370\n                                                                                                             // 2371\n                                                                                                             // 2372\n                                                                                                             // 2373\n(function () {                                                                                               // 2374\n                                                                                                             // 2375\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2376\n//                                                                                                    //     // 2377\n// packages/iron:router/lib/version_conflict_error.js                                                 //     // 2378\n//                                                                                                    //     // 2379\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2380\n                                                                                                      //     // 2381\nif (Package['cmather:iron-router']) {                                                                 // 1   // 2382\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                 // 17  // 2398\n}                                                                                                     // 18  // 2399\n                                                                                                      // 19  // 2400\n////////////////////////////////////////////////////////////////////////////////////////////////////////     // 2401\n                                                                                                             // 2402\n}).call(this);                                                                                               // 2403\n                                                                                                             // 2404\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:router'] = {\n  RouteController: RouteController,\n  Route: Route,\n  Router: Router,\n  IronLocation: IronLocation,\n  Utils: Utils,\n  IronRouter: IronRouter,\n  WaitList: WaitList\n};\n\n})();\n","servePath":"/packages/iron_router.js","sourceMap":{"version":3,"sources":["/packages/iron_router/packages/iron_router.js"],"names":[],"mappingsoH","file":"/packages/iron_router.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/utils.js                                                                  //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n/**                                                                                                   // 1\n * Utility methods available privately to the package.                                                // 2\n */                                                                                                   // 3\n                                                                                                      // 4\nUtils = {};                                                                                           // 5\n                                                                                                      // 6\n/**                                                                                                   // 7\n * global object on node or window object in the browser.                                             // 8\n */                                                                                                   // 9\n                                                                                                      // 10\nUtils.global = (function () { return this; })();                                                      // 11\n                                                                                                      // 12\n/**                                                                                                   // 13\n * Assert that the given condition is truthy.                                                         // 14\n *                                                                                                    // 15\n * @param {Boolean} condition The boolean condition to test for truthiness.                           // 16\n * @param {String} msg The error message to show if the condition is falsy.                           // 17\n */                                                                                                   // 18\n                                                                                                      // 19\nUtils.assert = function (condition, msg) {                                                            // 20\n  if (!condition)                                                                                     // 21\n    throw new Error(msg);                                                                             // 22\n};                                                                                                    // 23\n                                                                                                      // 24\nvar warn = function (msg) {                                                                           // 25\n  if (!Router || Router.options.supressWarnings !== true) {                                           // 26\n    console && console.warn && console.warn(msg);                                                     // 27\n  }                                                                                                   // 28\n};                                                                                                    // 29\n                                                                                                      // 30\nUtils.warn = function (condition, msg) {                                                              // 31\n  if (!condition)                                                                                     // 32\n    warn(msg);                                                                                        // 33\n};                                                                                                    // 34\n                                                                                                      // 35\n/**                                                                                                   // 36\n * deprecatation notice to the user which can be a string or object                                   // 37\n * of the form:                                                                                       // 38\n *                                                                                                    // 39\n * {                                                                                                  // 40\n *  name: 'somePropertyOrMethod',                                                                     // 41\n *  where: 'RouteController',                                                                         // 42\n *  instead: 'someOtherPropertyOrMethod',                                                             // 43\n *  message: ':name is deprecated. Please use :instead instead'                                       // 44\n * }                                                                                                  // 45\n */                                                                                                   // 46\nUtils.notifyDeprecated = function (info) {                                                            // 47\n  var name;                                                                                           // 48\n  var instead;                                                                                        // 49\n  var message;                                                                                        // 50\n  var where;                                                                                          // 51\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";              // 52\n                                                                                                      // 53\n  if (_.isObject(info)) {                                                                             // 54\n    name = info.name;                                                                                 // 55\n    instead = info.instead;                                                                           // 56\n    message = info.message || defaultMessage;                                                         // 57\n    where = info.where || 'IronRouter';                                                               // 58\n  } else {                                                                                            // 59\n    message = info;                                                                                   // 60\n    name = '';                                                                                        // 61\n    instead = '';                                                                                     // 62\n    where = '';                                                                                       // 63\n  }                                                                                                   // 64\n                                                                                                      // 65\n  warn(                                                                                               // 66\n      '<deprecated> ' +                                                                               // 67\n      message                                                                                         // 68\n      .replace(':name', name)                                                                         // 69\n      .replace(':instead', instead)                                                                   // 70\n      .replace(':where', where) +                                                                     // 71\n      ' ' +                                                                                           // 72\n      (new Error).stack                                                                               // 73\n  );                                                                                                  // 74\n};                                                                                                    // 75\n                                                                                                      // 76\nUtils.withDeprecatedNotice = function (info, fn, thisArg) {                                           // 77\n  return function () {                                                                                // 78\n    Utils.notifyDeprecated(info);                                                                     // 79\n    return fn && fn.apply(thisArg || this, arguments);                                                // 80\n  };                                                                                                  // 81\n};                                                                                                    // 82\n                                                                                                      // 83\n/**                                                                                                   // 84\n * Given the name of a property, resolves to the value. Works with namespacing                        // 85\n * too. If first parameter is already a value that isn't a string it's returned                       // 86\n * immediately.                                                                                       // 87\n *                                                                                                    // 88\n * Examples:                                                                                          // 89\n *  'SomeClass' => window.SomeClass || global.someClass                                               // 90\n *  'App.namespace.SomeClass' => window.App.namespace.SomeClass                                       // 91\n *                                                                                                    // 92\n * @param {String|Object} nameOrValue                                                                 // 93\n */                                                                                                   // 94\n                                                                                                      // 95\nUtils.resolveValue = function (nameOrValue) {                                                         // 96\n  var global = Utils.global;                                                                          // 97\n  var parts;                                                                                          // 98\n  var ptr;                                                                                            // 99\n                                                                                                      // 100\n  if (_.isString(nameOrValue)) {                                                                      // 101\n    parts = nameOrValue.split('.')                                                                    // 102\n    ptr = global;                                                                                     // 103\n    for (var i = 0; i < parts.length; i++) {                                                          // 104\n      ptr = ptr[parts[i]];                                                                            // 105\n      if (!ptr)                                                                                       // 106\n        return undefined;                                                                             // 107\n    }                                                                                                 // 108\n  } else {                                                                                            // 109\n    ptr = nameOrValue;                                                                                // 110\n  }                                                                                                   // 111\n                                                                                                      // 112\n  // final position of ptr should be the resolved value                                               // 113\n  return ptr;                                                                                         // 114\n};                                                                                                    // 115\n                                                                                                      // 116\nUtils.hasOwnProperty = function (obj, key) {                                                          // 117\n  var prop = {}.hasOwnProperty;                                                                       // 118\n  return prop.call(obj, key);                                                                         // 119\n};                                                                                                    // 120\n                                                                                                      // 121\n/**                                                                                                   // 122\n * Don't mess with this function. It's exactly the same as the compiled                               // 123\n * coffeescript mechanism. If you change it we can't guarantee that our code                          // 124\n * will work when used with Coffeescript. One exception is putting in a runtime                       // 125\n * check that both child and parent are of type Function.                                             // 126\n */                                                                                                   // 127\n                                                                                                      // 128\nUtils.inherits = function (child, parent) {                                                           // 129\n  if (Utils.typeOf(child) !== '[object Function]')                                                    // 130\n    throw new Error('First parameter to Utils.inherits must be a function');                          // 131\n                                                                                                      // 132\n  if (Utils.typeOf(parent) !== '[object Function]')                                                   // 133\n    throw new Error('Second parameter to Utils.inherits must be a function');                         // 134\n                                                                                                      // 135\n  for (var key in parent) {                                                                           // 136\n    if (Utils.hasOwnProperty(parent, key))                                                            // 137\n      child[key] = parent[key];                                                                       // 138\n  }                                                                                                   // 139\n                                                                                                      // 140\n  function ctor () {                                                                                  // 141\n    this.constructor = child;                                                                         // 142\n  }                                                                                                   // 143\n                                                                                                      // 144\n  ctor.prototype = parent.prototype;                                                                  // 145\n  child.prototype = new ctor();                                                                       // 146\n  child.__super__ = parent.prototype;                                                                 // 147\n  return child;                                                                                       // 148\n};                                                                                                    // 149\n                                                                                                      // 150\nUtils.toArray = function (obj) {                                                                      // 151\n  if (!obj)                                                                                           // 152\n    return [];                                                                                        // 153\n  else if (Utils.typeOf(obj) !== '[object Array]')                                                    // 154\n    return [obj];                                                                                     // 155\n  else                                                                                                // 156\n    return obj;                                                                                       // 157\n};                                                                                                    // 158\n                                                                                                      // 159\nUtils.typeOf = function (obj) {                                                                       // 160\n  if (obj && obj.typeName)                                                                            // 161\n    return obj.typeName;                                                                              // 162\n  else                                                                                                // 163\n    return Object.prototype.toString.call(obj);                                                       // 164\n};                                                                                                    // 165\n                                                                                                      // 166\nUtils.extend = function (Super, definition, onBeforeExtendPrototype) {                                // 167\n  if (arguments.length === 1)                                                                         // 168\n    definition = Super;                                                                               // 169\n  else {                                                                                              // 170\n    definition = definition || {};                                                                    // 171\n    definition.extend = Super;                                                                        // 172\n  }                                                                                                   // 173\n                                                                                                      // 174\n  return Utils.create(definition, {                                                                   // 175\n    onBeforeExtendPrototype: onBeforeExtendPrototype                                                  // 176\n  });                                                                                                 // 177\n};                                                                                                    // 178\n                                                                                                      // 179\nUtils.create = function (definition, options) {                                                       // 180\n  var Constructor                                                                                     // 181\n    , extendFrom                                                                                      // 182\n    , savedPrototype;                                                                                 // 183\n                                                                                                      // 184\n  options = options || {};                                                                            // 185\n  definition = definition || {};                                                                      // 186\n                                                                                                      // 187\n  if (Utils.hasOwnProperty(definition, 'constructor'))                                                // 188\n    Constructor = definition.constructor;                                                             // 189\n  else {                                                                                              // 190\n    Constructor = function () {                                                                       // 191\n      if (Constructor.__super__ && Constructor.__super__.constructor)                                 // 192\n        return Constructor.__super__.constructor.apply(this, arguments);                              // 193\n    }                                                                                                 // 194\n  }                                                                                                   // 195\n                                                                                                      // 196\n  extendFrom = definition.extend;                                                                     // 197\n                                                                                                      // 198\n  if (definition.extend) delete definition.extend;                                                    // 199\n                                                                                                      // 200\n  var inherit = function (Child, Super, prototype) {                                                  // 201\n    Utils.inherits(Child, Utils.resolveValue(Super));                                                 // 202\n    if (prototype) _.extend(Child.prototype, prototype);                                              // 203\n  };                                                                                                  // 204\n                                                                                                      // 205\n  if (extendFrom) {                                                                                   // 206\n    inherit(Constructor, extendFrom);                                                                 // 207\n  }                                                                                                   // 208\n                                                                                                      // 209\n  if (options.onBeforeExtendPrototype)                                                                // 210\n    options.onBeforeExtendPrototype.call(Constructor, definition);                                    // 211\n                                                                                                      // 212\n  _.extend(Constructor.prototype, definition);                                                        // 213\n                                                                                                      // 214\n  return Constructor;                                                                                 // 215\n};                                                                                                    // 216\n                                                                                                      // 217\nUtils.capitalize = function (str) {                                                                   // 218\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);                                      // 219\n};                                                                                                    // 220\n                                                                                                      // 221\nUtils.upperCamelCase = function (str) {                                                               // 222\n  var re = /_|-|\\./;                                                                                  // 223\n                                                                                                      // 224\n  if (!str)                                                                                           // 225\n    return '';                                                                                        // 226\n                                                                                                      // 227\n  return _.map(str.split(re), function (word) {                                                       // 228\n    return Utils.capitalize(word);                                                                    // 229\n  }).join('');                                                                                        // 230\n};                                                                                                    // 231\n                                                                                                      // 232\nUtils.camelCase = function (str) {                                                                    // 233\n  var output = Utils.upperCamelCase(str);                                                             // 234\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);                           // 235\n  return output;                                                                                      // 236\n};                                                                                                    // 237\n                                                                                                      // 238\nUtils.pick = function (/* args */) {                                                                  // 239\n  var args = _.toArray(arguments)                                                                     // 240\n    , arg;                                                                                            // 241\n  for (var i = 0; i < args.length; i++) {                                                             // 242\n    arg = args[i];                                                                                    // 243\n    if (typeof arg !== 'undefined' && arg !== null)                                                   // 244\n      return arg;                                                                                     // 245\n  }                                                                                                   // 246\n                                                                                                      // 247\n  return null;                                                                                        // 248\n};                                                                                                    // 249\n                                                                                                      // 250\nUtils.StringConverters = {                                                                            // 251\n  'none': function(input) {                                                                           // 252\n    return input;                                                                                     // 253\n  },                                                                                                  // 254\n                                                                                                      // 255\n  'upperCamelCase': function (input) {                                                                // 256\n    return Utils.upperCamelCase(input);                                                               // 257\n  },                                                                                                  // 258\n                                                                                                      // 259\n  'camelCase': function (input) {                                                                     // 260\n    return Utils.camelCase(input);                                                                    // 261\n  }                                                                                                   // 262\n};                                                                                                    // 263\n                                                                                                      // 264\nUtils.rewriteLegacyHooks = function (obj) {                                                           // 265\n  var legacyToNew = IronRouter.LEGACY_HOOK_TYPES;                                                     // 266\n                                                                                                      // 267\n  _.each(legacyToNew, function (newHook, oldHook) {                                                   // 268\n    // only look on the immediate object, not its                                                     // 269\n    // proto chain                                                                                    // 270\n    if (_.has(obj, oldHook)) {                                                                        // 271\n      hasOld = true;                                                                                  // 272\n      obj[newHook] = obj[oldHook];                                                                    // 273\n                                                                                                      // 274\n      Utils.notifyDeprecated({                                                                        // 275\n        where: 'RouteController',                                                                     // 276\n        name: oldHook,                                                                                // 277\n        instead: newHook                                                                              // 278\n      });                                                                                             // 279\n    }                                                                                                 // 280\n  });                                                                                                 // 281\n};                                                                                                    // 282\n                                                                                                      // 283\n                                                                                                      // 284\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/route.js                                                                  //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n/*                                                                                                    // 1\n * Inspiration and some code for the compilation of routes comes from pagejs.                         // 2\n * The original has been modified to better handle hash fragments, and to store                       // 3\n * the regular expression on the Route instance. Also, the resolve method has                         // 4\n * been added to return a resolved path given a parameters object.                                    // 5\n */                                                                                                   // 6\n                                                                                                      // 7\nRoute = function (router, name, options) {                                                            // 8\n  var path;                                                                                           // 9\n                                                                                                      // 10\n  Utils.assert(                                                                                       // 11\n    router instanceof IronRouter,                                                                     // 12\n    \"Route constructor first parameter must be a Router\");                                            // 13\n                                                                                                      // 14\n  Utils.assert(                                                                                       // 15\n    _.isString(name),                                                                                 // 16\n    \"Route constructor second parameter must be a String name\");                                      // 17\n                                                                                                      // 18\n  if (_.isFunction(options))                                                                          // 19\n    options = { handler: options };                                                                   // 20\n                                                                                                      // 21\n  options = this.options = options || {};                                                             // 22\n  path = options.path || ('/' + name);                                                                // 23\n                                                                                                      // 24\n  this.router = router;                                                                               // 25\n  this.originalPath = path;                                                                           // 26\n                                                                                                      // 27\n  if (_.isString(this.originalPath) && this.originalPath.charAt(0) !== '/')                           // 28\n    this.originalPath = '/' + this.originalPath;                                                      // 29\n                                                                                                      // 30\n  this.name = name;                                                                                   // 31\n  this.where = options.where || 'client';                                                             // 32\n  this.controller = options.controller;                                                               // 33\n  this.action = options.action;                                                                       // 34\n                                                                                                      // 35\n  if (typeof options.reactive !== 'undefined')                                                        // 36\n    this.isReactive = options.reactive;                                                               // 37\n  else                                                                                                // 38\n    this.isReactive = true;                                                                           // 39\n                                                                                                      // 40\n  Utils.rewriteLegacyHooks(this.options);                                                             // 41\n                                                                                                      // 42\n  this.compile();                                                                                     // 43\n};                                                                                                    // 44\n                                                                                                      // 45\nRoute.prototype = {                                                                                   // 46\n  constructor: Route,                                                                                 // 47\n                                                                                                      // 48\n  /**                                                                                                 // 49\n   * Compile the path.                                                                                // 50\n   *                                                                                                  // 51\n   *  @return {Route}                                                                                 // 52\n   *  @api public                                                                                     // 53\n   */                                                                                                 // 54\n                                                                                                      // 55\n  compile: function () {                                                                              // 56\n    var self = this;                                                                                  // 57\n    var path;                                                                                         // 58\n    var options = self.options;                                                                       // 59\n                                                                                                      // 60\n    this.keys = [];                                                                                   // 61\n                                                                                                      // 62\n    if (self.originalPath instanceof RegExp) {                                                        // 63\n      self.re = self.originalPath;                                                                    // 64\n    } else {                                                                                          // 65\n      path = self.originalPath                                                                        // 66\n        .replace(/(.)\\/$/, '$1')                                                                      // 67\n        .concat(options.strict ? '' : '/?')                                                           // 68\n        .replace(/\\/\\(/g, '(?:/')                                                                     // 69\n        .replace(/#/, '/?#')                                                                          // 70\n        .replace(                                                                                     // 71\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                     // 72\n          function (match, slash, format, key, capture, optional){                                    // 73\n            self.keys.push({ name: key, optional: !! optional });                                     // 74\n            slash = slash || '';                                                                      // 75\n            return ''                                                                                 // 76\n              + (optional ? '' : slash)                                                               // 77\n              + '(?:'                                                                                 // 78\n              + (optional ? slash : '')                                                               // 79\n              + (format || '')                                                                        // 80\n              + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'                              // 81\n              + (optional || '');                                                                     // 82\n          }                                                                                           // 83\n        )                                                                                             // 84\n        .replace(/([\\/.])/g, '\\\\$1')                                                                  // 85\n        .replace(/\\*/g, '(.*)');                                                                      // 86\n                                                                                                      // 87\n      self.re = new RegExp('^' + path + '$', options.sensitive ? '' : 'i');                           // 88\n    }                                                                                                 // 89\n                                                                                                      // 90\n    return this;                                                                                      // 91\n  },                                                                                                  // 92\n                                                                                                      // 93\n  /**                                                                                                 // 94\n   * Returns an array of parameters given a path. The array may have named                            // 95\n   * properties in addition to indexed values.                                                        // 96\n   *                                                                                                  // 97\n   * @param {String} path                                                                             // 98\n   * @return {Array}                                                                                  // 99\n   * @api public                                                                                      // 100\n   */                                                                                                 // 101\n                                                                                                      // 102\n  params: function (path) {                                                                           // 103\n    if (!path)                                                                                        // 104\n      return null;                                                                                    // 105\n                                                                                                      // 106\n    var params = [];                                                                                  // 107\n    var m = this.exec(path);                                                                          // 108\n    var queryString;                                                                                  // 109\n    var keys = this.keys;                                                                             // 110\n    var key;                                                                                          // 111\n    var value;                                                                                        // 112\n                                                                                                      // 113\n    if (!m)                                                                                           // 114\n      throw new Error('The route named \"' + this.name + '\" does not match the path \"' + path + '\"');  // 115\n                                                                                                      // 116\n    for (var i = 1, len = m.length; i < len; ++i) {                                                   // 117\n      key = keys[i - 1];                                                                              // 118\n      value = typeof m[i] == 'string' ? decodeURIComponent(m[i]) : m[i];                              // 119\n      if (key) {                                                                                      // 120\n        params[key.name] = params[key.name] !== undefined ?                                           // 121\n          params[key.name] : value;                                                                   // 122\n      } else                                                                                          // 123\n        params.push(value);                                                                           // 124\n    }                                                                                                 // 125\n                                                                                                      // 126\n    path = decodeURI(path);                                                                           // 127\n                                                                                                      // 128\n    queryString = path.split('?')[1];                                                                 // 129\n    if (queryString)                                                                                  // 130\n      queryString = queryString.split('#')[0];                                                        // 131\n                                                                                                      // 132\n    params.hash = path.split('#')[1];                                                                 // 133\n                                                                                                      // 134\n    if (queryString) {                                                                                // 135\n      _.each(queryString.split('&'), function (paramString) {                                         // 136\n        paramParts = paramString.split('=');                                                          // 137\n        params[paramParts[0]] = decodeURIComponent(paramParts[1]);                                    // 138\n      });                                                                                             // 139\n    }                                                                                                 // 140\n                                                                                                      // 141\n    return params;                                                                                    // 142\n  },                                                                                                  // 143\n                                                                                                      // 144\n  normalizePath: function (path) {                                                                    // 145\n    var origin = Meteor.absoluteUrl();                                                                // 146\n                                                                                                      // 147\n    path = path.replace(origin, '');                                                                  // 148\n                                                                                                      // 149\n    var queryStringIndex = path.indexOf('?');                                                         // 150\n    path = ~queryStringIndex ? path.slice(0, queryStringIndex) : path;                                // 151\n                                                                                                      // 152\n    var hashIndex = path.indexOf('#');                                                                // 153\n    path = ~hashIndex ? path.slice(0, hashIndex) : path;                                              // 154\n                                                                                                      // 155\n    if (path.charAt(0) !== '/')                                                                       // 156\n      path = '/' + path;                                                                              // 157\n                                                                                                      // 158\n    return path;                                                                                      // 159\n  },                                                                                                  // 160\n                                                                                                      // 161\n  /**                                                                                                 // 162\n   * Returns true if the path matches and false otherwise.                                            // 163\n   *                                                                                                  // 164\n   * @param {String} path                                                                             // 165\n   * @return {Boolean}                                                                                // 166\n   * @api public                                                                                      // 167\n   */                                                                                                 // 168\n  test: function (path) {                                                                             // 169\n    return this.re.test(this.normalizePath(path));                                                    // 170\n  },                                                                                                  // 171\n                                                                                                      // 172\n  exec: function (path) {                                                                             // 173\n    return this.re.exec(this.normalizePath(path));                                                    // 174\n  },                                                                                                  // 175\n                                                                                                      // 176\n  resolve: function (params, options) {                                                               // 177\n    var value;                                                                                        // 178\n    var isValueDefined;                                                                               // 179\n    var result;                                                                                       // 180\n    var wildCardCount = 0;                                                                            // 181\n    var path = this.originalPath;                                                                     // 182\n    var hash;                                                                                         // 183\n    var query;                                                                                        // 184\n    var isMissingParams = false;                                                                      // 185\n                                                                                                      // 186\n    options = options || {};                                                                          // 187\n    params = params || [];                                                                            // 188\n    query = options.query;                                                                            // 189\n    hash = options.hash && options.hash.toString();                                                   // 190\n                                                                                                      // 191\n    if (path instanceof RegExp) {                                                                     // 192\n      throw new Error('Cannot currently resolve a regular expression path');                          // 193\n    } else {                                                                                          // 194\n      path = this.originalPath                                                                        // 195\n        .replace(                                                                                     // 196\n          /(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g,                                                     // 197\n          function (match, slash, format, key, capture, optional, offset) {                           // 198\n            slash = slash || '';                                                                      // 199\n            value = params[key];                                                                      // 200\n            isValueDefined = typeof value !== 'undefined';                                            // 201\n                                                                                                      // 202\n            if (optional && !isValueDefined) {                                                        // 203\n              value = '';                                                                             // 204\n            } else if (!isValueDefined) {                                                             // 205\n              isMissingParams = true;                                                                 // 206\n              return;                                                                                 // 207\n            }                                                                                         // 208\n                                                                                                      // 209\n            value = _.isFunction(value) ? value.call(params) : value;                                 // 210\n            var escapedValue = _.map(String(value).split('/'), function (segment) {                   // 211\n              return encodeURIComponent(segment);                                                     // 212\n            }).join('/');                                                                             // 213\n            return slash + escapedValue                                                               // 214\n          }                                                                                           // 215\n        )                                                                                             // 216\n        .replace(                                                                                     // 217\n          /\\*/g,                                                                                      // 218\n          function (match) {                                                                          // 219\n            if (typeof params[wildCardCount] === 'undefined') {                                       // 220\n              throw new Error(                                                                        // 221\n                'You are trying to access a wild card parameter at index ' +                          // 222\n                wildCardCount +                                                                       // 223\n                ' but the value of params at that index is undefined');                               // 224\n            }                                                                                         // 225\n                                                                                                      // 226\n            var paramValue = String(params[wildCardCount++]);                                         // 227\n            return _.map(paramValue.split('/'), function (segment) {                                  // 228\n              return encodeURIComponent(segment);                                                     // 229\n            }).join('/');                                                                             // 230\n          }                                                                                           // 231\n        );                                                                                            // 232\n                                                                                                      // 233\n      if (_.isObject(query)) {                                                                        // 234\n        query = _.map(_.pairs(query), function (queryPart) {                                          // 235\n          return queryPart[0] + '=' + encodeURIComponent(queryPart[1]);                               // 236\n        }).join('&');                                                                                 // 237\n      }                                                                                               // 238\n                                                                                                      // 239\n      if (query && query.length)                                                                      // 240\n        path = path + '?' + query;                                                                    // 241\n                                                                                                      // 242\n      if (hash) {                                                                                     // 243\n        hash = encodeURI(hash.replace('#', ''));                                                      // 244\n        path = query ?                                                                                // 245\n          path + '#' + hash : path + '/#' + hash;                                                     // 246\n      }                                                                                               // 247\n    }                                                                                                 // 248\n                                                                                                      // 249\n    // Because of optional possibly empty segments we normalize path here                             // 250\n    path = path.replace(/\\/+/g, '/'); // Multiple / -> one /                                          // 251\n    path = path.replace(/^(.+)\\/$/g, '$1'); // Removal of trailing /                                  // 252\n                                                                                                      // 253\n    return isMissingParams ? null : path;                                                             // 254\n  },                                                                                                  // 255\n                                                                                                      // 256\n  path: function (params, options) {                                                                  // 257\n    return this.resolve(params, options);                                                             // 258\n  },                                                                                                  // 259\n                                                                                                      // 260\n  url: function (params, options) {                                                                   // 261\n    var path = this.path(params, options);                                                            // 262\n    if (path) {                                                                                       // 263\n      if (path.charAt(0) === '/')                                                                     // 264\n        path = path.slice(1, path.length);                                                            // 265\n      return Meteor.absoluteUrl() + path;                                                             // 266\n    } else {                                                                                          // 267\n      return null;                                                                                    // 268\n    }                                                                                                 // 269\n  },                                                                                                  // 270\n                                                                                                      // 271\n  findController: function (path, options) {                                                          // 272\n    var self = this;                                                                                  // 273\n    var handler;                                                                                      // 274\n    var controllerClass;                                                                              // 275\n    var controller;                                                                                   // 276\n    var action;                                                                                       // 277\n    var routeName;                                                                                    // 278\n                                                                                                      // 279\n    var resolveValue = Utils.resolveValue;                                                            // 280\n    var toArray = Utils.toArray;                                                                      // 281\n                                                                                                      // 282\n    var resolveController = function (name) {                                                         // 283\n      var controller = resolveValue(name);                                                            // 284\n      if (typeof controller === 'undefined') {                                                        // 285\n        throw new Error(                                                                              // 286\n          'controller \"' + name + '\" is not defined');                                                // 287\n      }                                                                                               // 288\n                                                                                                      // 289\n      return controller;                                                                              // 290\n    };                                                                                                // 291\n                                                                                                      // 292\n    // controller option is a string specifying the name                                              // 293\n    // of a controller somewhere                                                                      // 294\n    if (_.isString(this.controller))                                                                  // 295\n      controller = resolveController(this.controller);                                                // 296\n    else if (_.isFunction(this.controller))                                                           // 297\n      controller = this.controller;                                                                   // 298\n    else if (this.name)                                                                               // 299\n      controller = resolveValue(Router.convertRouteControllerName(this.name + 'Controller'));         // 300\n                                                                                                      // 301\n    if (!controller)                                                                                  // 302\n      controller = RouteController;                                                                   // 303\n                                                                                                      // 304\n    return controller;                                                                                // 305\n  },                                                                                                  // 306\n                                                                                                      // 307\n  newController: function (path, options) {                                                           // 308\n    var C = this.findController(path, options);                                                       // 309\n                                                                                                      // 310\n    options = _.extend({}, options, {                                                                 // 311\n      path: path,                                                                                     // 312\n      params: this.params(path),                                                                      // 313\n      where: this.where,                                                                              // 314\n      action: this.action                                                                             // 315\n    });                                                                                               // 316\n                                                                                                      // 317\n    return new C(this.router, this, options);                                                         // 318\n  },                                                                                                  // 319\n                                                                                                      // 320\n  getController: function (path, options) {                                                           // 321\n    return this.newController(path, options);                                                         // 322\n  }.deprecate({where: 'Route', name: 'getController', instead: 'newController'})                      // 323\n};                                                                                                    // 324\n                                                                                                      // 325\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/route_controller.js                                                       //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nRouteController = function (router, route, options) {                                                 // 1\n  var self = this;                                                                                    // 2\n                                                                                                      // 3\n  if (!(router instanceof IronRouter))                                                                // 4\n    throw new Error('RouteController requires a router');                                             // 5\n                                                                                                      // 6\n  if (!(route instanceof Route))                                                                      // 7\n    throw new Error('RouteController requires a route');                                              // 8\n                                                                                                      // 9\n  options = this.options = options || {};                                                             // 10\n                                                                                                      // 11\n  this.router = router;                                                                               // 12\n  this.route = route;                                                                                 // 13\n                                                                                                      // 14\n  this.path = options.path || '';                                                                     // 15\n  this.params = options.params || [];                                                                 // 16\n  this.where = options.where || 'client';                                                             // 17\n  this.action = options.action || this.action;                                                        // 18\n                                                                                                      // 19\n  Utils.rewriteLegacyHooks(this.options);                                                             // 20\n  Utils.rewriteLegacyHooks(this);                                                                     // 21\n};                                                                                                    // 22\n                                                                                                      // 23\nRouteController.prototype = {                                                                         // 24\n  constructor: RouteController,                                                                       // 25\n                                                                                                      // 26\n  /**                                                                                                 // 27\n   * Returns the value of a property, searching for the property in this lookup                       // 28\n   * order:                                                                                           // 29\n   *                                                                                                  // 30\n   *   1. RouteController options                                                                     // 31\n   *   2. RouteController prototype                                                                   // 32\n   *   3. Route options                                                                               // 33\n   *   4. Router options                                                                              // 34\n   */                                                                                                 // 35\n  lookupProperty: function (key) {                                                                    // 36\n    var value;                                                                                        // 37\n                                                                                                      // 38\n    if (!_.isString(key))                                                                             // 39\n      throw new Error('key must be a string');                                                        // 40\n                                                                                                      // 41\n    // 1. RouteController options                                                                     // 42\n    if (typeof (value = this.options[key]) !== 'undefined')                                           // 43\n      return value;                                                                                   // 44\n                                                                                                      // 45\n    // 2. RouteController instance                                                                    // 46\n    if (typeof (value = this[key]) !== 'undefined')                                                   // 47\n      return value;                                                                                   // 48\n                                                                                                      // 49\n    var opts;                                                                                         // 50\n                                                                                                      // 51\n    // 3. Route options                                                                               // 52\n    opts = this.route.options;                                                                        // 53\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                           // 54\n      return value;                                                                                   // 55\n                                                                                                      // 56\n    // 4. Router options                                                                              // 57\n    opts = this.router.options;                                                                       // 58\n    if (opts && typeof (value = opts[key]) !== 'undefined')                                           // 59\n      return value;                                                                                   // 60\n                                                                                                      // 61\n    // 5. Oops couldn't find property                                                                 // 62\n    return undefined;                                                                                 // 63\n  },                                                                                                  // 64\n                                                                                                      // 65\n  runHooks: function (hookName, more, cb) {                                                           // 66\n    var self = this;                                                                                  // 67\n    var ctor = this.constructor;                                                                      // 68\n                                                                                                      // 69\n    if (!_.isString(hookName))                                                                        // 70\n      throw new Error('hookName must be a string');                                                   // 71\n                                                                                                      // 72\n    if (more && !_.isArray(more))                                                                     // 73\n      throw new Error('more must be an array of functions');                                          // 74\n                                                                                                      // 75\n    var isPaused = false;                                                                             // 76\n                                                                                                      // 77\n    var lookupHook = function (nameOrFn) {                                                            // 78\n      var fn = nameOrFn;                                                                              // 79\n                                                                                                      // 80\n      // if we already have a func just return it                                                     // 81\n      if (_.isFunction(fn))                                                                           // 82\n        return fn;                                                                                    // 83\n                                                                                                      // 84\n      // look up one of the out-of-box hooks like                                                     // 85\n      // 'loaded or 'dataNotFound' if the nameOrFn is a                                               // 86\n      // string                                                                                       // 87\n      if (_.isString(fn)) {                                                                           // 88\n        if (_.isFunction(Router.hooks[fn]))                                                           // 89\n          return Router.hooks[fn];                                                                    // 90\n      }                                                                                               // 91\n                                                                                                      // 92\n      // we couldn't find it so throw an error                                                        // 93\n      throw new Error(\"No hook found named: \", nameOrFn);                                             // 94\n    };                                                                                                // 95\n                                                                                                      // 96\n    // concatenate together hook arrays from the inheritance                                          // 97\n    // heirarchy, starting at the top parent down to the child.                                       // 98\n    var collectInheritedHooks = function (ctor) {                                                     // 99\n      var hooks = [];                                                                                 // 100\n                                                                                                      // 101\n      if (ctor.__super__)                                                                             // 102\n        hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor));                      // 103\n                                                                                                      // 104\n      return Utils.hasOwnProperty(ctor.prototype, hookName) ?                                         // 105\n        hooks.concat(ctor.prototype[hookName]) : hooks;                                               // 106\n    };                                                                                                // 107\n                                                                                                      // 108\n                                                                                                      // 109\n    // get a list of hooks to run in the following order:                                             // 110\n    // 1. RouteController option hooks                                                                // 111\n    // 2. RouteController proto hooks (including inherited super to child)                            // 112\n    // 3. RouteController object hooks                                                                // 113\n    // 4. Router global hooks                                                                         // 114\n    // 5. Route option hooks                                                                          // 115\n    // 6. more                                                                                        // 116\n                                                                                                      // 117\n    var toArray = Utils.toArray;                                                                      // 118\n    var routerHooks = this.router.getHooks(hookName, this.route.name);                                // 119\n                                                                                                      // 120\n    var opts;                                                                                         // 121\n    opts = this.route.options;                                                                        // 122\n    var routeOptionHooks = toArray(opts && opts[hookName]);                                           // 123\n                                                                                                      // 124\n    opts = this.options;                                                                              // 125\n    var optionHooks = toArray(opts && opts[hookName]);                                                // 126\n                                                                                                      // 127\n    var protoHooks = collectInheritedHooks(this.constructor);                                         // 128\n                                                                                                      // 129\n    var objectHooks;                                                                                  // 130\n    // don't accidentally grab the prototype hooks!                                                   // 131\n    // this makes sure the hook is on the object itself                                               // 132\n    // not on its constructor's prototype object.                                                     // 133\n    if (_.has(this, hookName))                                                                        // 134\n      objectHooks = toArray(this[hookName])                                                           // 135\n    else                                                                                              // 136\n      objectHooks = [];                                                                               // 137\n                                                                                                      // 138\n    var allHooks = optionHooks                                                                        // 139\n      .concat(protoHooks)                                                                             // 140\n      .concat(objectHooks)                                                                            // 141\n      .concat(routeOptionHooks)                                                                       // 142\n      .concat(routerHooks)                                                                            // 143\n      .concat(more);                                                                                  // 144\n                                                                                                      // 145\n    var isPaused = false;                                                                             // 146\n    var pauseFn = function () {                                                                       // 147\n      isPaused = true;                                                                                // 148\n    };                                                                                                // 149\n                                                                                                      // 150\n    for (var i = 0, hook; hook = allHooks[i]; i++) {                                                  // 151\n      var hookFn = lookupHook(hook);                                                                  // 152\n                                                                                                      // 153\n      if (!isPaused && !this.isStopped)                                                               // 154\n        hookFn.call(self, pauseFn, i);                                                                // 155\n    }                                                                                                 // 156\n                                                                                                      // 157\n    cb && cb.call(self, isPaused);                                                                    // 158\n    return isPaused;                                                                                  // 159\n  },                                                                                                  // 160\n                                                                                                      // 161\n  action: function () {                                                                               // 162\n    throw new Error('not implemented');                                                               // 163\n  },                                                                                                  // 164\n                                                                                                      // 165\n  stop: function (cb) {                                                                               // 166\n    return this._stopController(cb);                                                                  // 167\n  },                                                                                                  // 168\n                                                                                                      // 169\n  _stopController: function (cb) {                                                                    // 170\n    var self = this;                                                                                  // 171\n                                                                                                      // 172\n    if (this.isStopped)                                                                               // 173\n      return;                                                                                         // 174\n                                                                                                      // 175\n    self.isRunning = false;                                                                           // 176\n    self.runHooks('onStop');                                                                          // 177\n    self.isStopped = true;                                                                            // 178\n    cb && cb.call(self);                                                                              // 179\n  },                                                                                                  // 180\n                                                                                                      // 181\n  _run: function () {                                                                                 // 182\n    throw new Error('not implemented');                                                               // 183\n  }                                                                                                   // 184\n};                                                                                                    // 185\n                                                                                                      // 186\n_.extend(RouteController, {                                                                           // 187\n  /**                                                                                                 // 188\n   * Inherit from RouteController                                                                     // 189\n   *                                                                                                  // 190\n   * @param {Object} definition Prototype properties for inherited class.                             // 191\n   */                                                                                                 // 192\n                                                                                                      // 193\n  extend: function (definition) {                                                                     // 194\n    Utils.rewriteLegacyHooks(definition);                                                             // 195\n                                                                                                      // 196\n    return Utils.extend(this, definition, function (definition) {                                     // 197\n      var klass = this;                                                                               // 198\n                                                                                                      // 199\n                                                                                                      // 200\n      /*                                                                                              // 201\n        Allow calling a class method from javascript, directly in the subclass                        // 202\n        definition.                                                                                   // 203\n                                                                                                      // 204\n        Instead of this:                                                                              // 205\n          MyController = RouteController.extend({...});                                               // 206\n          MyController.before(function () {});                                                        // 207\n                                                                                                      // 208\n        You can do:                                                                                   // 209\n          MyController = RouteController.extend({                                                     // 210\n            before: function () {}                                                                    // 211\n          });                                                                                         // 212\n                                                                                                      // 213\n        And in Coffeescript you can do:                                                               // 214\n         MyController extends RouteController                                                         // 215\n           @before function () {}                                                                     // 216\n       */                                                                                             // 217\n    });                                                                                               // 218\n  }                                                                                                   // 219\n});                                                                                                   // 220\n                                                                                                      // 221\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/router.js                                                                 //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nIronRouter = function (options) {                                                                     // 1\n  var self = this;                                                                                    // 2\n                                                                                                      // 3\n  this.configure(options);                                                                            // 4\n                                                                                                      // 5\n  /**                                                                                                 // 6\n   * The routes array which doubles as a named route index by adding                                  // 7\n   * properties to the array.                                                                         // 8\n   *                                                                                                  // 9\n   * @api public                                                                                      // 10\n   */                                                                                                 // 11\n  this.routes = [];                                                                                   // 12\n                                                                                                      // 13\n  /**                                                                                                 // 14\n   * Default name conversions for controller                                                          // 15\n   * and template lookup.                                                                             // 16\n   */                                                                                                 // 17\n  this._nameConverters = {};                                                                          // 18\n  this.setNameConverter('Template', 'none');                                                          // 19\n  this.setNameConverter('RouteController', 'upperCamelCase');                                         // 20\n                                                                                                      // 21\n  this._globalHooks = {};                                                                             // 22\n  _.each(IronRouter.HOOK_TYPES, function (type) {                                                     // 23\n    self._globalHooks[type] = [];                                                                     // 24\n                                                                                                      // 25\n    // example:                                                                                       // 26\n    //  self.onRun = function (hook, options) {                                                       // 27\n    //    return self.addHook('onRun', hook, options);                                                // 28\n    //  };                                                                                            // 29\n    self[type] = function (hook, options) {                                                           // 30\n      return self.addHook(type, hook, options);                                                       // 31\n    };                                                                                                // 32\n  });                                                                                                 // 33\n                                                                                                      // 34\n  _.each(IronRouter.LEGACY_HOOK_TYPES, function (type, legacyType) {                                  // 35\n    self[legacyType] = function () {                                                                  // 36\n      Utils.notifyDeprecated({                                                                        // 37\n        where: 'Router',                                                                              // 38\n        name: legacyType,                                                                             // 39\n        instead: type                                                                                 // 40\n      });                                                                                             // 41\n                                                                                                      // 42\n      return self[type].apply(this, arguments);                                                       // 43\n    }                                                                                                 // 44\n  });                                                                                                 // 45\n};                                                                                                    // 46\n                                                                                                      // 47\nIronRouter.HOOK_TYPES = [                                                                             // 48\n  'onRun',                                                                                            // 49\n  'onData',                                                                                           // 50\n  'onBeforeAction',                                                                                   // 51\n  'onAfterAction',                                                                                    // 52\n  'onStop',                                                                                           // 53\n                                                                                                      // 54\n  // not technically a hook but we'll use it                                                          // 55\n  // in a similar way. This will cause waitOn                                                         // 56\n  // to be added as a method to the Router and then                                                   // 57\n  // it can be selectively applied to specific routes                                                 // 58\n  'waitOn'                                                                                            // 59\n];                                                                                                    // 60\n                                                                                                      // 61\nIronRouter.LEGACY_HOOK_TYPES = {                                                                      // 62\n  'load': 'onRun',                                                                                    // 63\n  'before': 'onBeforeAction',                                                                         // 64\n  'after': 'onAfterAction',                                                                           // 65\n  'unload': 'onStop'                                                                                  // 66\n};                                                                                                    // 67\n                                                                                                      // 68\nIronRouter.prototype = {                                                                              // 69\n  constructor: IronRouter,                                                                            // 70\n                                                                                                      // 71\n  /**                                                                                                 // 72\n   * Configure instance with options. This can be called at any time. If the                          // 73\n   * instance options object hasn't been created yet it is created here.                              // 74\n   *                                                                                                  // 75\n   * @param {Object} options                                                                          // 76\n   * @return {IronRouter}                                                                             // 77\n   * @api public                                                                                      // 78\n   */                                                                                                 // 79\n                                                                                                      // 80\n  configure: function (options) {                                                                     // 81\n    var self = this;                                                                                  // 82\n                                                                                                      // 83\n    options = options || {};                                                                          // 84\n    this.options = this.options || {};                                                                // 85\n    _.extend(this.options, options);                                                                  // 86\n                                                                                                      // 87\n    // e.g. before: fn OR before: [fn1, fn2]                                                          // 88\n    _.each(IronRouter.HOOK_TYPES, function(type) {                                                    // 89\n      if (self.options[type]) {                                                                       // 90\n        _.each(Utils.toArray(self.options[type]), function(hook) {                                    // 91\n          self.addHook(type, hook);                                                                   // 92\n        });                                                                                           // 93\n                                                                                                      // 94\n        delete self.options[type];                                                                    // 95\n      }                                                                                               // 96\n    });                                                                                               // 97\n                                                                                                      // 98\n    _.each(IronRouter.LEGACY_HOOK_TYPES, function(type, legacyType) {                                 // 99\n      if (self.options[legacyType]) {                                                                 // 100\n        // XXX: warning?                                                                              // 101\n        _.each(Utils.toArray(self.options[legacyType]), function(hook) {                              // 102\n          self.addHook(type, hook);                                                                   // 103\n        });                                                                                           // 104\n                                                                                                      // 105\n        delete self.options[legacyType];                                                              // 106\n      }                                                                                               // 107\n    });                                                                                               // 108\n                                                                                                      // 109\n    if (options.templateNameConverter)                                                                // 110\n      this.setNameConverter('Template', options.templateNameConverter);                               // 111\n                                                                                                      // 112\n    if (options.routeControllerNameConverter)                                                         // 113\n      this.setNameConverter('RouteController', options.routeControllerNameConverter);                 // 114\n                                                                                                      // 115\n    return this;                                                                                      // 116\n  },                                                                                                  // 117\n                                                                                                      // 118\n  convertTemplateName: function (input) {                                                             // 119\n    var converter = this._nameConverters['Template'];                                                 // 120\n    if (!converter)                                                                                   // 121\n      throw new Error('No name converter found for Template');                                        // 122\n    return converter(input);                                                                          // 123\n  },                                                                                                  // 124\n                                                                                                      // 125\n  convertRouteControllerName: function (input) {                                                      // 126\n    var converter = this._nameConverters['RouteController'];                                          // 127\n    if (!converter)                                                                                   // 128\n      throw new Error('No name converter found for RouteController');                                 // 129\n    return converter(input);                                                                          // 130\n  },                                                                                                  // 131\n                                                                                                      // 132\n  setNameConverter: function (key, stringOrFunc) {                                                    // 133\n    var converter;                                                                                    // 134\n                                                                                                      // 135\n    if (_.isFunction(stringOrFunc))                                                                   // 136\n      converter = stringOrFunc;                                                                       // 137\n                                                                                                      // 138\n    if (_.isString(stringOrFunc))                                                                     // 139\n      converter = Utils.StringConverters[stringOrFunc];                                               // 140\n                                                                                                      // 141\n    if (!converter) {                                                                                 // 142\n      throw new Error('No converter found named: ' + stringOrFunc);                                   // 143\n    }                                                                                                 // 144\n                                                                                                      // 145\n    this._nameConverters[key] = converter;                                                            // 146\n    return this;                                                                                      // 147\n  },                                                                                                  // 148\n                                                                                                      // 149\n  /**                                                                                                 // 150\n   *                                                                                                  // 151\n   * Add a hook to all routes. The hooks will apply to all routes,                                    // 152\n   * unless you name routes to include or exclude via `only` and `except` options                     // 153\n   *                                                                                                  // 154\n   * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                              // 155\n   * @param {Object} [options] Options to controll the hooks [optional]                               // 156\n   * @param {Function} [hook] Callback to run                                                         // 157\n   * @return {IronRouter}                                                                             // 158\n   * @api public                                                                                      // 159\n   *                                                                                                  // 160\n   */                                                                                                 // 161\n                                                                                                      // 162\n  addHook: function(type, hook, options) {                                                            // 163\n    options = options || {}                                                                           // 164\n                                                                                                      // 165\n    if (options.only)                                                                                 // 166\n      options.only = Utils.toArray(options.only);                                                     // 167\n    if (options.except)                                                                               // 168\n      options.except = Utils.toArray(options.except);                                                 // 169\n                                                                                                      // 170\n    this._globalHooks[type].push({options: options, hook: hook});                                     // 171\n                                                                                                      // 172\n    return this;                                                                                      // 173\n  },                                                                                                  // 174\n                                                                                                      // 175\n  /**                                                                                                 // 176\n   *                                                                                                  // 177\n   * Fetch the list of global hooks that apply to the given route name.                               // 178\n   * Hooks are defined by the .addHook() function above.                                              // 179\n   *                                                                                                  // 180\n   * @param {String} [type] one of IronRouter.HOOK_TYPES                                              // 181\n   * @param {String} [name] the name of the route we are interested in                                // 182\n   * @return {[Function]} [hooks] an array of hooks to run                                            // 183\n   * @api public                                                                                      // 184\n   *                                                                                                  // 185\n   */                                                                                                 // 186\n                                                                                                      // 187\n  getHooks: function(type, name) {                                                                    // 188\n    var hooks = [];                                                                                   // 189\n                                                                                                      // 190\n    _.each(this._globalHooks[type], function(hook) {                                                  // 191\n      var options = hook.options;                                                                     // 192\n                                                                                                      // 193\n      if (options.except && _.include(options.except, name))                                          // 194\n        return;                                                                                       // 195\n                                                                                                      // 196\n      if (options.only && ! _.include(options.only, name))                                            // 197\n        return;                                                                                       // 198\n                                                                                                      // 199\n      hooks.push(hook.hook);                                                                          // 200\n    });                                                                                               // 201\n                                                                                                      // 202\n    return hooks;                                                                                     // 203\n  },                                                                                                  // 204\n                                                                                                      // 205\n                                                                                                      // 206\n  /**                                                                                                 // 207\n   * Convenience function to define a bunch of routes at once. In the future we                       // 208\n   * might call the callback with a custom dsl.                                                       // 209\n   *                                                                                                  // 210\n   * Example:                                                                                         // 211\n   *  Router.map(function () {                                                                        // 212\n   *    this.route('posts');                                                                          // 213\n   *  });                                                                                             // 214\n   *                                                                                                  // 215\n   *  @param {Function} cb                                                                            // 216\n   *  @return {IronRouter}                                                                            // 217\n   *  @api public                                                                                     // 218\n   */                                                                                                 // 219\n                                                                                                      // 220\n  map: function (cb) {                                                                                // 221\n    Utils.assert(_.isFunction(cb),                                                                    // 222\n           'map requires a function as the first parameter');                                         // 223\n    cb.call(this);                                                                                    // 224\n    return this;                                                                                      // 225\n  },                                                                                                  // 226\n                                                                                                      // 227\n  /**                                                                                                 // 228\n   * Define a new route. You must name the route, but as a second parameter you                       // 229\n   * can either provide an object of options or a Route instance.                                     // 230\n   *                                                                                                  // 231\n   * @param {String} name The name of the route                                                       // 232\n   * @param {Object} [options] Options to pass along to the route                                     // 233\n   * @return {Route}                                                                                  // 234\n   * @api public                                                                                      // 235\n   */                                                                                                 // 236\n                                                                                                      // 237\n  route: function (name, options) {                                                                   // 238\n    var route;                                                                                        // 239\n                                                                                                      // 240\n    Utils.assert(_.isString(name), 'name is a required parameter');                                   // 241\n                                                                                                      // 242\n    if (options instanceof Route)                                                                     // 243\n      route = options;                                                                                // 244\n    else                                                                                              // 245\n      route = new Route(this, name, options);                                                         // 246\n                                                                                                      // 247\n    this.routes[name] = route;                                                                        // 248\n    this.routes.push(route);                                                                          // 249\n    return route;                                                                                     // 250\n  },                                                                                                  // 251\n                                                                                                      // 252\n  path: function (routeName, params, options) {                                                       // 253\n    var route = this.routes[routeName];                                                               // 254\n    Utils.warn(route,                                                                                 // 255\n     'You called Router.path for a route named ' + routeName + ' but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.path(params, options);                                                      // 257\n  },                                                                                                  // 258\n                                                                                                      // 259\n  url: function (routeName, params, options) {                                                        // 260\n    var route = this.routes[routeName];                                                               // 261\n    Utils.warn(route,                                                                                 // 262\n      'You called Router.url for a route named \"' + routeName + '\" but that route doesn\\'t seem to exist. Are you sure you created it?');\n    return route && route.url(params, options);                                                       // 264\n  },                                                                                                  // 265\n                                                                                                      // 266\n  match: function (path) {                                                                            // 267\n    return _.find(this.routes, function(r) { return r.test(path); });                                 // 268\n  },                                                                                                  // 269\n                                                                                                      // 270\n  dispatch: function (path, options, cb) {                                                            // 271\n    var route = this.match(path);                                                                     // 272\n                                                                                                      // 273\n    if (! route)                                                                                      // 274\n      return this.onRouteNotFound(path, options);                                                     // 275\n                                                                                                      // 276\n    if (route.where !== (Meteor.isClient ? 'client' : 'server'))                                      // 277\n      return this.onUnhandled(path, options);                                                         // 278\n                                                                                                      // 279\n    var controller = route.newController(path, options);                                              // 280\n    this.run(controller, cb);                                                                         // 281\n  },                                                                                                  // 282\n                                                                                                      // 283\n  run: function (controller, cb) {                                                                    // 284\n    var self = this;                                                                                  // 285\n    var where = Meteor.isClient ? 'client' : 'server';                                                // 286\n                                                                                                      // 287\n    Utils.assert(controller, 'run requires a controller');                                            // 288\n                                                                                                      // 289\n    // one last check to see if we should handle the route here                                       // 290\n    if (controller.where != where) {                                                                  // 291\n      self.onUnhandled(controller.path, controller.options);                                          // 292\n      return;                                                                                         // 293\n    }                                                                                                 // 294\n                                                                                                      // 295\n    var run = function () {                                                                           // 296\n      self._currentController = controller;                                                           // 297\n      // set the location                                                                             // 298\n      cb && cb(controller);                                                                           // 299\n      self._currentController._run();                                                                 // 300\n    };                                                                                                // 301\n                                                                                                      // 302\n    // if we already have a current controller let's stop it and then                                 // 303\n    // run the new one once the old controller is stopped. this will add                              // 304\n    // the run function as an onInvalidate callback to the controller's                               // 305\n    // computation. Otherwse, just run the new controller.                                            // 306\n    if (this._currentController)                                                                      // 307\n      this._currentController._stopController(run);                                                   // 308\n    else                                                                                              // 309\n      run();                                                                                          // 310\n  },                                                                                                  // 311\n                                                                                                      // 312\n  onUnhandled: function (path, options) {                                                             // 313\n    throw new Error('onUnhandled not implemented');                                                   // 314\n  },                                                                                                  // 315\n                                                                                                      // 316\n  onRouteNotFound: function (path, options) {                                                         // 317\n    throw new Error('Oh no! No route found for path: \"' + path + '\"');                                // 318\n  }                                                                                                   // 319\n};                                                                                                    // 320\n                                                                                                      // 321\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/client/location.js                                                        //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nvar dep = new Deps.Dependency;                                                                        // 1\n// XXX: we have to store the state internally (rather than just calling out                           // 2\n// to window.location) due to an android 2.3 bug. See:                                                // 3\n//   https://github.com/EventedMind/iron-router/issues/350                                            // 4\nvar currentState = {                                                                                  // 5\n  path: location.pathname + location.search + location.hash,                                          // 6\n  // we set title to null because that can be triggered immediately by a \"noop\"                       // 7\n  // popstate that happens on load -- if it's already null, nothing's changed.                        // 8\n  title: null                                                                                         // 9\n};                                                                                                    // 10\n                                                                                                      // 11\nfunction onpopstate (e) {                                                                             // 12\n  setState(e.originalEvent.state, null, location.pathname + location.search + location.hash);         // 13\n}                                                                                                     // 14\n                                                                                                      // 15\nIronLocation = {};                                                                                    // 16\n                                                                                                      // 17\nIronLocation.origin = function () {                                                                   // 18\n  return location.protocol + '//' + location.host;                                                    // 19\n};                                                                                                    // 20\n                                                                                                      // 21\nIronLocation.isSameOrigin = function (href) {                                                         // 22\n  var origin = IronLocation.origin();                                                                 // 23\n  return href.indexOf(origin) === 0;                                                                  // 24\n};                                                                                                    // 25\n                                                                                                      // 26\nIronLocation.get = function () {                                                                      // 27\n  dep.depend();                                                                                       // 28\n  return currentState;                                                                                // 29\n};                                                                                                    // 30\n                                                                                                      // 31\nIronLocation.path = function () {                                                                     // 32\n  dep.depend();                                                                                       // 33\n  return currentState.path;                                                                           // 34\n};                                                                                                    // 35\n                                                                                                      // 36\nIronLocation.set = function (url, options) {                                                          // 37\n  options = options || {};                                                                            // 38\n                                                                                                      // 39\n  var state = options.state || {};                                                                    // 40\n                                                                                                      // 41\n  if (/^http/.test(url))                                                                              // 42\n    href = url;                                                                                       // 43\n  else {                                                                                              // 44\n    if (url.charAt(0) !== '/')                                                                        // 45\n      url = '/' + url;                                                                                // 46\n    href = IronLocation.origin() + url;                                                               // 47\n  }                                                                                                   // 48\n                                                                                                      // 49\n  if (!IronLocation.isSameOrigin(href))                                                               // 50\n    window.location = href;                                                                           // 51\n  else if (options.where === 'server')                                                                // 52\n    window.location = href;                                                                           // 53\n  else if (options.replaceState)                                                                      // 54\n    IronLocation.replaceState(state, options.title, url, options.skipReactive);                       // 55\n  else                                                                                                // 56\n    IronLocation.pushState(state, options.title, url, options.skipReactive);                          // 57\n};                                                                                                    // 58\n                                                                                                      // 59\n// store the state for later access                                                                   // 60\nsetState = function(newState, title, url, skipReactive) {                                             // 61\n  newState = _.extend({}, newState);                                                                  // 62\n  newState.path = url;                                                                                // 63\n  newState.title = title;                                                                             // 64\n                                                                                                      // 65\n  if (!skipReactive && ! EJSON.equals(currentState, newState))                                        // 66\n    dep.changed();                                                                                    // 67\n                                                                                                      // 68\n  currentState = newState;                                                                            // 69\n}                                                                                                     // 70\n                                                                                                      // 71\nIronLocation.pushState = function (state, title, url, skipReactive) {                                 // 72\n  setState(state, title, url, skipReactive);                                                          // 73\n                                                                                                      // 74\n  if (history.pushState)                                                                              // 75\n    history.pushState(state, title, url);                                                             // 76\n  else                                                                                                // 77\n    window.location = url;                                                                            // 78\n};                                                                                                    // 79\n                                                                                                      // 80\nIronLocation.replaceState = function (state, title, url, skipReactive) {                              // 81\n  // allow just the state or title to be set                                                          // 82\n  if (arguments.length < 2)                                                                           // 83\n    title = currentState.title;                                                                       // 84\n  if (arguments.length < 3)                                                                           // 85\n    url = currentState.path;                                                                          // 86\n                                                                                                      // 87\n  setState(state, title, url, skipReactive);                                                          // 88\n                                                                                                      // 89\n  if (history.replaceState)                                                                           // 90\n    history.replaceState(state, title, url);                                                          // 91\n  else                                                                                                // 92\n    window.location = url;                                                                            // 93\n};                                                                                                    // 94\n                                                                                                      // 95\nIronLocation.bindEvents = function(){                                                                 // 96\n  $(window).on('popstate.iron-router', onpopstate);                                                   // 97\n};                                                                                                    // 98\n                                                                                                      // 99\nIronLocation.unbindEvents = function(){                                                               // 100\n  $(window).off('popstate.iron-router');                                                              // 101\n};                                                                                                    // 102\n                                                                                                      // 103\nIronLocation.start = function () {                                                                    // 104\n  if (this.isStarted)                                                                                 // 105\n    return;                                                                                           // 106\n                                                                                                      // 107\n  IronLocation.bindEvents();                                                                          // 108\n  this.isStarted = true;                                                                              // 109\n  // store the fact that this is the first route we hit.                                              // 110\n  // this serves two purposes                                                                         // 111\n  //   1. We can tell when we've reached an unhandled route and need to show a                        // 112\n  //      404 (rather than bailing out to let the server handle it)                                   // 113\n  //   2. Users can look at the state to tell if the history.back() will stay                         // 114\n  //      inside the app (this is important for mobile apps).                                         // 115\n  if (history.replaceState)                                                                           // 116\n    history.replaceState({initial: true}, null, location.pathname + location.search + location.hash); // 117\n};                                                                                                    // 118\n                                                                                                      // 119\nIronLocation.stop = function () {                                                                     // 120\n  IronLocation.unbindEvents();                                                                        // 121\n  this.isStarted = false;                                                                             // 122\n};                                                                                                    // 123\n                                                                                                      // 124\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/client/router.js                                                          //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n/*****************************************************************************/                       // 1\n/* Private */                                                                                         // 2\n/*****************************************************************************/                       // 3\nvar bindData = function (value, thisArg) {                                                            // 4\n  return function () {                                                                                // 5\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;                   // 6\n  };                                                                                                  // 7\n};                                                                                                    // 8\n                                                                                                      // 9\n/*****************************************************************************/                       // 10\n/* IronRouter */                                                                                      // 11\n/*****************************************************************************/                       // 12\nIronRouter = Utils.extend(IronRouter, {                                                               // 13\n  constructor: function (options) {                                                                   // 14\n    var self = this;                                                                                  // 15\n                                                                                                      // 16\n    IronRouter.__super__.constructor.apply(this, arguments);                                          // 17\n    self.options.linkSelector = self.options.linkSelector || 'a[href]';                               // 18\n                                                                                                      // 19\n    options = options || {};                                                                          // 20\n                                                                                                      // 21\n    this.isRendered = false;                                                                          // 22\n                                                                                                      // 23\n    /**                                                                                               // 24\n     * The current RouteController instance. This is set anytime a new route is                       // 25\n     * dispatched. It's a reactive variable which you can get by calling                              // 26\n     * Router.current();                                                                              // 27\n     *                                                                                                // 28\n     * @api private                                                                                   // 29\n     */                                                                                               // 30\n    this._currentController = null;                                                                   // 31\n                                                                                                      // 32\n    /**                                                                                               // 33\n     * Dependency to for this._currentController                                                      // 34\n     *                                                                                                // 35\n     * @api private                                                                                   // 36\n     */                                                                                               // 37\n    this._controllerDep = new Deps.Dependency;                                                        // 38\n                                                                                                      // 39\n    /**                                                                                               // 40\n      * Did the URL we are looking at come from a hot-code-reload                                     // 41\n      *  (and thus should we treat is as not new?)                                                    // 42\n      *                                                                                               // 43\n      * @api private                                                                                  // 44\n      */                                                                                              // 45\n    this._hasJustReloaded = false;                                                                    // 46\n                                                                                                      // 47\n    Meteor.startup(function () {                                                                      // 48\n      Meteor.defer(function () {                                                                      // 49\n        if (self.options.autoRender !== false)                                                        // 50\n          self.autoRender();                                                                          // 51\n        if (self.options.autoStart !== false)                                                         // 52\n          self.start();                                                                               // 53\n      });                                                                                             // 54\n    });                                                                                               // 55\n                                                                                                      // 56\n    // manages dynamic rendering                                                                      // 57\n    // XXX we'll keep the same router api for now and clean it up to be more                          // 58\n    // sensible on the next pass (to more closely mimic the new Iron.Layout api                       // 59\n    // which is a lot nicer).                                                                         // 60\n    this._layout = new Iron.Layout({template: this.options.layoutTemplate});                          // 61\n                                                                                                      // 62\n    /*                                                                                                // 63\n    // proxy these methods to the underlying ui manager object                                        // 64\n    _.each([                                                                                          // 65\n      'layout',                                                                                       // 66\n      'setRegion',                                                                                    // 67\n      'clearRegion',                                                                                  // 68\n      'getData',                                                                                      // 69\n      'setData'                                                                                       // 70\n    ], function (uiApiMethod) {                                                                       // 71\n      self[uiApiMethod] = function () {                                                               // 72\n        if (!self._ui)                                                                                // 73\n          throw new Error(\"No uiManager is configured on the Router\");                                // 74\n        return self._ui[uiApiMethod].apply(self._ui, arguments);                                      // 75\n      };                                                                                              // 76\n    });                                                                                               // 77\n    */                                                                                                // 78\n  },                                                                                                  // 79\n                                                                                                      // 80\n  layout: function (template, options) {                                                              // 81\n    var result = this._layout.template(template);                                                     // 82\n                                                                                                      // 83\n    // check whether options has a data property                                                      // 84\n    if (options && (_.has(options, 'data')))                                                          // 85\n      this._layout.data(bindData(options.data, this));                                                // 86\n                                                                                                      // 87\n    return result;                                                                                    // 88\n  },                                                                                                  // 89\n                                                                                                      // 90\n  setRegion: function (region, template) {                                                            // 91\n    if (arguments.length === 1) {                                                                     // 92\n      template = region;                                                                              // 93\n      region = null;                                                                                  // 94\n    }                                                                                                 // 95\n                                                                                                      // 96\n    this._layout.render(template, {to: region});                                                      // 97\n    return this;                                                                                      // 98\n  },                                                                                                  // 99\n                                                                                                      // 100\n  clearRegion: function (region) {                                                                    // 101\n    this._layout.clear(region);                                                                       // 102\n    return this;                                                                                      // 103\n  },                                                                                                  // 104\n                                                                                                      // 105\n  /**                                                                                                 // 106\n   * Reactive accessor for the current RouteController instance. You can also                         // 107\n   * get a nonreactive value by specifiying {reactive: false} as an option.                           // 108\n   *                                                                                                  // 109\n   * @param {Object} [opts] configuration options                                                     // 110\n   * @param {Boolean} [opts.reactive] Set to false to enable a non-reactive read.                     // 111\n   * @return {RouteController}                                                                        // 112\n   * @api public                                                                                      // 113\n   */                                                                                                 // 114\n                                                                                                      // 115\n  current: function (opts) {                                                                          // 116\n    if (opts && opts.reactive === false)                                                              // 117\n      return this._currentController;                                                                 // 118\n    else {                                                                                            // 119\n      this._controllerDep.depend();                                                                   // 120\n      return this._currentController;                                                                 // 121\n    }                                                                                                 // 122\n  },                                                                                                  // 123\n                                                                                                      // 124\n  clearUnusedRegions: function (usedYields) {                                                         // 125\n    var self = this;                                                                                  // 126\n                                                                                                      // 127\n    //XXX clean this up in next major release                                                         // 128\n    var allYields = _.keys(this._layout._regions);                                                    // 129\n                                                                                                      // 130\n    usedYields = _.filter(usedYields, function (val) {                                                // 131\n      return !!val;                                                                                   // 132\n    });                                                                                               // 133\n                                                                                                      // 134\n    var unusedYields = _.difference(allYields, usedYields);                                           // 135\n                                                                                                      // 136\n    _.each(unusedYields, function (key) {                                                             // 137\n      self.clearRegion(key);                                                                          // 138\n    });                                                                                               // 139\n  },                                                                                                  // 140\n                                                                                                      // 141\n  run: function (controller, cb) {                                                                    // 142\n    IronRouter.__super__.run.apply(this, arguments);                                                  // 143\n                                                                                                      // 144\n    if (controller == this._currentController) {                                                      // 145\n      this._controllerDep.changed();                                                                  // 146\n    }                                                                                                 // 147\n  },                                                                                                  // 148\n                                                                                                      // 149\n  /**                                                                                                 // 150\n   * Wrapper around Location.go that accepts a routeName or a path as the first                       // 151\n   * parameter. This method can accept client and server side routes.                                 // 152\n   *                                                                                                  // 153\n   * Examples:                                                                                        // 154\n   *                                                                                                  // 155\n   *  1. Router.go('/posts', {state: 'true'});                                                        // 156\n   *  2. Router.go('postIndex', [param1, param2], {state});                                           // 157\n   *                                                                                                  // 158\n   * @param {String} routeNameOrPath                                                                  // 159\n   * @param {Array|Object} [params]                                                                   // 160\n   * @param {Object} [state]                                                                          // 161\n   * @param {Boolean} [replaceState]                                                                  // 162\n   * @api public                                                                                      // 163\n   */                                                                                                 // 164\n                                                                                                      // 165\n  go: function (routeNameOrPath, params, options) {                                                   // 166\n    var self = this;                                                                                  // 167\n    var isPathRe = /^\\/|http/                                                                         // 168\n    var route;                                                                                        // 169\n    var path;                                                                                         // 170\n    var onComplete;                                                                                   // 171\n    var controller;                                                                                   // 172\n    var done;                                                                                         // 173\n                                                                                                      // 174\n    // after the dispatch is complete, set the IronLocation                                           // 175\n    // path and state which will update the browser's url.                                            // 176\n    done = function() {                                                                               // 177\n      options = options || {};                                                                        // 178\n      self._location.set(path, {                                                                      // 179\n        replaceState: options.replaceState,                                                           // 180\n        state: options.state,                                                                         // 181\n        skipReactive: true                                                                            // 182\n      });                                                                                             // 183\n    };                                                                                                // 184\n                                                                                                      // 185\n    if (isPathRe.test(routeNameOrPath)) {                                                             // 186\n      path = routeNameOrPath;                                                                         // 187\n      options = params;                                                                               // 188\n                                                                                                      // 189\n      // if the path hasn't changed (at all), we are going to do nothing here                         // 190\n      if (path === self._location.path()) {                                                           // 191\n        if (self.options.debug)                                                                       // 192\n          console.log(\"You've navigated to the same path that you are currently at. Doing nothing\");  // 193\n        return;                                                                                       // 194\n      }                                                                                               // 195\n                                                                                                      // 196\n      // issue here is in the dispatch process we might want to                                       // 197\n      // make a server request so therefore not call this method yet, so                              // 198\n      // we need to push the state only after we've decided it's a client                             // 199\n      // request, otherwise let the browser handle it and send off to the                             // 200\n      // server                                                                                       // 201\n      self.dispatch(path, options, done);                                                             // 202\n    } else {                                                                                          // 203\n      route = self.routes[routeNameOrPath];                                                           // 204\n      Utils.assert(route, 'No route found named ' + routeNameOrPath);                                 // 205\n      path = route.path(params, options);                                                             // 206\n      controller = route.newController(path, options);                                                // 207\n      self.run(controller, done);                                                                     // 208\n    }                                                                                                 // 209\n  },                                                                                                  // 210\n                                                                                                      // 211\n  render: function () {                                                                               // 212\n    this.isRendered = true;                                                                           // 213\n                                                                                                      // 214\n    // return a UI component for the layout.                                                          // 215\n    return this._layout.create();                                                                     // 216\n  },                                                                                                  // 217\n                                                                                                      // 218\n  autoRender: function () {                                                                           // 219\n    this.isRendered = true;                                                                           // 220\n                                                                                                      // 221\n    this._layout.insert({                                                                             // 222\n      // insert into the document body element                                                        // 223\n      el: document.body,                                                                              // 224\n                                                                                                      // 225\n      // come back and make this body at some point                                                   // 226\n      parentComponent: null                                                                           // 227\n    });                                                                                               // 228\n  },                                                                                                  // 229\n                                                                                                      // 230\n  bindEvents: function () {                                                                           // 231\n    $(document).on('click.ironRouter', this.options.linkSelector, _.bind(this.onClick, this));        // 232\n  },                                                                                                  // 233\n                                                                                                      // 234\n  unbindEvents: function () {                                                                         // 235\n    $(document).off('click.ironRouter', this.options.linkSelector);                                   // 236\n  },                                                                                                  // 237\n                                                                                                      // 238\n  /**                                                                                                 // 239\n   * Start listening to click events and set up a Deps.autorun for location                           // 240\n   * changes. If already started the method just returns.                                             // 241\n   *                                                                                                  // 242\n   * @api public                                                                                      // 243\n   */                                                                                                 // 244\n                                                                                                      // 245\n  start: function () {                                                                                // 246\n    var self = this;                                                                                  // 247\n                                                                                                      // 248\n    if (self.isStarted) return;                                                                       // 249\n                                                                                                      // 250\n    self.isStarted = true;                                                                            // 251\n                                                                                                      // 252\n    self._location = self.options.location || IronLocation;                                           // 253\n    self._location.start();                                                                           // 254\n                                                                                                      // 255\n    self.bindEvents();                                                                                // 256\n                                                                                                      // 257\n    Deps.autorun(function (c) {                                                                       // 258\n      var location;                                                                                   // 259\n      self._locationComputation = c;                                                                  // 260\n      self.dispatch(self._location.path(), {state: history.state});                                   // 261\n    });                                                                                               // 262\n  },                                                                                                  // 263\n                                                                                                      // 264\n  /**                                                                                                 // 265\n   * Remove click event listener and stop listening for location changes.                             // 266\n   *                                                                                                  // 267\n   * @api public                                                                                      // 268\n   */                                                                                                 // 269\n                                                                                                      // 270\n  stop: function () {                                                                                 // 271\n    this.isStarted = false;                                                                           // 272\n                                                                                                      // 273\n    this.unbindEvents();                                                                              // 274\n    this._location.stop();                                                                            // 275\n                                                                                                      // 276\n    if (this._locationComputation)                                                                    // 277\n      this._locationComputation.stop();                                                               // 278\n  },                                                                                                  // 279\n                                                                                                      // 280\n  /**                                                                                                 // 281\n   * If we don't handle a link but the server does, bail to the server                                // 282\n   *                                                                                                  // 283\n   * @api public                                                                                      // 284\n   */                                                                                                 // 285\n  onUnhandled: function (path, options) {                                                             // 286\n    window.location = path;                                                                           // 287\n  },                                                                                                  // 288\n                                                                                                      // 289\n  /**                                                                                                 // 290\n   * if we don't handle a link, _and_ the  server doesn't handle it,                                  // 291\n   * do one of two things:                                                                            // 292\n   *   a) if this is the initial route, then it can't be a static asset, so                           // 293\n   *      show notFound or throw an error                                                             // 294\n   *   b) otherwise, let the server have a go at it, we may end up coming back.                       // 295\n   *                                                                                                  // 296\n   * @api public                                                                                      // 297\n   */                                                                                                 // 298\n  onRouteNotFound: function (path, options) {                                                         // 299\n    if (this._location.path() !== path) {                                                             // 300\n      window.location = path;                                                                         // 301\n    } else if (this.options.notFoundTemplate) {                                                       // 302\n      var notFoundRoute = new Route(this, '__notfound__', _.extend(options || {}, {path: path}));     // 303\n      this.run(new RouteController(this, notFoundRoute, {                                             // 304\n        layoutTemplate: this.options.layoutTemplate,                                                  // 305\n        template: this.options.notFoundTemplate                                                       // 306\n      }));                                                                                            // 307\n    } else {                                                                                          // 308\n      throw new Error('Oh no! No route found for path: \"' + path + '\"');                              // 309\n    }                                                                                                 // 310\n  },                                                                                                  // 311\n                                                                                                      // 312\n  onClick: function(e) {                                                                              // 313\n    var el = e.currentTarget;                                                                         // 314\n    var which = _.isUndefined(e.which) ? e.button : e.which;                                          // 315\n    var href = el.href;                                                                               // 316\n    var path = el.pathname + el.search + el.hash;                                                     // 317\n                                                                                                      // 318\n    // ie9 omits the leading slash in pathname - so patch up if it's missing                          // 319\n    path = path.replace(/(^\\/?)/,\"/\");                                                                // 320\n                                                                                                      // 321\n    // we only want to handle clicks on links which:                                                  // 322\n    // - haven't been cancelled already                                                               // 323\n    if (e.isDefaultPrevented())                                                                       // 324\n      return;                                                                                         // 325\n                                                                                                      // 326\n    //  - are with the left mouse button with no meta key pressed                                     // 327\n    if (which !== 1)                                                                                  // 328\n      return;                                                                                         // 329\n                                                                                                      // 330\n    if (e.metaKey || e.ctrlKey || e.shiftKey)                                                         // 331\n      return;                                                                                         // 332\n                                                                                                      // 333\n    // - aren't in a new window                                                                       // 334\n    if (el.target)                                                                                    // 335\n      return;                                                                                         // 336\n                                                                                                      // 337\n    // - aren't external to the app                                                                   // 338\n    if (!IronLocation.isSameOrigin(href))                                                             // 339\n      return;                                                                                         // 340\n                                                                                                      // 341\n    // note that we _do_ handle links which point to the current URL                                  // 342\n    // and links which only change the hash.                                                          // 343\n    e.preventDefault();                                                                               // 344\n    this.go(path);                                                                                    // 345\n  }                                                                                                   // 346\n});                                                                                                   // 347\n                                                                                                      // 348\n/**                                                                                                   // 349\n * The main Router instance that clients will deal with                                               // 350\n *                                                                                                    // 351\n * @api public                                                                                        // 352\n * @exports Router                                                                                    // 353\n */                                                                                                   // 354\n                                                                                                      // 355\nRouter = new IronRouter;                                                                              // 356\n                                                                                                      // 357\nif (Meteor._reload) {                                                                                 // 358\n  // just register the fact that a migration _has_ happened                                           // 359\n  Meteor._reload.onMigrate('iron-router', function() { return [true, true]});                         // 360\n                                                                                                      // 361\n  // then when we come back up, check if it it's set                                                  // 362\n  var data = Meteor._reload.migrationData('iron-router');                                             // 363\n  Router._hasJustReloaded = data;                                                                     // 364\n}                                                                                                     // 365\n                                                                                                      // 366\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/client/wait_list.js                                                       //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n/*****************************************************************************/                       // 1\n/* Imports */                                                                                         // 2\n/*****************************************************************************/                       // 3\nvar assert = Iron.utils.assert;                                                                       // 4\n                                                                                                      // 5\n/*****************************************************************************/                       // 6\n/* Private */                                                                                         // 7\n/*****************************************************************************/                       // 8\n                                                                                                      // 9\n/**                                                                                                   // 10\n * Returns an object of computation ids starting with                                                 // 11\n * the current computation and including all ancestor                                                 // 12\n * computations. The data structure is an object                                                      // 13\n * so we can index by id and do quick checks.                                                         // 14\n */                                                                                                   // 15\nvar parentComputations = function () {                                                                // 16\n  var list = {};                                                                                      // 17\n  var c = Deps.currentComputation;                                                                    // 18\n                                                                                                      // 19\n  while (c) {                                                                                         // 20\n    list[String(c._id)] = true;                                                                       // 21\n    c = c._parent;                                                                                    // 22\n  }                                                                                                   // 23\n                                                                                                      // 24\n  return list;                                                                                        // 25\n};                                                                                                    // 26\n                                                                                                      // 27\n/**                                                                                                   // 28\n * Check whether the user has called ready() and then called wait(). This                             // 29\n * can cause a condition that can be simplified to this:                                              // 30\n *                                                                                                    // 31\n * dep = new Deps.Dependency;                                                                         // 32\n *                                                                                                    // 33\n * Deps.autorun(function () {                                                                         // 34\n *   dep.depend();                                                                                    // 35\n *   dep.changed();                                                                                   // 36\n * });                                                                                                // 37\n */                                                                                                   // 38\nvar assertNoInvalidationLoop = function (dependency) {                                                // 39\n  var parentComps = parentComputations();                                                             // 40\n  var depCompIds = Object.keys(dependency._dependentsById);                                           // 41\n                                                                                                      // 42\n  depCompIds.forEach(function (id) {                                                                  // 43\n    assert(!parentComps[id], \"\\n\\n\\\nYou called wait() after calling ready() inside the same computation tree.\\\n\\n\\n\\\nYou can fix this problem in two possible ways:\\n\\n\\\n1) Put all of your wait() calls before any ready() calls.\\n\\\n2) Put your ready() call in its own computation with Deps.autorun.\"                                   // 49\n    );                                                                                                // 50\n  });                                                                                                 // 51\n};                                                                                                    // 52\n                                                                                                      // 53\n                                                                                                      // 54\n/*****************************************************************************/                       // 55\n/* WaitList */                                                                                        // 56\n/*****************************************************************************/                       // 57\n/**                                                                                                   // 58\n * A WaitList tracks a list of reactive functions, each in its own computation.                       // 59\n * The list is ready() when all of the functions return true. This list is not                        // 60\n * ready (i.e. this.ready() === false) if at least one function returns false.                        // 61\n *                                                                                                    // 62\n * You add functions by calling the wait(fn) method. Each function is run its                         // 63\n * own computation. The ready() method is a reactive method but only calls the                        // 64\n * deps changed function if the overall state of the list changes from true to                        // 65\n * false or from false to true.                                                                       // 66\n */                                                                                                   // 67\nWaitList = function () {                                                                              // 68\n  this._readyDep = new Deps.Dependency;                                                               // 69\n  this._comps = [];                                                                                   // 70\n  this._notReadyCount = 0;                                                                            // 71\n};                                                                                                    // 72\n                                                                                                      // 73\n/**                                                                                                   // 74\n * Pass a function that returns true or false.                                                        // 75\n */                                                                                                   // 76\nWaitList.prototype.wait = function (fn) {                                                             // 77\n  var self = this;                                                                                    // 78\n                                                                                                      // 79\n  var activeComp = Deps.currentComputation;                                                           // 80\n                                                                                                      // 81\n  assertNoInvalidationLoop(self._readyDep);                                                           // 82\n                                                                                                      // 83\n  // break with parent computation and grab the new comp                                              // 84\n  Deps.nonreactive(function () {                                                                      // 85\n                                                                                                      // 86\n    // store the cached result so we can see if it's different from one run to                        // 87\n    // the next.                                                                                      // 88\n    var cachedResult = null;                                                                          // 89\n                                                                                                      // 90\n    // create a computation for this handle                                                           // 91\n    var comp = Deps.autorun(function (c) {                                                            // 92\n      // let's get the new result coerced into a true or false value.                                 // 93\n      var result = !!fn();                                                                            // 94\n                                                                                                      // 95\n      var oldNotReadyCount = self._notReadyCount;                                                     // 96\n                                                                                                      // 97\n      // if it's the first run and we're false then inc                                               // 98\n      if (c.firstRun && !result)                                                                      // 99\n        self._notReadyCount++;                                                                        // 100\n      else if (cachedResult !== null && result !== cachedResult && result === true)                   // 101\n        self._notReadyCount--;                                                                        // 102\n      else if (cachedResult !== null && result !== cachedResult && result === false)                  // 103\n        self._notReadyCount++;                                                                        // 104\n                                                                                                      // 105\n      cachedResult = result;                                                                          // 106\n                                                                                                      // 107\n      if (oldNotReadyCount === 0 && self._notReadyCount > 0)                                          // 108\n        self._readyDep.changed();                                                                     // 109\n      else if (oldNotReadyCount > 0 && self._notReadyCount === 0)                                     // 110\n        self._readyDep.changed();                                                                     // 111\n    });                                                                                               // 112\n                                                                                                      // 113\n    self._comps.push(comp);                                                                           // 114\n                                                                                                      // 115\n    if (activeComp) {                                                                                 // 116\n      activeComp.onInvalidate(function () {                                                           // 117\n        // keep the old computation and notReadyCount the same for one                                // 118\n        // flush cycle so that we don't end up in an intermediate state                               // 119\n        // where list.ready() is not correct.                                                         // 120\n                                                                                                      // 121\n        // keep the state the same until the flush cycle is complete                                  // 122\n        Deps.afterFlush(function () {                                                                 // 123\n          // stop the computation                                                                     // 124\n          comp.stop();                                                                                // 125\n                                                                                                      // 126\n          // remove the computation from the list                                                     // 127\n          self._comps.splice(_.indexOf(self._comps, comp), 1);                                        // 128\n                                                                                                      // 129\n          if (cachedResult === false) {                                                               // 130\n            self._notReadyCount--;                                                                    // 131\n                                                                                                      // 132\n            if (self._notReadyCount === 0)                                                            // 133\n              self._readyDep.changed();                                                               // 134\n          }                                                                                           // 135\n        });                                                                                           // 136\n      });                                                                                             // 137\n    }                                                                                                 // 138\n  });                                                                                                 // 139\n};                                                                                                    // 140\n                                                                                                      // 141\nWaitList.prototype.ready = function () {                                                              // 142\n  this._readyDep.depend();                                                                            // 143\n  return this._notReadyCount === 0;                                                                   // 144\n};                                                                                                    // 145\n                                                                                                      // 146\nWaitList.prototype.stop = function () {                                                               // 147\n  _.each(this._comps, function (c) { c.stop(); });                                                    // 148\n  this._comps = [];                                                                                   // 149\n};                                                                                                    // 150\n                                                                                                      // 151\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/client/hooks.js                                                           //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nRouter.hooks = {                                                                                      // 1\n  dataNotFound: function (pause) {                                                                    // 2\n    var tmpl;                                                                                         // 3\n                                                                                                      // 4\n    if (!this.ready())                                                                                // 5\n      return;                                                                                         // 6\n                                                                                                      // 7\n    if (!this._hasData())                                                                             // 8\n      return;                                                                                         // 9\n                                                                                                      // 10\n    var data = this.data();                                                                           // 11\n                                                                                                      // 12\n    if (data === false || data === null || typeof data === 'undefined') {                             // 13\n      tmpl = this.lookupProperty('notFoundTemplate');                                                 // 14\n                                                                                                      // 15\n      if (tmpl) {                                                                                     // 16\n        this.render(tmpl);                                                                            // 17\n        this.renderRegions();                                                                         // 18\n        pause();                                                                                      // 19\n      }                                                                                               // 20\n    }                                                                                                 // 21\n  },                                                                                                  // 22\n                                                                                                      // 23\n  loading: function (pause) {                                                                         // 24\n    var self = this;                                                                                  // 25\n    var tmpl;                                                                                         // 26\n                                                                                                      // 27\n    if (!this.ready()) {                                                                              // 28\n      tmpl = this.lookupProperty('loadingTemplate');                                                  // 29\n                                                                                                      // 30\n      if (tmpl) {                                                                                     // 31\n        this.render(tmpl);                                                                            // 32\n        this.renderRegions();                                                                         // 33\n        pause();                                                                                      // 34\n      }                                                                                               // 35\n    }                                                                                                 // 36\n  }                                                                                                   // 37\n};                                                                                                    // 38\n                                                                                                      // 39\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/client/route_controller.js                                                //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nvar isLogging = false;                                                                                // 1\nvar log = function (msg) {                                                                            // 2\n  if (!isLogging)                                                                                     // 3\n    return;                                                                                           // 4\n  console.log('%c<RouteController> ' + msg, 'color: purple; font-size: 1.3em; font-weight: bold;');   // 5\n};                                                                                                    // 6\n                                                                                                      // 7\nvar bindData = function (value, thisArg) {                                                            // 8\n  return function () {                                                                                // 9\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;                   // 10\n  };                                                                                                  // 11\n};                                                                                                    // 12\n                                                                                                      // 13\nRouteController = Utils.extend(RouteController, {                                                     // 14\n  constructor: function () {                                                                          // 15\n    var self = this;                                                                                  // 16\n                                                                                                      // 17\n    RouteController.__super__.constructor.apply(this, arguments);                                     // 18\n                                                                                                      // 19\n    this._waitList = new WaitList;                                                                    // 20\n                                                                                                      // 21\n    //XXX putting this back so people can access data by calling                                      // 22\n    //this.data().                                                                                    // 23\n                                                                                                      // 24\n    var data = this.lookupProperty('data');                                                           // 25\n                                                                                                      // 26\n    this._hasData = function () { return typeof data !== 'undefined'; };                              // 27\n    this.data = bindData(data, this);                                                                 // 28\n                                                                                                      // 29\n    // proxy these methods to the router                                                              // 30\n    _.each([                                                                                          // 31\n      'layout',                                                                                       // 32\n      'setRegion',                                                                                    // 33\n      'clearRegion'                                                                                   // 34\n    ], function (routerApiMethod) {                                                                   // 35\n      self[routerApiMethod] = function () {                                                           // 36\n        if (!self.router)                                                                             // 37\n          throw new Error(\"No router defined on RouteController\");                                    // 38\n        return self.router[routerApiMethod].apply(self.router, arguments);                            // 39\n      };                                                                                              // 40\n    });                                                                                               // 41\n  },                                                                                                  // 42\n                                                                                                      // 43\n  setLayout: function () {                                                                            // 44\n    return this.layout.apply(this, arguments);                                                        // 45\n  },                                                                                                  // 46\n                                                                                                      // 47\n  ready: function () {                                                                                // 48\n    return this._waitList.ready();                                                                    // 49\n  },                                                                                                  // 50\n                                                                                                      // 51\n  /**                                                                                                 // 52\n   * Stop running this controller and redirect to a new path. Same parameters as                      // 53\n   * those of Router.go.                                                                              // 54\n   * @api public                                                                                      // 55\n   */                                                                                                 // 56\n                                                                                                      // 57\n  redirect: function (/* args */) {                                                                   // 58\n    return Router.go.apply(Router, arguments);                                                        // 59\n  },                                                                                                  // 60\n                                                                                                      // 61\n  subscribe: function (/* same as Meteor.subscribe */) {                                              // 62\n    var self = this;                                                                                  // 63\n    var handle = Meteor.subscribe.apply(this, arguments);                                             // 64\n                                                                                                      // 65\n    return _.extend(handle, {                                                                         // 66\n      wait: function () {                                                                             // 67\n        self.wait(this);                                                                              // 68\n      }                                                                                               // 69\n    });                                                                                               // 70\n  },                                                                                                  // 71\n                                                                                                      // 72\n  lookupLayoutTemplate: function () {                                                                 // 73\n    return this.lookupProperty('layoutTemplate');                                                     // 74\n  },                                                                                                  // 75\n                                                                                                      // 76\n  lookupTemplate: function () {                                                                       // 77\n    return this.lookupProperty('template')                                                            // 78\n      || Router.convertTemplateName(this.route.name);                                                 // 79\n  },                                                                                                  // 80\n                                                                                                      // 81\n  lookupRegionTemplates: function () {                                                                // 82\n    var res;                                                                                          // 83\n                                                                                                      // 84\n    if (res = this.lookupProperty('regionTemplates'))                                                 // 85\n      return res;                                                                                     // 86\n    else if (res = this.lookupProperty('yieldTemplates'))                                             // 87\n      return res;                                                                                     // 88\n    else                                                                                              // 89\n      return {};                                                                                      // 90\n  },                                                                                                  // 91\n                                                                                                      // 92\n  /**                                                                                                 // 93\n   * Return an array of waitOn values in the folowing order (although, ordering                       // 94\n   * shouldn't really matter for waitOn). The result may contain sub arrays like                      // 95\n   * this:                                                                                            // 96\n   *   [[fn1, fn2], [fn3, fn4]]                                                                       // 97\n   *                                                                                                  // 98\n   *   1. Router options                                                                              // 99\n   *   2. Route options                                                                               // 100\n   *   3. Controller options                                                                          // 101\n   *   4. Controller instance                                                                         // 102\n   */                                                                                                 // 103\n                                                                                                      // 104\n  lookupWaitOn: function () {                                                                         // 105\n    var toArray = Utils.toArray;                                                                      // 106\n                                                                                                      // 107\n    var fromRouterHook = toArray(this.router.getHooks('waitOn', this.route.name));                    // 108\n    var fromRouterOptions = toArray(this.router.options.waitOn);                                      // 109\n    var fromRouteOptions = toArray(this.route.options.waitOn);                                        // 110\n    var fromMyOptions = toArray(this.options.waitOn);                                                 // 111\n    var fromInstOptions = toArray(this.waitOn);                                                       // 112\n                                                                                                      // 113\n    return fromRouterHook                                                                             // 114\n      .concat(fromRouterOptions)                                                                      // 115\n      .concat(fromRouteOptions)                                                                       // 116\n      .concat(fromMyOptions)                                                                          // 117\n      .concat(fromInstOptions);                                                                       // 118\n  },                                                                                                  // 119\n                                                                                                      // 120\n  /**                                                                                                 // 121\n   * Either specify a template to render or call with no arguments to render the                      // 122\n   * RouteController's template plus all of the yieldTemplates.                                       // 123\n   *                                                                                                  // 124\n   * XXX can we have some hooks here? would be nice to give                                           // 125\n   * iron-transitioner a place to plug in. Maybe onSetRegion(fn)?                                     // 126\n   */                                                                                                 // 127\n                                                                                                      // 128\n  render: function (template, options) {                                                              // 129\n    var to;                                                                                           // 130\n    var template;                                                                                     // 131\n    var layout;                                                                                       // 132\n    var self = this;                                                                                  // 133\n                                                                                                      // 134\n    if (arguments.length == 0) {                                                                      // 135\n      this.setRegion(this.lookupTemplate());                                                          // 136\n      this.renderRegions();                                                                           // 137\n    } else {                                                                                          // 138\n      options = options || {};                                                                        // 139\n      to = options.to;                                                                                // 140\n      this.setRegion(to, template);                                                                   // 141\n    }                                                                                                 // 142\n  },                                                                                                  // 143\n                                                                                                      // 144\n  renderRegions: function() {                                                                         // 145\n    var self = this;                                                                                  // 146\n    var regionTemplates = this.lookupRegionTemplates();                                               // 147\n                                                                                                      // 148\n    _.each(regionTemplates, function (opts, tmpl) {                                                   // 149\n      self.render(tmpl, opts)                                                                         // 150\n    });                                                                                               // 151\n  },                                                                                                  // 152\n                                                                                                      // 153\n  /**                                                                                                 // 154\n   * Add an item to the waitlist.                                                                     // 155\n   */                                                                                                 // 156\n  wait: function (fn) {                                                                               // 157\n    var self = this;                                                                                  // 158\n                                                                                                      // 159\n    if (!fn)                                                                                          // 160\n      // it's possible fn is just undefined but we'll just return instead                             // 161\n      // of throwing an error, to make it easier to call this function                                // 162\n      // with waitOn which might not return anything.                                                 // 163\n      return;                                                                                         // 164\n                                                                                                      // 165\n    if (_.isArray(fn)) {                                                                              // 166\n      _.each(fn, function eachWait (fnOrHandle) {                                                     // 167\n        self.wait(fnOrHandle);                                                                        // 168\n      });                                                                                             // 169\n    } else if (fn.ready) {                                                                            // 170\n      this._waitList.wait(function () { return fn.ready(); });                                        // 171\n    } else {                                                                                          // 172\n      this._waitList.wait(fn);                                                                        // 173\n    }                                                                                                 // 174\n                                                                                                      // 175\n    return this;                                                                                      // 176\n  },                                                                                                  // 177\n                                                                                                      // 178\n  action: function () {                                                                               // 179\n    this.render();                                                                                    // 180\n  },                                                                                                  // 181\n                                                                                                      // 182\n  /**                                                                                                 // 183\n   * A private method that the Router can call into to                                                // 184\n   * stop the controller. The reason we need this is because we                                       // 185\n   * don't want users calling stop() in their hooks/action like they                                  // 186\n   * had done previously. We now want them to call pause(). stop() now                                // 187\n   * completely stops the controller and tears down its computations. pause()                         // 188\n   * just stopps running downstream functions (e.g. when you're running                               // 189\n   * before/action/after functions. But if the outer computation causes the                           // 190\n   * entire chain of functions to run again that's fine.                                              // 191\n   */                                                                                                 // 192\n  _stopController: function (cb) {                                                                    // 193\n    var self = this;                                                                                  // 194\n                                                                                                      // 195\n    // noop if we're already stopped                                                                  // 196\n    if (this.isStopped)                                                                               // 197\n      return;                                                                                         // 198\n                                                                                                      // 199\n    var onStop = function () {                                                                        // 200\n      RouteController.__super__._stopController.call(self, cb);                                       // 201\n    };                                                                                                // 202\n                                                                                                      // 203\n    if (this._computation) {                                                                          // 204\n      this._computation.stop();                                                                       // 205\n      this._computation.onInvalidate(onStop);                                                         // 206\n    } else {                                                                                          // 207\n      onStop();                                                                                       // 208\n    }                                                                                                 // 209\n  },                                                                                                  // 210\n                                                                                                      // 211\n  _run: function () {                                                                                 // 212\n    var self = this;                                                                                  // 213\n    var layout = self.router._layout;                                                                 // 214\n                                                                                                      // 215\n    // if we're already running, you can't call run again without                                     // 216\n    // calling stop first.                                                                            // 217\n    if (self.isRunning)                                                                               // 218\n      throw new Error(\"You called _run without first calling stop\");                                  // 219\n                                                                                                      // 220\n    self.isRunning = true;                                                                            // 221\n    self.isStopped = false;                                                                           // 222\n                                                                                                      // 223\n    var withNoStopsAllowed = function (fn, thisArg) {                                                 // 224\n      return function () {                                                                            // 225\n        var oldStop = self.stop;                                                                      // 226\n                                                                                                      // 227\n        self.stop = function () {                                                                     // 228\n          if (typeof console !== 'undefined') {                                                       // 229\n            console.warn(\"You called this.stop() inside a hook or your action function but you should use pause() now instead which is the first parameter to the hook function.\");\n            return;                                                                                   // 231\n          }                                                                                           // 232\n        };                                                                                            // 233\n                                                                                                      // 234\n        try {                                                                                         // 235\n          return fn.apply(thisArg || this, arguments);                                                // 236\n        } finally {                                                                                   // 237\n          self.stop = oldStop;                                                                        // 238\n        }                                                                                             // 239\n      };                                                                                              // 240\n    };                                                                                                // 241\n                                                                                                      // 242\n    Deps.autorun(withNoStopsAllowed(function (c) {                                                    // 243\n      // outer most computation is just used to stop inner computations from one                      // 244\n      // place. Is stopped when the route is routed away from, which includes                         // 245\n      // if an route action redirects away.                                                           // 246\n      self._computation = c;                                                                          // 247\n                                                                                                      // 248\n      Deps.autorun(withNoStopsAllowed(function (onRunComp) {                                          // 249\n        if (!self.router._hasJustReloaded && c.firstRun && onRunComp.firstRun)                        // 250\n          self.runHooks('onRun');                                                                     // 251\n        self.router._hasJustReloaded = false;                                                         // 252\n      }));                                                                                            // 253\n                                                                                                      // 254\n      Deps.autorun(function (c) {                                                                     // 255\n        // waitOn                                                                                     // 256\n        var waitOnList = self.lookupWaitOn();                                                         // 257\n        var waitOn = _.flatten(_.map(waitOnList, function (fnOrHandle) {                              // 258\n          return _.isFunction(fnOrHandle) ? fnOrHandle.call(self) : fnOrHandle;                       // 259\n        }));                                                                                          // 260\n                                                                                                      // 261\n        log('waitOn');                                                                                // 262\n                                                                                                      // 263\n        self.wait(waitOn);                                                                            // 264\n      });                                                                                             // 265\n                                                                                                      // 266\n      Deps.autorun(function (c) {                                                                     // 267\n        // if we're already in a renderig transaction we want to cancel the                           // 268\n        // transaction. So the previous afterFlush callback should just be a                          // 269\n        // noop, and the new afterflush callback should do what's required. But                       // 270\n        // we need to keep a stack of these                                                           // 271\n        self.router._layout.beginRendering(function onCompleteRenderingTransaction (usedRegions) {    // 272\n          if (self.isStopped)                                                                         // 273\n            return;                                                                                   // 274\n          var allRegions = layout.regionKeys();                                                       // 275\n          var unusedRegions = _.difference(allRegions, usedRegions);                                  // 276\n          _.each(unusedRegions, function (r) { layout.clear(r); });                                   // 277\n        });                                                                                           // 278\n                                                                                                      // 279\n        // action                                                                                     // 280\n        var action = _.isFunction(self.action) ? self.action : self[self.action];                     // 281\n        Utils.assert(action,                                                                          // 282\n          \"You don't have an action named \\\"\" + self.action + \"\\\" defined on your RouteController\");  // 283\n                                                                                                      // 284\n        // Set layout to configured layoutTemplate                                                    // 285\n        self.layout(self.lookupLayoutTemplate(), {                                                    // 286\n          data: self.lookupProperty('data')                                                           // 287\n        });                                                                                           // 288\n                                                                                                      // 289\n        self.runHooks('onBeforeAction', [], function (paused) {                                       // 290\n          if (self.isStopped)                                                                         // 291\n            return;                                                                                   // 292\n                                                                                                      // 293\n          if (!paused) {                                                                              // 294\n            action.call(self);                                                                        // 295\n                                                                                                      // 296\n            if (!self.isStopped) {                                                                    // 297\n              self.runHooks('onAfterAction');                                                         // 298\n            }                                                                                         // 299\n          }                                                                                           // 300\n        });                                                                                           // 301\n      });                                                                                             // 302\n    }));                                                                                              // 303\n  }                                                                                                   // 304\n});                                                                                                   // 305\n                                                                                                      // 306\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/client/ui/helpers.js                                                      //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nRouter.helpers = {};                                                                                  // 1\n                                                                                                      // 2\nvar getData = function (thisArg) {                                                                    // 3\n  return thisArg === window ? {} : thisArg;                                                           // 4\n};                                                                                                    // 5\n                                                                                                      // 6\nvar processPathArgs = function (routeName, options) {                                                 // 7\n  if (_.isObject(routeName)) {                                                                        // 8\n    options = routeName;                                                                              // 9\n    routeName = options.route;                                                                        // 10\n  }                                                                                                   // 11\n                                                                                                      // 12\n  var opts = options.hash || {};                                                                      // 13\n  var params = opts.params || _.omit(opts, 'hash', 'query');                                          // 14\n  var hash = opts.hash;                                                                               // 15\n  var query = opts.query;                                                                             // 16\n                                                                                                      // 17\n  // if called without opts, use the data context of the parent                                       // 18\n  if (_.isEmpty(opts))                                                                                // 19\n    params = getData(this);                                                                           // 20\n                                                                                                      // 21\n  return {                                                                                            // 22\n    routeName: routeName,                                                                             // 23\n    params: params,                                                                                   // 24\n    query: query,                                                                                     // 25\n    hash: hash                                                                                        // 26\n  };                                                                                                  // 27\n};                                                                                                    // 28\n                                                                                                      // 29\n_.extend(Router.helpers, {                                                                            // 30\n                                                                                                      // 31\n  /**                                                                                                 // 32\n   * Example Use:                                                                                     // 33\n   *                                                                                                  // 34\n   *  {{pathFor 'items' params=this}}                                                                 // 35\n   *  {{pathFor 'items' id=5 query=\"view=all\" hash=\"somehash\"}}                                       // 36\n   *  {{pathFor route='items' id=5 query=\"view=all\" hash=\"somehash\"}}                                 // 37\n   */                                                                                                 // 38\n                                                                                                      // 39\n  pathFor: function (routeName, options) {                                                            // 40\n    var args = processPathArgs.call(this, routeName, options);                                        // 41\n                                                                                                      // 42\n    return Router.path(args.routeName, args.params, {                                                 // 43\n      query: args.query,                                                                              // 44\n      hash: args.hash                                                                                 // 45\n    });                                                                                               // 46\n  },                                                                                                  // 47\n                                                                                                      // 48\n  /**                                                                                                 // 49\n   * Same as pathFor but returns entire aboslute url.                                                 // 50\n   *                                                                                                  // 51\n   */                                                                                                 // 52\n  urlFor: function (routeName, options) {                                                             // 53\n    var args = processPathArgs.call(this, routeName, options);                                        // 54\n                                                                                                      // 55\n    return Router.url(args.routeName, args.params, {                                                  // 56\n      query: args.query,                                                                              // 57\n      hash: args.hash                                                                                 // 58\n    });                                                                                               // 59\n  }                                                                                                   // 60\n});                                                                                                   // 61\n                                                                                                      // 62\n_.each(Router.helpers, function (helper, name) {                                                      // 63\n  UI.registerHelper(name, helper);                                                                    // 64\n});                                                                                                   // 65\n                                                                                                      // 66\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/iron:router/lib/version_conflict_error.js                                                 //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nif (Package['cmather:iron-router']) {                                                                 // 1\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");                                                                                                 // 17\n}                                                                                                     // 18\n                                                                                                      // 19\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]