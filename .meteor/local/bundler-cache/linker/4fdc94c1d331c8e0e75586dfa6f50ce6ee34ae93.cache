[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\n\n/* Package-scope variables */\nvar JsonRoutes, RestMiddleware;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/simple_json-routes/json-routes.js                                                    //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\n/* global JsonRoutes:true */                                                                     // 1\n                                                                                                 // 2\nvar Fiber = Npm.require('fibers');                                                               // 3\nvar connect = Npm.require('connect');                                                            // 4\nvar connectRoute = Npm.require('connect-route');                                                 // 5\n                                                                                                 // 6\nJsonRoutes = {};                                                                                 // 7\n                                                                                                 // 8\nWebApp.connectHandlers.use(connect.urlencoded({limit: '50mb'})); //Override default request size\nWebApp.connectHandlers.use(connect.json({limit: '50mb'})); //Override default request size       // 10\nWebApp.connectHandlers.use(connect.query());                                                     // 11\n                                                                                                 // 12\n// Handler for adding middleware before an endpoint (JsonRoutes.middleWare                       // 13\n// is just for legacy reasons). Also serves as a namespace for middleware                        // 14\n// packages to declare their middleware functions.                                               // 15\nJsonRoutes.Middleware = JsonRoutes.middleWare = connect();                                       // 16\nWebApp.connectHandlers.use(JsonRoutes.Middleware);                                               // 17\n                                                                                                 // 18\n// List of all defined JSON API endpoints                                                        // 19\nJsonRoutes.routes = [];                                                                          // 20\n                                                                                                 // 21\n// Save reference to router for later                                                            // 22\nvar connectRouter;                                                                               // 23\n                                                                                                 // 24\n// Register as a middleware                                                                      // 25\nWebApp.connectHandlers.use(connectRoute(function (router) {                                      // 26\n  connectRouter = router;                                                                        // 27\n}));                                                                                             // 28\n                                                                                                 // 29\n// Error middleware must be added last, to catch errors from prior middleware.                   // 30\n// That's why we cache them and then add after startup.                                          // 31\nvar errorMiddlewares = [];                                                                       // 32\nJsonRoutes.ErrorMiddleware = {                                                                   // 33\n  use: function () {                                                                             // 34\n    errorMiddlewares.push(arguments);                                                            // 35\n  },                                                                                             // 36\n};                                                                                               // 37\n                                                                                                 // 38\nMeteor.startup(function () {                                                                     // 39\n  _.each(errorMiddlewares, function (errorMiddleware) {                                          // 40\n    WebApp.connectHandlers.use.apply(WebApp.connectHandlers, errorMiddleware);                   // 41\n  });                                                                                            // 42\n                                                                                                 // 43\n  errorMiddlewares = [];                                                                         // 44\n});                                                                                              // 45\n                                                                                                 // 46\nJsonRoutes.add = function (method, path, handler) {                                              // 47\n  // Make sure path starts with a slash                                                          // 48\n  if (path[0] !== '/') {                                                                         // 49\n    path = '/' + path;                                                                           // 50\n  }                                                                                              // 51\n                                                                                                 // 52\n  // Add to list of known endpoints                                                              // 53\n  JsonRoutes.routes.push({                                                                       // 54\n    method: method,                                                                              // 55\n    path: path,                                                                                  // 56\n  });                                                                                            // 57\n                                                                                                 // 58\n  connectRouter[method.toLowerCase()](path, function (req, res, next) {                          // 59\n    // Set headers on response                                                                   // 60\n    setHeaders(res, responseHeaders);                                                            // 61\n    Fiber(function () {                                                                          // 62\n      try {                                                                                      // 63\n        handler(req, res, next);                                                                 // 64\n      } catch (error) {                                                                          // 65\n        next(error);                                                                             // 66\n      }                                                                                          // 67\n    }).run();                                                                                    // 68\n  });                                                                                            // 69\n};                                                                                               // 70\n                                                                                                 // 71\nvar responseHeaders = {                                                                          // 72\n  'Cache-Control': 'no-store',                                                                   // 73\n  Pragma: 'no-cache',                                                                            // 74\n};                                                                                               // 75\n                                                                                                 // 76\nJsonRoutes.setResponseHeaders = function (headers) {                                             // 77\n  responseHeaders = headers;                                                                     // 78\n};                                                                                               // 79\n                                                                                                 // 80\n/**                                                                                              // 81\n * Sets the response headers, status code, and body, and ends it.                                // 82\n * The JSON response will be pretty printed if NODE_ENV is `development`.                        // 83\n *                                                                                               // 84\n * @param {Object} res Response object                                                           // 85\n * @param {Object} [options]                                                                     // 86\n * @param {Number} [options.code] HTTP status code. Default is 200.                              // 87\n * @param {Object} [options.headers] Dictionary of headers.                                      // 88\n * @param {Object|Array|null|undefined} [options.data] The object to                             // 89\n *   stringify as the response. If `null`, the response will be \"null\".                          // 90\n *   If `undefined`, there will be no response body.                                             // 91\n */                                                                                              // 92\nJsonRoutes.sendResult = function (res, options) {                                                // 93\n  options = options || {};                                                                       // 94\n                                                                                                 // 95\n  // We've already set global headers on response, but if they                                   // 96\n  // pass in more here, we set those.                                                            // 97\n  if (options.headers) setHeaders(res, options.headers);                                         // 98\n                                                                                                 // 99\n  // Set status code on response                                                                 // 100\n  res.statusCode = options.code || 200;                                                          // 101\n                                                                                                 // 102\n  // Set response body                                                                           // 103\n  writeJsonToBody(res, options.data);                                                            // 104\n                                                                                                 // 105\n  // Send the response                                                                           // 106\n  res.end();                                                                                     // 107\n};                                                                                               // 108\n                                                                                                 // 109\nfunction setHeaders(res, headers) {                                                              // 110\n  _.each(headers, function (value, key) {                                                        // 111\n    res.setHeader(key, value);                                                                   // 112\n  });                                                                                            // 113\n}                                                                                                // 114\n                                                                                                 // 115\nfunction writeJsonToBody(res, json) {                                                            // 116\n  if (json !== undefined) {                                                                      // 117\n    var shouldPrettyPrint = (process.env.NODE_ENV === 'development');                            // 118\n    var spacer = shouldPrettyPrint ? 2 : null;                                                   // 119\n    res.setHeader('Content-type', 'application/json');                                           // 120\n    res.write(JSON.stringify(json, null, spacer));                                               // 121\n  }                                                                                              // 122\n}                                                                                                // 123\n                                                                                                 // 124\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/simple_json-routes/middleware.js                                                     //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\n/* global RestMiddleware:true */                                                                 // 1\n                                                                                                 // 2\nRestMiddleware = {};                                                                             // 3\n                                                                                                 // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['simple:json-routes'] = {\n  JsonRoutes: JsonRoutes,\n  RestMiddleware: RestMiddleware\n};\n\n})();\n","servePath":"/packages/simple_json-routes.js","sourceMap":{"version":3,"sources":["/packages/simple_json-routes/json-routes.js","/packages/simple_json-routes/middleware.js"],"names":[],"mappingsuG;;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA,qG","file":"/packages/simple_json-routes.js","sourcesContent":["/* global JsonRoutes:true */\n\nvar Fiber = Npm.require('fibers');\nvar connect = Npm.require('connect');\nvar connectRoute = Npm.require('connect-route');\n\nJsonRoutes = {};\n\nWebApp.connectHandlers.use(connect.urlencoded({limit: '50mb'})); //Override default request size\nWebApp.connectHandlers.use(connect.json({limit: '50mb'})); //Override default request size\nWebApp.connectHandlers.use(connect.query());\n\n// Handler for adding middleware before an endpoint (JsonRoutes.middleWare\n// is just for legacy reasons). Also serves as a namespace for middleware\n// packages to declare their middleware functions.\nJsonRoutes.Middleware = JsonRoutes.middleWare = connect();\nWebApp.connectHandlers.use(JsonRoutes.Middleware);\n\n// List of all defined JSON API endpoints\nJsonRoutes.routes = [];\n\n// Save reference to router for later\nvar connectRouter;\n\n// Register as a middleware\nWebApp.connectHandlers.use(connectRoute(function (router) {\n  connectRouter = router;\n}));\n\n// Error middleware must be added last, to catch errors from prior middleware.\n// That's why we cache them and then add after startup.\nvar errorMiddlewares = [];\nJsonRoutes.ErrorMiddleware = {\n  use: function () {\n    errorMiddlewares.push(arguments);\n  },\n};\n\nMeteor.startup(function () {\n  _.each(errorMiddlewares, function (errorMiddleware) {\n    WebApp.connectHandlers.use.apply(WebApp.connectHandlers, errorMiddleware);\n  });\n\n  errorMiddlewares = [];\n});\n\nJsonRoutes.add = function (method, path, handler) {\n  // Make sure path starts with a slash\n  if (path[0] !== '/') {\n    path = '/' + path;\n  }\n\n  // Add to list of known endpoints\n  JsonRoutes.routes.push({\n    method: method,\n    path: path,\n  });\n\n  connectRouter[method.toLowerCase()](path, function (req, res, next) {\n    // Set headers on response\n    setHeaders(res, responseHeaders);\n    Fiber(function () {\n      try {\n        handler(req, res, next);\n      } catch (error) {\n        next(error);\n      }\n    }).run();\n  });\n};\n\nvar responseHeaders = {\n  'Cache-Control': 'no-store',\n  Pragma: 'no-cache',\n};\n\nJsonRoutes.setResponseHeaders = function (headers) {\n  responseHeaders = headers;\n};\n\n/**\n * Sets the response headers, status code, and body, and ends it.\n * The JSON response will be pretty printed if NODE_ENV is `development`.\n *\n * @param {Object} res Response object\n * @param {Object} [options]\n * @param {Number} [options.code] HTTP status code. Default is 200.\n * @param {Object} [options.headers] Dictionary of headers.\n * @param {Object|Array|null|undefined} [options.data] The object to\n *   stringify as the response. If `null`, the response will be \"null\".\n *   If `undefined`, there will be no response body.\n */\nJsonRoutes.sendResult = function (res, options) {\n  options = options || {};\n\n  // We've already set global headers on response, but if they\n  // pass in more here, we set those.\n  if (options.headers) setHeaders(res, options.headers);\n\n  // Set status code on response\n  res.statusCode = options.code || 200;\n\n  // Set response body\n  writeJsonToBody(res, options.data);\n\n  // Send the response\n  res.end();\n};\n\nfunction setHeaders(res, headers) {\n  _.each(headers, function (value, key) {\n    res.setHeader(key, value);\n  });\n}\n\nfunction writeJsonToBody(res, json) {\n  if (json !== undefined) {\n    var shouldPrettyPrint = (process.env.NODE_ENV === 'development');\n    var spacer = shouldPrettyPrint ? 2 : null;\n    res.setHeader('Content-type', 'application/json');\n    res.write(JSON.stringify(json, null, spacer));\n  }\n}\n","/* global RestMiddleware:true */\n\nRestMiddleware = {};\n"]}}]