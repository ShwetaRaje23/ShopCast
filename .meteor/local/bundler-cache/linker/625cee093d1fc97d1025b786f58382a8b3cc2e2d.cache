[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar Reload = Package.reload.Reload;\nvar Base64 = Package.base64.Base64;\nvar URL = Package.url.URL;\n\n/* Package-scope variables */\nvar OAuth, Oauth;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/oauth_client.js                                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// credentialToken -> credentialSecret. You must provide both the                       // 1\n// credentialToken and the credentialSecret to retrieve an access token from            // 2\n// the _pendingCredentials collection.                                                  // 3\nvar credentialSecrets = {};                                                             // 4\n                                                                                        // 5\nOAuth = {};                                                                             // 6\n                                                                                        // 7\nOAuth.showPopup = function (url, callback, dimensions) {                                // 8\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");                 // 9\n};                                                                                      // 10\n                                                                                        // 11\n// Determine the login style (popup or redirect) for this login flow.                   // 12\n//                                                                                      // 13\n//                                                                                      // 14\nOAuth._loginStyle = function (service, config, options) {                               // 15\n                                                                                        // 16\n  if (Meteor.isCordova) {                                                               // 17\n    return \"popup\";                                                                     // 18\n  }                                                                                     // 19\n                                                                                        // 20\n  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';     // 21\n                                                                                        // 22\n  if (! _.contains([\"popup\", \"redirect\"], loginStyle))                                  // 23\n    throw new Error(\"Invalid login style: \" + loginStyle);                              // 24\n                                                                                        // 25\n  // If we don't have session storage (for example, Safari in private                   // 26\n  // mode), the redirect login flow won't work, so fallback to the                      // 27\n  // popup style.                                                                       // 28\n  if (loginStyle === 'redirect') {                                                      // 29\n    try {                                                                               // 30\n      sessionStorage.setItem('Meteor.oauth.test', 'test');                              // 31\n      sessionStorage.removeItem('Meteor.oauth.test');                                   // 32\n    } catch (e) {                                                                       // 33\n      loginStyle = 'popup';                                                             // 34\n    }                                                                                   // 35\n  }                                                                                     // 36\n                                                                                        // 37\n  return loginStyle;                                                                    // 38\n};                                                                                      // 39\n                                                                                        // 40\nOAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {               // 41\n  var state = {                                                                         // 42\n    loginStyle: loginStyle,                                                             // 43\n    credentialToken: credentialToken,                                                   // 44\n    isCordova: Meteor.isCordova                                                         // 45\n  };                                                                                    // 46\n                                                                                        // 47\n  if (loginStyle === 'redirect')                                                        // 48\n    state.redirectUrl = redirectUrl || ('' + window.location);                          // 49\n                                                                                        // 50\n  // Encode base64 as not all login services URI-encode the state                       // 51\n  // parameter when they pass it back to us.                                            // 52\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.             // 53\n  return Base64.encode(JSON.stringify(state));                                          // 54\n};                                                                                      // 55\n                                                                                        // 56\n                                                                                        // 57\n// At the beginning of the redirect login flow, before we redirect to                   // 58\n// the login service, save the credential token for this login attempt                  // 59\n// in the reload migration data.                                                        // 60\n//                                                                                      // 61\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {                  // 62\n  Reload._onMigrate('oauth', function () {                                              // 63\n    return [true, {loginService: loginService, credentialToken: credentialToken}];      // 64\n  });                                                                                   // 65\n  Reload._migrate(null, {immediateMigration: true});                                    // 66\n};                                                                                      // 67\n                                                                                        // 68\n// At the end of the redirect login flow, when we've redirected back                    // 69\n// to the application, retrieve the credentialToken and (if the login                   // 70\n// was successful) the credentialSecret.                                                // 71\n//                                                                                      // 72\n// Called at application startup.  Returns null if this is normal                       // 73\n// application startup and we weren't just redirected at the end of                     // 74\n// the login flow.                                                                      // 75\n//                                                                                      // 76\nOAuth.getDataAfterRedirect = function () {                                              // 77\n  var migrationData = Reload._migrationData('oauth');                                   // 78\n                                                                                        // 79\n  if (! (migrationData && migrationData.credentialToken))                               // 80\n    return null;                                                                        // 81\n                                                                                        // 82\n  var credentialToken = migrationData.credentialToken;                                  // 83\n  var key = OAuth._storageTokenPrefix + credentialToken;                                // 84\n  var credentialSecret;                                                                 // 85\n  try {                                                                                 // 86\n    credentialSecret = sessionStorage.getItem(key);                                     // 87\n    sessionStorage.removeItem(key);                                                     // 88\n  } catch (e) {                                                                         // 89\n    Meteor._debug('error retrieving credentialSecret', e);                              // 90\n  }                                                                                     // 91\n  return {                                                                              // 92\n    loginService: migrationData.loginService,                                           // 93\n    credentialToken: credentialToken,                                                   // 94\n    credentialSecret: credentialSecret                                                  // 95\n  };                                                                                    // 96\n};                                                                                      // 97\n                                                                                        // 98\n// Launch an OAuth login flow.  For the popup login style, show the                     // 99\n// popup.  For the redirect login style, save the credential token for                  // 100\n// this login attempt in the reload migration data, and redirect to                     // 101\n// the service for the login.                                                           // 102\n//                                                                                      // 103\n// options:                                                                             // 104\n//  loginService: \"facebook\", \"google\", etc.                                            // 105\n//  loginStyle: \"popup\" or \"redirect\"                                                   // 106\n//  loginUrl: The URL at the login service provider to start the OAuth flow.            // 107\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup          // 108\n//    is closed and we have the credential from the login service.                      // 109\n//  credentialToken: our identifier for this login flow.                                // 110\n//                                                                                      // 111\nOAuth.launchLogin = function (options) {                                                // 112\n  if (! options.loginService)                                                           // 113\n    throw new Error('loginService required');                                           // 114\n  if (options.loginStyle === 'popup') {                                                 // 115\n    OAuth.showPopup(                                                                    // 116\n      options.loginUrl,                                                                 // 117\n      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),\n      options.popupOptions);                                                            // 119\n  } else if (options.loginStyle === 'redirect') {                                       // 120\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);           // 121\n    window.location = options.loginUrl;                                                 // 122\n  } else {                                                                              // 123\n    throw new Error('invalid login style');                                             // 124\n  }                                                                                     // 125\n};                                                                                      // 126\n                                                                                        // 127\n// XXX COMPAT WITH 0.7.0.1                                                              // 128\n// Private interface but probably used by many oauth clients in atmosphere.             // 129\nOAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {           // 130\n  OAuth.showPopup(                                                                      // 131\n    url,                                                                                // 132\n    _.bind(callback, null, credentialToken),                                            // 133\n    dimensions                                                                          // 134\n  );                                                                                    // 135\n};                                                                                      // 136\n                                                                                        // 137\n// Called by the popup when the OAuth flow is completed, right before                   // 138\n// the popup closes.                                                                    // 139\nOAuth._handleCredentialSecret = function (credentialToken, secret) {                    // 140\n  check(credentialToken, String);                                                       // 141\n  check(secret, String);                                                                // 142\n  if (! _.has(credentialSecrets,credentialToken)) {                                     // 143\n    credentialSecrets[credentialToken] = secret;                                        // 144\n  } else {                                                                              // 145\n    throw new Error(\"Duplicate credential token from OAuth login\");                     // 146\n  }                                                                                     // 147\n};                                                                                      // 148\n                                                                                        // 149\n// Used by accounts-oauth, which needs both a credentialToken and the                   // 150\n// corresponding to credential secret to call the `login` method over DDP.              // 151\nOAuth._retrieveCredentialSecret = function (credentialToken) {                          // 152\n  // First check the secrets collected by OAuth._handleCredentialSecret,                // 153\n  // then check localStorage. This matches what we do in                                // 154\n  // end_of_login_response.html.                                                        // 155\n  var secret = credentialSecrets[credentialToken];                                      // 156\n  if (! secret) {                                                                       // 157\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;                  // 158\n    secret = Meteor._localStorage.getItem(localStorageKey);                             // 159\n    Meteor._localStorage.removeItem(localStorageKey);                                   // 160\n  } else {                                                                              // 161\n    delete credentialSecrets[credentialToken];                                          // 162\n  }                                                                                     // 163\n  return secret;                                                                        // 164\n};                                                                                      // 165\n                                                                                        // 166\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/oauth_cordova.js                                                      //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// Cordova specific code for the OAuth package.                                         // 1\n                                                                                        // 2\n// Open a popup window, centered on the screen, and call a callback when it             // 3\n// closes.                                                                              // 4\n//                                                                                      // 5\n// @param url {String} url to show                                                      // 6\n// @param callback {Function} Callback function to call on completion. Takes no         // 7\n//   arguments.                                                                         // 8\n// @param dimensions {optional Object(width, height)} The dimensions of                 // 9\n//   the popup. If not passed defaults to something sane.                               // 10\nOAuth.showPopup = function (url, callback, dimensions) {                                // 11\n  var fail = function (err) {                                                           // 12\n    Meteor._debug(\"Error from OAuth popup: \" + JSON.stringify(err));                    // 13\n  };                                                                                    // 14\n                                                                                        // 15\n  // When running on an android device, we sometimes see the                            // 16\n  // `pageLoaded` callback fire twice for the final page in the OAuth                   // 17\n  // popup, even though the page only loads once. This is maybe an                      // 18\n  // Android bug or maybe something intentional about how onPageFinished                // 19\n  // works that we don't understand and isn't well-documented.                          // 20\n  var oauthFinished = false;                                                            // 21\n                                                                                        // 22\n  var pageLoaded = function (event) {                                                   // 23\n    if (oauthFinished) {                                                                // 24\n      return;                                                                           // 25\n    }                                                                                   // 26\n                                                                                        // 27\n    if (event.url.indexOf(Meteor.absoluteUrl('_oauth')) === 0) {                        // 28\n      var splitUrl = event.url.split(\"#\");                                              // 29\n      var hashFragment = splitUrl[1];                                                   // 30\n                                                                                        // 31\n      if (! hashFragment) {                                                             // 32\n        throw new Error(\"No hash fragment in OAuth popup?\");                            // 33\n      }                                                                                 // 34\n                                                                                        // 35\n      var credentials = JSON.parse(decodeURIComponent(hashFragment));                   // 36\n      OAuth._handleCredentialSecret(credentials.credentialToken,                        // 37\n                                    credentials.credentialSecret);                      // 38\n                                                                                        // 39\n      oauthFinished = true;                                                             // 40\n                                                                                        // 41\n      // On iOS, this seems to prevent \"Warning: Attempt to dismiss from                // 42\n      // view controller <MainViewController: ...> while a presentation                 // 43\n      // or dismiss is in progress\". My guess is that the last                          // 44\n      // navigation of the OAuth popup is still in progress while we try                // 45\n      // to close the popup. See                                                        // 46\n      // https://issues.apache.org/jira/browse/CB-2285.                                 // 47\n      //                                                                                // 48\n      // XXX Can we make this timeout smaller?                                          // 49\n      setTimeout(function () {                                                          // 50\n        popup.close();                                                                  // 51\n        callback();                                                                     // 52\n      }, 100);                                                                          // 53\n    }                                                                                   // 54\n  };                                                                                    // 55\n                                                                                        // 56\n  var onExit = function () {                                                            // 57\n    popup.removeEventListener('loadstop', pageLoaded);                                  // 58\n    popup.removeEventListener('loaderror', fail);                                       // 59\n    popup.removeEventListener('exit', onExit);                                          // 60\n  };                                                                                    // 61\n                                                                                        // 62\n  var popup = window.open(url, '_blank', 'location=yes,hidden=yes');                    // 63\n  popup.addEventListener('loadstop', pageLoaded);                                       // 64\n  popup.addEventListener('loaderror', fail);                                            // 65\n  popup.addEventListener('exit', onExit);                                               // 66\n  popup.show();                                                                         // 67\n                                                                                        // 68\n};                                                                                      // 69\n                                                                                        // 70\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/oauth_common.js                                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nOAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";                           // 1\n                                                                                        // 2\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {       // 3\n  // XXX COMPAT WITH 0.9.0                                                              // 4\n  // The redirect URI used to have a \"?close\" query argument.  We                       // 5\n  // detect whether we need to be backwards compatible by checking for                  // 6\n  // the absence of the `loginStyle` field, which wasn't used in the                    // 7\n  // code which had the \"?close\" argument.                                              // 8\n  // This logic is duplicated in the tool so that the tool can do OAuth                 // 9\n  // flow with <= 0.9.0 servers (tools/auth.js).                                        // 10\n  var query = config.loginStyle ? null : \"close\";                                       // 11\n                                                                                        // 12\n  // Clone because we're going to mutate 'params'. The 'cordova' and                    // 13\n  // 'android' parameters are only used for picking the host of the                     // 14\n  // redirect URL, and not actually included in the redirect URL itself.                // 15\n  var isCordova = false;                                                                // 16\n  var isAndroid = false;                                                                // 17\n  if (params) {                                                                         // 18\n    params = _.clone(params);                                                           // 19\n    isCordova = params.cordova;                                                         // 20\n    isAndroid = params.android;                                                         // 21\n    delete params.cordova;                                                              // 22\n    delete params.android;                                                              // 23\n    if (_.isEmpty(params)) {                                                            // 24\n      params = undefined;                                                               // 25\n    }                                                                                   // 26\n  }                                                                                     // 27\n                                                                                        // 28\n  if (Meteor.isServer && isCordova) {                                                   // 29\n    var rootUrl = process.env.MOBILE_ROOT_URL ||                                        // 30\n          __meteor_runtime_config__.ROOT_URL;                                           // 31\n                                                                                        // 32\n    if (isAndroid) {                                                                    // 33\n      // Match the replace that we do in cordova boilerplate                            // 34\n      // (boilerplate-generator package).                                               // 35\n      // XXX Maybe we should put this in a separate package or something                // 36\n      // that is used here and by boilerplate-generator? Or maybe                       // 37\n      // `Meteor.absoluteUrl` should know how to do this?                               // 38\n      var url = Npm.require(\"url\");                                                     // 39\n      var parsedRootUrl = url.parse(rootUrl);                                           // 40\n      if (parsedRootUrl.hostname === \"localhost\") {                                     // 41\n        parsedRootUrl.hostname = \"10.0.2.2\";                                            // 42\n        delete parsedRootUrl.host;                                                      // 43\n      }                                                                                 // 44\n      rootUrl = url.format(parsedRootUrl);                                              // 45\n    }                                                                                   // 46\n                                                                                        // 47\n    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {                             // 48\n      // For Cordova clients, redirect to the special Cordova root url                  // 49\n      // (likely a local IP in development mode).                                       // 50\n      rootUrl: rootUrl                                                                  // 51\n    });                                                                                 // 52\n  }                                                                                     // 53\n                                                                                        // 54\n  return URL._constructUrl(                                                             // 55\n    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),                    // 56\n    query,                                                                              // 57\n    params);                                                                            // 58\n};                                                                                      // 59\n                                                                                        // 60\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/oauth/deprecated.js                                                         //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// XXX COMPAT WITH 0.8.0                                                                // 1\n                                                                                        // 2\nOauth = OAuth;                                                                          // 3\n                                                                                        // 4\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.oauth = {\n  OAuth: OAuth,\n  Oauth: Oauth\n};\n\n})();\n","servePath":"/packages/oauth.js","sourceMap":{"version":3,"sources":["/packages/oauth/oauth_client.js","/packages/oauth/oauth_cordova.js","/packages/oauth/oauth_common.js","/packages/oauth/deprecated.js"],"names":[],"mappingsrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA,4F","file":"/packages/oauth.js","sourcesContent":["// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nvar credentialSecrets = {};\n\nOAuth = {};\n\nOAuth.showPopup = function (url, callback, dimensions) {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n};\n\n// Determine the login style (popup or redirect) for this login flow.\n//\n//\nOAuth._loginStyle = function (service, config, options) {\n\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n\n  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';\n\n  if (! _.contains([\"popup\", \"redirect\"], loginStyle))\n    throw new Error(\"Invalid login style: \" + loginStyle);\n\n  // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n\n  return loginStyle;\n};\n\nOAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {\n  var state = {\n    loginStyle: loginStyle,\n    credentialToken: credentialToken,\n    isCordova: Meteor.isCordova\n  };\n\n  if (loginStyle === 'redirect')\n    state.redirectUrl = redirectUrl || ('' + window.location);\n\n  // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n  return Base64.encode(JSON.stringify(state));\n};\n\n\n// At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {\n  Reload._onMigrate('oauth', function () {\n    return [true, {loginService: loginService, credentialToken: credentialToken}];\n  });\n  Reload._migrate(null, {immediateMigration: true});\n};\n\n// At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\nOAuth.getDataAfterRedirect = function () {\n  var migrationData = Reload._migrationData('oauth');\n\n  if (! (migrationData && migrationData.credentialToken))\n    return null;\n\n  var credentialToken = migrationData.credentialToken;\n  var key = OAuth._storageTokenPrefix + credentialToken;\n  var credentialSecret;\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n  return {\n    loginService: migrationData.loginService,\n    credentialToken: credentialToken,\n    credentialSecret: credentialSecret\n  };\n};\n\n// Launch an OAuth login flow.  For the popup login style, show the\n// popup.  For the redirect login style, save the credential token for\n// this login attempt in the reload migration data, and redirect to\n// the service for the login.\n//\n// options:\n//  loginService: \"facebook\", \"google\", etc.\n//  loginStyle: \"popup\" or \"redirect\"\n//  loginUrl: The URL at the login service provider to start the OAuth flow.\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup\n//    is closed and we have the credential from the login service.\n//  credentialToken: our identifier for this login flow.\n//\nOAuth.launchLogin = function (options) {\n  if (! options.loginService)\n    throw new Error('loginService required');\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(\n      options.loginUrl,\n      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),\n      options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n};\n\n// XXX COMPAT WITH 0.7.0.1\n// Private interface but probably used by many oauth clients in atmosphere.\nOAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {\n  OAuth.showPopup(\n    url,\n    _.bind(callback, null, credentialToken),\n    dimensions\n  );\n};\n\n// Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\nOAuth._handleCredentialSecret = function (credentialToken, secret) {\n  check(credentialToken, String);\n  check(secret, String);\n  if (! _.has(credentialSecrets,credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n};\n\n// Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\nOAuth._retrieveCredentialSecret = function (credentialToken) {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  var secret = credentialSecrets[credentialToken];\n  if (! secret) {\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n  return secret;\n};\n","// Cordova specific code for the OAuth package.\n\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = function (url, callback, dimensions) {\n  var fail = function (err) {\n    Meteor._debug(\"Error from OAuth popup: \" + JSON.stringify(err));\n  };\n\n  // When running on an android device, we sometimes see the\n  // `pageLoaded` callback fire twice for the final page in the OAuth\n  // popup, even though the page only loads once. This is maybe an\n  // Android bug or maybe something intentional about how onPageFinished\n  // works that we don't understand and isn't well-documented.\n  var oauthFinished = false;\n\n  var pageLoaded = function (event) {\n    if (oauthFinished) {\n      return;\n    }\n\n    if (event.url.indexOf(Meteor.absoluteUrl('_oauth')) === 0) {\n      var splitUrl = event.url.split(\"#\");\n      var hashFragment = splitUrl[1];\n\n      if (! hashFragment) {\n        throw new Error(\"No hash fragment in OAuth popup?\");\n      }\n\n      var credentials = JSON.parse(decodeURIComponent(hashFragment));\n      OAuth._handleCredentialSecret(credentials.credentialToken,\n                                    credentials.credentialSecret);\n\n      oauthFinished = true;\n\n      // On iOS, this seems to prevent \"Warning: Attempt to dismiss from\n      // view controller <MainViewController: ...> while a presentation\n      // or dismiss is in progress\". My guess is that the last\n      // navigation of the OAuth popup is still in progress while we try\n      // to close the popup. See\n      // https://issues.apache.org/jira/browse/CB-2285.\n      //\n      // XXX Can we make this timeout smaller?\n      setTimeout(function () {\n        popup.close();\n        callback();\n      }, 100);\n    }\n  };\n\n  var onExit = function () {\n    popup.removeEventListener('loadstop', pageLoaded);\n    popup.removeEventListener('loaderror', fail);\n    popup.removeEventListener('exit', onExit);\n  };\n\n  var popup = window.open(url, '_blank', 'location=yes,hidden=yes');\n  popup.addEventListener('loadstop', pageLoaded);\n  popup.addEventListener('loaderror', fail);\n  popup.addEventListener('exit', onExit);\n  popup.show();\n\n};\n","OAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\n\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {\n  // XXX COMPAT WITH 0.9.0\n  // The redirect URI used to have a \"?close\" query argument.  We\n  // detect whether we need to be backwards compatible by checking for\n  // the absence of the `loginStyle` field, which wasn't used in the\n  // code which had the \"?close\" argument.\n  // This logic is duplicated in the tool so that the tool can do OAuth\n  // flow with <= 0.9.0 servers (tools/auth.js).\n  var query = config.loginStyle ? null : \"close\";\n\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  var isCordova = false;\n  var isAndroid = false;\n  if (params) {\n    params = _.clone(params);\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n    if (_.isEmpty(params)) {\n      params = undefined;\n    }\n  }\n\n  if (Meteor.isServer && isCordova) {\n    var rootUrl = process.env.MOBILE_ROOT_URL ||\n          __meteor_runtime_config__.ROOT_URL;\n\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      var url = Npm.require(\"url\");\n      var parsedRootUrl = url.parse(rootUrl);\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n      rootUrl = url.format(parsedRootUrl);\n    }\n\n    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl: rootUrl\n    });\n  }\n\n  return URL._constructUrl(\n    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),\n    query,\n    params);\n};\n","// XXX COMPAT WITH 0.8.0\n\nOauth = OAuth;\n"]}}]