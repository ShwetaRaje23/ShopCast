[{"type":"js","data":"(function () {\n\n/* Imports */\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar EJSON = Package.ejson.EJSON;\nvar Meteor = Package.meteor.Meteor;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar JsonRoutes = Package['simple:json-routes'].JsonRoutes;\nvar RestMiddleware = Package['simple:json-routes'].RestMiddleware;\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\n\n/* Package-scope variables */\nvar HttpConnection, HttpSubscription, SimpleRest, paths, pathInfo;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/simple_rest/http-connection.js                                      //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n// Simulate a DDP connection from HTTP request                                  // 1\nHttpConnection = function () {                                                  // 2\n  // no-op now                                                                  // 3\n};                                                                              // 4\n                                                                                // 5\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/simple_rest/http-subscription.js                                    //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nvar EventEmitter = Npm.require('events').EventEmitter;                          // 1\n                                                                                // 2\n// This file describes something like Subscription in                           // 3\n// meteor/meteor/packages/ddp/livedata_server.js, but instead of sending        // 4\n// over a socket it puts together an HTTP response                              // 5\nHttpSubscription = function (options) {                                         // 6\n  // Object where the keys are collection names, and then the keys are _ids     // 7\n  this.responseData = {};                                                       // 8\n                                                                                // 9\n  this.connection = new HttpConnection(options.request);                        // 10\n  this.userId = options.userId;                                                 // 11\n};                                                                              // 12\n                                                                                // 13\n// So that we can listen to ready event in a reasonable way                     // 14\nMeteor._inherits(HttpSubscription, EventEmitter);                               // 15\n                                                                                // 16\n_.extend(HttpSubscription.prototype, {                                          // 17\n  added: function (collection, id, fields) {                                    // 18\n    var self = this;                                                            // 19\n                                                                                // 20\n    check(collection, String);                                                  // 21\n    if (id instanceof Mongo.Collection.ObjectID) id = id + '';                  // 22\n    check(id, String);                                                          // 23\n                                                                                // 24\n    self._ensureCollectionInRes(collection);                                    // 25\n                                                                                // 26\n    // Make sure to ignore the _id in fields                                    // 27\n    var addedDocument = _.extend({_id: id}, _.omit(fields, '_id'));             // 28\n    self.responseData[collection][id] = addedDocument;                          // 29\n  },                                                                            // 30\n                                                                                // 31\n  changed: function (collection, id, fields) {                                  // 32\n    var self = this;                                                            // 33\n                                                                                // 34\n    check(collection, String);                                                  // 35\n    if (id instanceof Mongo.Collection.ObjectID) id = id + '';                  // 36\n    check(id, String);                                                          // 37\n                                                                                // 38\n    self._ensureCollectionInRes(collection);                                    // 39\n                                                                                // 40\n    var existingDocument = this.responseData[collection][id];                   // 41\n    var fieldsNoId = _.omit(fields, '_id');                                     // 42\n    _.extend(existingDocument, fieldsNoId);                                     // 43\n                                                                                // 44\n    // Delete all keys that were undefined in fields (except _id)               // 45\n    _.each(fields, function (value, key) {                                      // 46\n      if (value === undefined) {                                                // 47\n        delete existingDocument[key];                                           // 48\n      }                                                                         // 49\n    });                                                                         // 50\n  },                                                                            // 51\n                                                                                // 52\n  removed: function (collection, id) {                                          // 53\n    var self = this;                                                            // 54\n                                                                                // 55\n    check(collection, String);                                                  // 56\n    if (id instanceof Mongo.Collection.ObjectID) id = id + '';                  // 57\n    check(id, String);                                                          // 58\n                                                                                // 59\n    self._ensureCollectionInRes(collection);                                    // 60\n                                                                                // 61\n    delete self.responseData[collection][id];                                   // 62\n                                                                                // 63\n    if (_.isEmpty(self.responseData[collection])) {                             // 64\n      delete self.responseData[collection];                                     // 65\n    }                                                                           // 66\n  },                                                                            // 67\n                                                                                // 68\n  ready: function () {                                                          // 69\n    this.emit('ready', this._generateResponse());                               // 70\n  },                                                                            // 71\n                                                                                // 72\n  onStop: function () {                                                         // 73\n    // no-op in HTTP                                                            // 74\n  },                                                                            // 75\n                                                                                // 76\n  error: function (error) {                                                     // 77\n    throw error;                                                                // 78\n  },                                                                            // 79\n                                                                                // 80\n  _ensureCollectionInRes: function (collection) {                               // 81\n    this.responseData[collection] = this.responseData[collection] || {};        // 82\n  },                                                                            // 83\n                                                                                // 84\n  _generateResponse: function () {                                              // 85\n    var output = {};                                                            // 86\n                                                                                // 87\n    _.each(this.responseData, function (documents, collectionName) {            // 88\n      output[collectionName] = _.values(documents);                             // 89\n    });                                                                         // 90\n                                                                                // 91\n    return output;                                                              // 92\n  },                                                                            // 93\n});                                                                             // 94\n                                                                                // 95\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/simple_rest/rest.js                                                 //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nSimpleRest = {};                                                                // 1\n                                                                                // 2\n// Can be used to limit which collections get endpoints:                        // 3\n// {                                                                            // 4\n//   collections: ['widgets', 'doodles']                                        // 5\n// }                                                                            // 6\n// By default all do. Use empty array for none.                                 // 7\n//                                                                              // 8\n// Also:                                                                        // 9\n//    objectIdCollections: ['widgets', 'doodles']                               // 10\nSimpleRest._config = {};                                                        // 11\nSimpleRest.configure = function (config) {                                      // 12\n  return _.extend(SimpleRest._config, config);                                  // 13\n};                                                                              // 14\n                                                                                // 15\nSimpleRest._methodOptions = {};                                                 // 16\n                                                                                // 17\n// Set options for a particular DDP method that will later be defined           // 18\nSimpleRest.setMethodOptions = function (name, options) {                        // 19\n  check(name, String);                                                          // 20\n                                                                                // 21\n  // Throw an error if the Method is already defined - too late to pass         // 22\n  // options                                                                    // 23\n  if (_.has(Meteor.server.method_handlers, name)) {                             // 24\n    throw new Error('Must pass options before Method is defined: '              // 25\n      + name);                                                                  // 26\n  }                                                                             // 27\n                                                                                // 28\n  options = options || {};                                                      // 29\n                                                                                // 30\n  _.defaults(options, {                                                         // 31\n    url: 'methods/' + name,                                                     // 32\n    getArgsFromRequest: defaultGetArgsFromRequest,                              // 33\n    httpMethod: 'post',                                                         // 34\n  });                                                                           // 35\n                                                                                // 36\n  SimpleRest._methodOptions[name] = options;                                    // 37\n};                                                                              // 38\n                                                                                // 39\nvar oldPublish = Meteor.publish;                                                // 40\nMeteor.publish = function (name, handler, options) {                            // 41\n  options = options || {};                                                      // 42\n                                                                                // 43\n  var httpOptionKeys = [                                                        // 44\n    'url',                                                                      // 45\n    'getArgsFromRequest',                                                       // 46\n    'httpMethod',                                                               // 47\n  ];                                                                            // 48\n                                                                                // 49\n  var httpOptions = _.pick(options, httpOptionKeys);                            // 50\n  var ddpOptions = _.omit(options, httpOptionKeys);                             // 51\n                                                                                // 52\n  // Register DDP publication                                                   // 53\n  oldPublish(name, handler, ddpOptions);                                        // 54\n                                                                                // 55\n  _.defaults(httpOptions, {                                                     // 56\n    url: 'publications/' + name,                                                // 57\n    getArgsFromRequest: defaultGetArgsFromRequest,                              // 58\n    httpMethod: 'get',                                                          // 59\n  });                                                                           // 60\n                                                                                // 61\n  JsonRoutes.add(httpOptions.httpMethod, httpOptions.url, function (req, res) {\n    var userId = req.userId || null;                                            // 63\n                                                                                // 64\n    var httpSubscription = new HttpSubscription({                               // 65\n      request: req,                                                             // 66\n      userId: userId,                                                           // 67\n    });                                                                         // 68\n                                                                                // 69\n    httpSubscription.on('ready', function (response) {                          // 70\n      JsonRoutes.sendResult(res, {data: response});                             // 71\n    });                                                                         // 72\n                                                                                // 73\n    var handlerArgs = httpOptions.getArgsFromRequest(req);                      // 74\n                                                                                // 75\n    var handlerReturn = handler.apply(httpSubscription, handlerArgs);           // 76\n                                                                                // 77\n    // Fast track for publishing cursors - we don't even need livequery here,   // 78\n    // just making a normal DB query                                            // 79\n    if (handlerReturn && handlerReturn._publishCursor) {                        // 80\n      httpPublishCursor(handlerReturn, httpSubscription);                       // 81\n      httpSubscription.ready();                                                 // 82\n    } else if (handlerReturn && _.isArray(handlerReturn)) {                     // 83\n      // We don't need to run the checks to see if                              // 84\n      // the cursors overlap and stuff                                          // 85\n      // because calling Meteor.publish will do that for us :]                  // 86\n      _.each(handlerReturn, function (cursor) {                                 // 87\n        httpPublishCursor(cursor, httpSubscription);                            // 88\n      });                                                                       // 89\n                                                                                // 90\n      httpSubscription.ready();                                                 // 91\n    }                                                                           // 92\n  });                                                                           // 93\n};                                                                              // 94\n                                                                                // 95\nvar oldMethods = Object.getPrototypeOf(Meteor.server).methods;                  // 96\nMeteor.method = function (name, handler, options) {                             // 97\n  if (!SimpleRest._methodOptions[name]) {                                       // 98\n    SimpleRest.setMethodOptions(name, options);                                 // 99\n  } else if (options) {                                                         // 100\n    throw Error('Options already passed via setMethodOptions.');                // 101\n  }                                                                             // 102\n                                                                                // 103\n  var methodMap = {};                                                           // 104\n  methodMap[name] = handler;                                                    // 105\n  oldMethods.call(Meteor.server, methodMap);                                    // 106\n                                                                                // 107\n  // This is a default collection mutation method, do some special things to    // 108\n  // make it more RESTful                                                       // 109\n  if (insideDefineMutationMethods) {                                            // 110\n    var collectionName = name.split('/')[1];                                    // 111\n                                                                                // 112\n    if (_.isArray(SimpleRest._config.collections) &&                            // 113\n       !_.contains(SimpleRest._config.collections, collectionName)) return;     // 114\n                                                                                // 115\n    var isObjectId = false;                                                     // 116\n    if (_.isArray(SimpleRest._config.objectIdCollections) &&                    // 117\n       _.contains(SimpleRest._config.objectIdCollections, collectionName)) {    // 118\n      isObjectId = true;                                                        // 119\n    }                                                                           // 120\n                                                                                // 121\n    var modifier = name.split('/')[2];                                          // 122\n                                                                                // 123\n    var collectionUrl = '/' + collectionName;                                   // 124\n    var itemUrl = '/' + collectionName + '/:_id';                               // 125\n                                                                                // 126\n    if (modifier === 'insert') {                                                // 127\n      // Post the entire new document                                           // 128\n      addHTTPMethod(name, handler, {                                            // 129\n        httpMethod: 'post',                                                     // 130\n        url: collectionUrl,                                                     // 131\n      });                                                                       // 132\n    } else if (modifier === 'update') {                                         // 133\n      // PATCH means you submit an incomplete document, to update the fields    // 134\n      // you have passed                                                        // 135\n      addHTTPMethod(name, handler, {                                            // 136\n        url: itemUrl,                                                           // 137\n        httpMethod: 'patch',                                                    // 138\n        getArgsFromRequest: function (req) {                                    // 139\n          var id = req.params._id;                                              // 140\n          if (isObjectId) id = new Mongo.ObjectID(id);                          // 141\n          return [{ _id: id }, { $set: req.body }];                             // 142\n        },                                                                      // 143\n      });                                                                       // 144\n                                                                                // 145\n      // We don't have PUT because allow/deny doesn't let you replace documents\n      // you can define it manually if you want                                 // 147\n    } else if (modifier === 'remove') {                                         // 148\n      // Can only remove a single document by the _id                           // 149\n      addHTTPMethod(name, handler, {                                            // 150\n        url: itemUrl,                                                           // 151\n        httpMethod: 'delete',                                                   // 152\n        getArgsFromRequest: function (req) {                                    // 153\n          var id = req.params._id;                                              // 154\n          if (isObjectId) id = new Mongo.ObjectID(id);                          // 155\n          return [{ _id: id }];                                                 // 156\n        },                                                                      // 157\n      });                                                                       // 158\n    }                                                                           // 159\n                                                                                // 160\n    return;                                                                     // 161\n  }                                                                             // 162\n                                                                                // 163\n  addHTTPMethod(name, handler, options);                                        // 164\n};                                                                              // 165\n                                                                                // 166\n// Monkey patch _defineMutationMethods so that we can treat them specially      // 167\n// inside Meteor.method                                                         // 168\nvar insideDefineMutationMethods = false;                                        // 169\nvar oldDMM = Mongo.Collection.prototype._defineMutationMethods;                 // 170\nMongo.Collection.prototype._defineMutationMethods = function () {               // 171\n  insideDefineMutationMethods = true;                                           // 172\n  oldDMM.apply(this, arguments);                                                // 173\n  insideDefineMutationMethods = false;                                          // 174\n};                                                                              // 175\n                                                                                // 176\nMeteor.methods = Object.getPrototypeOf(Meteor.server).methods =                 // 177\n  function (methodMap) {                                                        // 178\n    _.each(methodMap, function (handler, name) {                                // 179\n      Meteor.method(name, handler);                                             // 180\n    });                                                                         // 181\n  };                                                                            // 182\n                                                                                // 183\nfunction addHTTPMethod(methodName, handler, options) {                          // 184\n  options = options || SimpleRest._methodOptions[methodName] || {};             // 185\n                                                                                // 186\n  options = _.defaults(options, {                                               // 187\n    getArgsFromRequest: defaultGetArgsFromRequest,                              // 188\n  });                                                                           // 189\n                                                                                // 190\n  JsonRoutes.add('options', options.url, function (req, res) {                  // 191\n    JsonRoutes.sendResult(res);                                                 // 192\n  });                                                                           // 193\n                                                                                // 194\n  JsonRoutes.add(options.httpMethod, options.url, function (req, res) {         // 195\n    var userId = req.userId || null;                                            // 196\n    var statusCode = 200;                                                       // 197\n                                                                                // 198\n    // XXX replace with a real one?                                             // 199\n    var methodInvocation = {                                                    // 200\n      userId: userId,                                                           // 201\n      setUserId: function () {                                                  // 202\n        throw Error('setUserId not implemented in this ' +                      // 203\n                      'version of simple:rest');                                // 204\n      },                                                                        // 205\n                                                                                // 206\n      isSimulation: false,                                                      // 207\n      unblock: function () {                                                    // 208\n        // no-op                                                                // 209\n      },                                                                        // 210\n                                                                                // 211\n      setHttpStatusCode: function (code) {                                      // 212\n        statusCode = code;                                                      // 213\n      },                                                                        // 214\n    };                                                                          // 215\n                                                                                // 216\n    var handlerArgs = options.getArgsFromRequest(req);                          // 217\n    var handlerReturn = handler.apply(methodInvocation, handlerArgs);           // 218\n    JsonRoutes.sendResult(res, {                                                // 219\n      code: statusCode,                                                         // 220\n      data: handlerReturn,                                                      // 221\n    });                                                                         // 222\n  });                                                                           // 223\n}                                                                               // 224\n                                                                                // 225\nfunction httpPublishCursor(cursor, subscription) {                              // 226\n  _.each(cursor.fetch(), function (document) {                                  // 227\n    subscription.added(cursor._cursorDescription.collectionName,                // 228\n      document._id, document);                                                  // 229\n  });                                                                           // 230\n}                                                                               // 231\n                                                                                // 232\nfunction defaultGetArgsFromRequest(req) {                                       // 233\n  var args = [];                                                                // 234\n  if (req.method === 'POST') {                                                  // 235\n    // by default, the request body is an array which is the arguments          // 236\n    args = EJSON.fromJSONValue(req.body);                                       // 237\n                                                                                // 238\n    // If it's an object, pass the entire object as the only argument           // 239\n    if (!_.isArray(args)) {                                                     // 240\n      args = [args];                                                            // 241\n    }                                                                           // 242\n  }                                                                             // 243\n                                                                                // 244\n  _.each(req.params, function (value, name) {                                   // 245\n    var parsed = parseInt(name, 10);                                            // 246\n                                                                                // 247\n    if (_.isNaN(parsed)) {                                                      // 248\n      throw new Error('REST publish doesn\\'t support parameters ' +             // 249\n                      'whose names aren\\'t integers.');                         // 250\n    }                                                                           // 251\n                                                                                // 252\n    args[parsed] = value;                                                       // 253\n  });                                                                           // 254\n                                                                                // 255\n  return args;                                                                  // 256\n}                                                                               // 257\n                                                                                // 258\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/simple_rest/list-api.js                                             //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/* global JsonRoutes:false - from simple:json-routes package */                 // 1\n/* global paths:true */                                                         // 2\n/* global pathInfo:true */                                                      // 3\n                                                                                // 4\n// publish all API methods                                                      // 5\nMeteor.publish('api-routes', function () {                                      // 6\n  var self = this;                                                              // 7\n                                                                                // 8\n  // Deduplicate routes across paths                                            // 9\n  paths = {};                                                                   // 10\n                                                                                // 11\n  _.each(JsonRoutes.routes, function (route) {                                  // 12\n    pathInfo = paths[route.path] || { methods: [], path: route.path };          // 13\n                                                                                // 14\n    pathInfo.methods.push(route.method);                                        // 15\n                                                                                // 16\n    paths[route.path] = pathInfo;                                               // 17\n  });                                                                           // 18\n                                                                                // 19\n  _.each(paths, function (pathInfo, path) {                                     // 20\n    self.added('api-routes', path, pathInfo);                                   // 21\n  });                                                                           // 22\n                                                                                // 23\n  self.ready();                                                                 // 24\n});                                                                             // 25\n                                                                                // 26\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['simple:rest'] = {\n  SimpleRest: SimpleRest\n};\n\n})();\n","servePath":"/packages/simple_rest.js","sourceMap":{"version":3,"sources":["/packages/simple_rest/http-connection.js","/packages/simple_rest/http-subscription.js","/packages/simple_rest/rest.js","/packages/simple_rest/list-api.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,oF;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qsF;;;;;;;;;;;;;;;;;;ACjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qF","file":"/packages/simple_rest.js","sourcesContent":["// Simulate a DDP connection from HTTP request\nHttpConnection = function () {\n  // no-op now\n};\n","var EventEmitter = Npm.require('events').EventEmitter;\n\n// This file describes something like Subscription in\n// meteor/meteor/packages/ddp/livedata_server.js, but instead of sending\n// over a socket it puts together an HTTP response\nHttpSubscription = function (options) {\n  // Object where the keys are collection names, and then the keys are _ids\n  this.responseData = {};\n\n  this.connection = new HttpConnection(options.request);\n  this.userId = options.userId;\n};\n\n// So that we can listen to ready event in a reasonable way\nMeteor._inherits(HttpSubscription, EventEmitter);\n\n_.extend(HttpSubscription.prototype, {\n  added: function (collection, id, fields) {\n    var self = this;\n\n    check(collection, String);\n    if (id instanceof Mongo.Collection.ObjectID) id = id + '';\n    check(id, String);\n\n    self._ensureCollectionInRes(collection);\n\n    // Make sure to ignore the _id in fields\n    var addedDocument = _.extend({_id: id}, _.omit(fields, '_id'));\n    self.responseData[collection][id] = addedDocument;\n  },\n\n  changed: function (collection, id, fields) {\n    var self = this;\n\n    check(collection, String);\n    if (id instanceof Mongo.Collection.ObjectID) id = id + '';\n    check(id, String);\n\n    self._ensureCollectionInRes(collection);\n\n    var existingDocument = this.responseData[collection][id];\n    var fieldsNoId = _.omit(fields, '_id');\n    _.extend(existingDocument, fieldsNoId);\n\n    // Delete all keys that were undefined in fields (except _id)\n    _.each(fields, function (value, key) {\n      if (value === undefined) {\n        delete existingDocument[key];\n      }\n    });\n  },\n\n  removed: function (collection, id) {\n    var self = this;\n\n    check(collection, String);\n    if (id instanceof Mongo.Collection.ObjectID) id = id + '';\n    check(id, String);\n\n    self._ensureCollectionInRes(collection);\n\n    delete self.responseData[collection][id];\n\n    if (_.isEmpty(self.responseData[collection])) {\n      delete self.responseData[collection];\n    }\n  },\n\n  ready: function () {\n    this.emit('ready', this._generateResponse());\n  },\n\n  onStop: function () {\n    // no-op in HTTP\n  },\n\n  error: function (error) {\n    throw error;\n  },\n\n  _ensureCollectionInRes: function (collection) {\n    this.responseData[collection] = this.responseData[collection] || {};\n  },\n\n  _generateResponse: function () {\n    var output = {};\n\n    _.each(this.responseData, function (documents, collectionName) {\n      output[collectionName] = _.values(documents);\n    });\n\n    return output;\n  },\n});\n","SimpleRest = {};\n\n// Can be used to limit which collections get endpoints:\n// {\n//   collections: ['widgets', 'doodles']\n// }\n// By default all do. Use empty array for none.\n//\n// Also:\n//    objectIdCollections: ['widgets', 'doodles']\nSimpleRest._config = {};\nSimpleRest.configure = function (config) {\n  return _.extend(SimpleRest._config, config);\n};\n\nSimpleRest._methodOptions = {};\n\n// Set options for a particular DDP method that will later be defined\nSimpleRest.setMethodOptions = function (name, options) {\n  check(name, String);\n\n  // Throw an error if the Method is already defined - too late to pass\n  // options\n  if (_.has(Meteor.server.method_handlers, name)) {\n    throw new Error('Must pass options before Method is defined: '\n      + name);\n  }\n\n  options = options || {};\n\n  _.defaults(options, {\n    url: 'methods/' + name,\n    getArgsFromRequest: defaultGetArgsFromRequest,\n    httpMethod: 'post',\n  });\n\n  SimpleRest._methodOptions[name] = options;\n};\n\nvar oldPublish = Meteor.publish;\nMeteor.publish = function (name, handler, options) {\n  options = options || {};\n\n  var httpOptionKeys = [\n    'url',\n    'getArgsFromRequest',\n    'httpMethod',\n  ];\n\n  var httpOptions = _.pick(options, httpOptionKeys);\n  var ddpOptions = _.omit(options, httpOptionKeys);\n\n  // Register DDP publication\n  oldPublish(name, handler, ddpOptions);\n\n  _.defaults(httpOptions, {\n    url: 'publications/' + name,\n    getArgsFromRequest: defaultGetArgsFromRequest,\n    httpMethod: 'get',\n  });\n\n  JsonRoutes.add(httpOptions.httpMethod, httpOptions.url, function (req, res) {\n    var userId = req.userId || null;\n\n    var httpSubscription = new HttpSubscription({\n      request: req,\n      userId: userId,\n    });\n\n    httpSubscription.on('ready', function (response) {\n      JsonRoutes.sendResult(res, {data: response});\n    });\n\n    var handlerArgs = httpOptions.getArgsFromRequest(req);\n\n    var handlerReturn = handler.apply(httpSubscription, handlerArgs);\n\n    // Fast track for publishing cursors - we don't even need livequery here,\n    // just making a normal DB query\n    if (handlerReturn && handlerReturn._publishCursor) {\n      httpPublishCursor(handlerReturn, httpSubscription);\n      httpSubscription.ready();\n    } else if (handlerReturn && _.isArray(handlerReturn)) {\n      // We don't need to run the checks to see if\n      // the cursors overlap and stuff\n      // because calling Meteor.publish will do that for us :]\n      _.each(handlerReturn, function (cursor) {\n        httpPublishCursor(cursor, httpSubscription);\n      });\n\n      httpSubscription.ready();\n    }\n  });\n};\n\nvar oldMethods = Object.getPrototypeOf(Meteor.server).methods;\nMeteor.method = function (name, handler, options) {\n  if (!SimpleRest._methodOptions[name]) {\n    SimpleRest.setMethodOptions(name, options);\n  } else if (options) {\n    throw Error('Options already passed via setMethodOptions.');\n  }\n\n  var methodMap = {};\n  methodMap[name] = handler;\n  oldMethods.call(Meteor.server, methodMap);\n\n  // This is a default collection mutation method, do some special things to\n  // make it more RESTful\n  if (insideDefineMutationMethods) {\n    var collectionName = name.split('/')[1];\n\n    if (_.isArray(SimpleRest._config.collections) &&\n       !_.contains(SimpleRest._config.collections, collectionName)) return;\n\n    var isObjectId = false;\n    if (_.isArray(SimpleRest._config.objectIdCollections) &&\n       _.contains(SimpleRest._config.objectIdCollections, collectionName)) {\n      isObjectId = true;\n    }\n\n    var modifier = name.split('/')[2];\n\n    var collectionUrl = '/' + collectionName;\n    var itemUrl = '/' + collectionName + '/:_id';\n\n    if (modifier === 'insert') {\n      // Post the entire new document\n      addHTTPMethod(name, handler, {\n        httpMethod: 'post',\n        url: collectionUrl,\n      });\n    } else if (modifier === 'update') {\n      // PATCH means you submit an incomplete document, to update the fields\n      // you have passed\n      addHTTPMethod(name, handler, {\n        url: itemUrl,\n        httpMethod: 'patch',\n        getArgsFromRequest: function (req) {\n          var id = req.params._id;\n          if (isObjectId) id = new Mongo.ObjectID(id);\n          return [{ _id: id }, { $set: req.body }];\n        },\n      });\n\n      // We don't have PUT because allow/deny doesn't let you replace documents\n      // you can define it manually if you want\n    } else if (modifier === 'remove') {\n      // Can only remove a single document by the _id\n      addHTTPMethod(name, handler, {\n        url: itemUrl,\n        httpMethod: 'delete',\n        getArgsFromRequest: function (req) {\n          var id = req.params._id;\n          if (isObjectId) id = new Mongo.ObjectID(id);\n          return [{ _id: id }];\n        },\n      });\n    }\n\n    return;\n  }\n\n  addHTTPMethod(name, handler, options);\n};\n\n// Monkey patch _defineMutationMethods so that we can treat them specially\n// inside Meteor.method\nvar insideDefineMutationMethods = false;\nvar oldDMM = Mongo.Collection.prototype._defineMutationMethods;\nMongo.Collection.prototype._defineMutationMethods = function () {\n  insideDefineMutationMethods = true;\n  oldDMM.apply(this, arguments);\n  insideDefineMutationMethods = false;\n};\n\nMeteor.methods = Object.getPrototypeOf(Meteor.server).methods =\n  function (methodMap) {\n    _.each(methodMap, function (handler, name) {\n      Meteor.method(name, handler);\n    });\n  };\n\nfunction addHTTPMethod(methodName, handler, options) {\n  options = options || SimpleRest._methodOptions[methodName] || {};\n\n  options = _.defaults(options, {\n    getArgsFromRequest: defaultGetArgsFromRequest,\n  });\n\n  JsonRoutes.add('options', options.url, function (req, res) {\n    JsonRoutes.sendResult(res);\n  });\n\n  JsonRoutes.add(options.httpMethod, options.url, function (req, res) {\n    var userId = req.userId || null;\n    var statusCode = 200;\n\n    // XXX replace with a real one?\n    var methodInvocation = {\n      userId: userId,\n      setUserId: function () {\n        throw Error('setUserId not implemented in this ' +\n                      'version of simple:rest');\n      },\n\n      isSimulation: false,\n      unblock: function () {\n        // no-op\n      },\n\n      setHttpStatusCode: function (code) {\n        statusCode = code;\n      },\n    };\n\n    var handlerArgs = options.getArgsFromRequest(req);\n    var handlerReturn = handler.apply(methodInvocation, handlerArgs);\n    JsonRoutes.sendResult(res, {\n      code: statusCode,\n      data: handlerReturn,\n    });\n  });\n}\n\nfunction httpPublishCursor(cursor, subscription) {\n  _.each(cursor.fetch(), function (document) {\n    subscription.added(cursor._cursorDescription.collectionName,\n      document._id, document);\n  });\n}\n\nfunction defaultGetArgsFromRequest(req) {\n  var args = [];\n  if (req.method === 'POST') {\n    // by default, the request body is an array which is the arguments\n    args = EJSON.fromJSONValue(req.body);\n\n    // If it's an object, pass the entire object as the only argument\n    if (!_.isArray(args)) {\n      args = [args];\n    }\n  }\n\n  _.each(req.params, function (value, name) {\n    var parsed = parseInt(name, 10);\n\n    if (_.isNaN(parsed)) {\n      throw new Error('REST publish doesn\\'t support parameters ' +\n                      'whose names aren\\'t integers.');\n    }\n\n    args[parsed] = value;\n  });\n\n  return args;\n}\n","/* global JsonRoutes:false - from simple:json-routes package */\n/* global paths:true */\n/* global pathInfo:true */\n\n// publish all API methods\nMeteor.publish('api-routes', function () {\n  var self = this;\n\n  // Deduplicate routes across paths\n  paths = {};\n\n  _.each(JsonRoutes.routes, function (route) {\n    pathInfo = paths[route.path] || { methods: [], path: route.path };\n\n    pathInfo.methods.push(route.method);\n\n    paths[route.path] = pathInfo;\n  });\n\n  _.each(paths, function (pathInfo, path) {\n    self.added('api-routes', path, pathInfo);\n  });\n\n  self.ready();\n});\n"]}}]